
=== eslint.config.js ===
import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  }
);



=== index.html ===
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Speed+</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>




=== postcss.config.js ===
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};



=== read-files.js ===
import { readFileSync, writeFileSync, readdirSync, statSync } from 'fs';
import { join, extname } from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

function getAllFiles(dirPath, arrayOfFiles = []) {
    const files = readdirSync(dirPath);

    files.forEach(file => {
        const fullPath = join(dirPath, file);
        
        if (statSync(fullPath).isDirectory()) {
            // Excluir node_modules y .git
            if (file !== 'node_modules' && file !== '.git' && file !== 'dist') {
                getAllFiles(fullPath, arrayOfFiles);
            }
        } else {
            // Solo incluir archivos relevantes
            if (['.ts', '.tsx', '.js', '.jsx', '.css', '.html'].includes(extname(file))) {
                const content = readFileSync(fullPath, 'utf8');
                arrayOfFiles.push({
                    path: fullPath,
                    content: content
                });
            }
        }
    });

    return arrayOfFiles;
}

// Ejecutar desde la raíz del proyecto
const projectFiles = getAllFiles('.');

// Formatear la salida
const output = projectFiles.map(file => {
    return `
=== ${file.path} ===
${file.content}
`;
}).join('\n');

// Guardar en un archivo
writeFileSync('project-files.txt', output);

console.log('Archivos guardados en project-files.txt'); 


=== src/App.tsx ===
import React, { useState } from 'react';
import { LogIn, Lock, User, AlertCircle } from 'lucide-react';
import Dashboard from './components/Dashboard';
import Builder from './components/Builder/Builder';
import Products from './components/Products/Products';
import Promotions from './components/Promotions';
import { PosterEditor } from './components/Posters/PosterEditor';
import { PrintView } from './components/Posters/PrintView';
import { BrowserRouter as Router, Routes, Route, useNavigate, useLocation } from 'react-router-dom';
import 'mapbox-gl/dist/mapbox-gl.css';
import { ConfigurationPortal } from './components/Settings/ConfigurationPortal';
import { PosterPreviewPage } from './pages/PosterPreview';

export interface DashboardProps {
  onLogout: () => void;
  onNewTemplate: () => void;
  onNewPoster: () => void;
  onProducts: () => void;
  onPromotions: () => void;
  onBack: () => void;
  userEmail?: string;
  onSettings: () => void;
}

function AppContent() {
  const [email, setEmail] = useState('admin@admin.com');
  const [password, setPassword] = useState('admin');
  const [error, setError] = useState('');
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [showBuilder, setShowBuilder] = useState(false);
  const [showProducts, setShowProducts] = useState(false);
  const [showPromotions, setShowPromotions] = useState(false);
  const [showPosterEditor, setShowPosterEditor] = useState(false);
  const [selectedProducts, setSelectedProducts] = useState<number[]>([]);
  const [promotion, setPromotion] = useState<number | undefined>(undefined);
  const navigate = useNavigate();
  const location = useLocation();
  const [isConfigOpen, setIsConfigOpen] = useState(false);

  React.useEffect(() => {
    if (location.state?.showPosterEditor) {
      setShowPosterEditor(true);
      if (location.state.selectedProducts) {
        setSelectedProducts(location.state.selectedProducts);
      }
      if (location.state.selectedPromotion) {
        setPromotion(location.state.selectedPromotion.id);
      }
    }
  }, [location.state]);

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    
    if (email === 'admin@admin.com' && password === 'admin') {
      setIsAuthenticated(true);
      setError('');
    } else {
      setError('Usuario o contraseña inválidos');
      setIsAuthenticated(false);
    }
  };

  const handleLogout = () => {
    setIsAuthenticated(false);
    setEmail('');
    setPassword('');
    setError('');
    setShowBuilder(false);
    setShowProducts(false);
    setShowPromotions(false);
    setShowPosterEditor(false);
  };

  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => setEmail(e.target.value);
  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => setPassword(e.target.value);

  const handleBack = () => {
    if (showBuilder) {
      setShowBuilder(false);
    } else if (showProducts) {
      setShowProducts(false);
    } else if (showPromotions) {
      setShowPromotions(false);
    } else if (showPosterEditor) {
      setShowPosterEditor(false);
    } else if (isAuthenticated) {
      if (window.confirm('¿Deseas cerrar sesión?')) {
        handleLogout();
      }
    }
  };

  const handleNewPoster = () => {
    setShowPosterEditor(true);
  };

  const handleSettings = () => {
    console.log('Opening settings...');
    setIsConfigOpen(true);
  };

  if (isAuthenticated && showBuilder) {
    return <Builder onBack={handleBack} />;
  }

  if (isAuthenticated && showProducts) {
    return <Products onBack={handleBack} />;
  }

  if (isAuthenticated && showPromotions) {
    return <Promotions onBack={handleBack} />;
  }

  if (isAuthenticated && showPosterEditor) {
    return (
      <PosterEditor 
        onBack={() => setShowPosterEditor(false)}
        onLogout={handleLogout}
        initialProducts={location.state?.selectedProducts}
        initialPromotion={location.state?.selectedPromotion}
      />
    );
  }

  if (isAuthenticated) {
    return (
      <>
        <Dashboard 
          onLogout={handleLogout} 
          onNewTemplate={() => setShowBuilder(true)} 
          onNewPoster={handleNewPoster}
          onProducts={() => setShowProducts(true)} 
          onPromotions={() => setShowPromotions(true)} 
          onBack={handleBack}
          userEmail={email}
          onSettings={handleSettings}
        />
        <ConfigurationPortal 
          isOpen={isConfigOpen} 
          onClose={() => setIsConfigOpen(false)} 
        />
      </>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-violet-900 flex items-start justify-center pt-20 p-4">
      <div className="w-full max-w-md">
        <div className="text-center mb-8">
          <div className="inline-flex items-center justify-center w-20 h-20 rounded-full bg-white/10 backdrop-blur-lg text-white mb-4 shadow-xl border border-white/10">
            <LogIn className="w-10 h-10" />
          </div>
          <h1 className="text-4xl font-bold text-white mb-2 drop-shadow-lg">Speed<span className="text-violet-400">+</span></h1>
          <p className="text-white/70 text-lg">Inicia sesión en tu cuenta</p>
        </div>

        <div className="bg-white/5 backdrop-blur-lg rounded-2xl shadow-2xl p-8 border border-white/10">
          <form onSubmit={handleSubmit} className="space-y-6">
            {error && (
              <div className="flex items-center gap-2 text-red-400 bg-red-500/10 p-3 rounded-lg backdrop-blur-sm border border-red-500/20">
                <AlertCircle className="w-5 h-5" />
                <span className="text-sm">{error}</span>
              </div>
            )}

            <div className="space-y-2">
              <label htmlFor="email" className="block text-sm font-medium text-white/90">
                Email
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <User className="h-5 w-5 text-white/40" />
                </div>
                <input
                  id="email"
                  type="email"
                  value={email}
                  onChange={handleEmailChange}
                  className="block w-full pl-10 pr-3 py-2 bg-white/10 border border-white/20 rounded-lg 
                           focus:ring-2 focus:ring-white/50 focus:border-transparent placeholder-white/30 text-white"
                  placeholder="tu@email.com"
                  defaultValue="admin@admin.com"
                />
              </div>
            </div>

            <div className="space-y-2">
              <label htmlFor="password" className="block text-sm font-medium text-white/90">
                Contraseña
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <Lock className="h-5 w-5 text-white/40" />
                </div>
                <input
                  id="password"
                  type="password"
                  value={password}
                  onChange={handlePasswordChange}
                  className="block w-full pl-10 pr-3 py-2 bg-white/10 border border-white/20 rounded-lg 
                           focus:ring-2 focus:ring-white/50 focus:border-transparent placeholder-white/30 text-white"
                  placeholder="••••••••"
                  defaultValue="admin"
                />
              </div>
            </div>

            <button
              type="submit"
              className="w-full py-3 px-4 bg-white/20 hover:bg-white/30 text-white rounded-lg 
                       transition-all duration-200 font-medium shadow-lg hover:shadow-xl
                       backdrop-blur-lg border border-white/20"
            >
              Iniciar Sesión
            </button>
          </form>
        </div>
      </div>
    </div>
  );
}

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/print-view" element={<PrintView />} />
        <Route path="/poster-preview" element={<PosterPreviewPage />} />
        <Route path="*" element={<AppContent />} />
      </Routes>
    </Router>
  );
}

export default App;


=== src/components/Builder/Block.tsx ===
import React from 'react';
import { X, Move } from 'lucide-react';
import { ResizableBox } from 'react-resizable';
import { Block as BlockType } from '../../types/builder';
import { renderBlockContent } from '../../utils/blockRenderer';
import 'react-resizable/css/styles.css';

interface BlockProps {
  block: BlockType;
  onDelete: (id: string) => void;
  onResize: (id: string, size: { width: number; height: number }) => void;
  onMove: (e: React.MouseEvent, id: string) => void;
  onImageUpload: (id: string, file: File) => void;
}

export const Block = React.memo(function Block({ 
  block, 
  onDelete, 
  onResize, 
  onMove,
  onImageUpload 
}: BlockProps) {
  const handleImageUploadWrapper = (file: File) => {
    onImageUpload(block.id, file);
  };

  return (
    <div
      className="absolute"
      style={{
        left: block.position.x,
        top: block.position.y,
      }}
    >
      <ResizableBox
        width={block.size.width}
        height={block.size.height}
        onResize={(e, { size }) => onResize(block.id, size)}
        minConstraints={[100, 50]}
        maxConstraints={[800, 600]}
        resizeHandles={['se', 'sw', 'ne', 'nw', 'n', 's', 'e', 'w']}
      >
        <div className="bg-white rounded-lg border border-gray-200 shadow-sm hover:shadow-md transition-shadow w-full h-full">
          <div 
            className="h-8 bg-gray-50 rounded-t-lg border-b border-gray-200 px-2 flex items-center justify-between cursor-move"
            onMouseDown={(e) => onMove(e, block.id)}
          >
            <Move className="w-4 h-4 text-gray-400" />
            <span className="text-sm text-gray-600">{block.type}</span>
            <button
              onClick={() => onDelete(block.id)}
              className="p-1 hover:bg-red-50 rounded-full"
            >
              <X className="w-4 h-4 text-gray-400" />
            </button>
          </div>
          <div className="p-4">
            {renderBlockContent({
              block,
              onImageUpload: handleImageUploadWrapper
            })}
          </div>
        </div>
      </ResizableBox>
    </div>
  );
}); 


=== src/components/Builder/Builder.tsx ===
import React, { useState } from 'react';
import { ArrowLeft, Layout, LayoutTemplate, Tag, Image, DollarSign, Percent, Gift, Square } from 'lucide-react';
import { motion } from 'framer-motion';
import Toolbar from './Toolbar';
import Canvas from './Canvas';
import Preview from './Preview';
import { Block, BlockType } from '../../types/builder';
import ErrorBoundary from './ErrorBoundary';

interface BuilderProps {
  onBack: () => void;
}

export default function Builder({ onBack }: BuilderProps) {
  const [blocks, setBlocks] = useState<Block[]>([]);
  const [showPreview, setShowPreview] = useState(false);
  const [templateId] = useState(() => generateTemplateId());

  const handleAddBlock = (type: BlockType) => {
    const newBlock: Block = {
      id: `${type}-${Date.now()}`,
      type,
      content: { text: `Nuevo bloque ${type}` },
      position: { x: 50, y: 50 },
      size: { width: 200, height: 100 }
    };
    setBlocks(prevBlocks => [...prevBlocks, newBlock]);
  };

  const blockTypes: BlockType[] = ['header', 'footer', 'sku', 'image', 'price', 'discount', 'promotion', 'logo'];

  return (
    <div className="min-h-screen bg-[conic-gradient(at_top_right,_var(--tw-gradient-stops))] from-slate-900 via-purple-900 to-slate-900 flex flex-col">
      {/* Header */}
      <div className="bg-white/10 backdrop-blur-lg shadow-sm border-b border-white/20">
        <div className="max-w-7xl mx-auto px-4">
          <div className="flex justify-between items-center h-16 relative">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={onBack}
              className="flex items-center text-white/80 hover:text-white"
            >
              <ArrowLeft className="w-5 h-5 mr-2" />
              <span className="font-medium">Volver al inicio</span>
            </motion.button>

            <span className="absolute left-1/2 -translate-x-1/2 text-white font-light text-2xl tracking-tight">
              Speed<span className="font-medium">+</span>
            </span>
          </div>
        </div>
      </div>
      
      {/* Toolbar */}
      <div className="bg-white border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4">
          <Toolbar 
            onSave={() => console.log('Guardando...', blocks)} 
            onPreview={() => setShowPreview(true)}
            templateId={templateId}
          />
        </div>
      </div>

      {/* Elementos */}
      <div className="bg-white border-b border-gray-200 py-2">
        <div className="max-w-7xl mx-auto px-4">
          <div className="flex items-center gap-4 overflow-x-auto pb-2">
            {blockTypes.map((type) => (
              <motion.button
                key={type}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => handleAddBlock(type)}
                className="flex flex-col items-center p-3 bg-white rounded-lg border border-gray-200
                         hover:border-indigo-500 hover:shadow-lg transition-all min-w-[100px]"
              >
                <div className="p-2 bg-indigo-50 rounded-lg mb-2">
                  {getBlockIcon(type)}
                </div>
                <span className="text-sm font-medium text-gray-600 whitespace-nowrap">
                  {getBlockLabel(type)}
                </span>
              </motion.button>
            ))}
          </div>
        </div>
      </div>
      
      {/* Canvas */}
      <div className="flex-1 overflow-hidden p-6">
        <div className="h-full bg-white/10 backdrop-blur-md rounded-2xl shadow-2xl border border-white/20">
          <ErrorBoundary>
            <Canvas blocks={blocks} setBlocks={setBlocks} />
          </ErrorBoundary>
        </div>
      </div>

      <Preview 
        blocks={blocks}
        isOpen={showPreview}
        onClose={() => setShowPreview(false)}
      />
    </div>
  );
}

function generateTemplateId(): string {
  const timestamp = Date.now().toString(36);
  const randomStr = Math.random().toString(36).substring(2, 8);
  return `TPL-${timestamp}-${randomStr}`.toUpperCase();
}

function getBlockIcon(type: BlockType) {
  const iconClass = "w-5 h-5 text-indigo-600";
  switch (type) {
    case 'header':
      return <Layout className={iconClass} />;
    case 'footer':
      return <LayoutTemplate className={iconClass} />;
    case 'sku':
      return <Tag className={iconClass} />;
    case 'image':
      return <Image className={iconClass} />;
    case 'price':
      return <DollarSign className={iconClass} />;
    case 'discount':
      return <Percent className={iconClass} />;
    case 'promotion':
      return <Gift className={iconClass} />;
    case 'logo':
      return <Image className={iconClass} />;
    default:
      return <Square className={iconClass} />;
  }
}

const blockLabels: Record<BlockType, string> = {
  header: 'Encabezado',
  footer: 'Pie de página',
  sku: 'SKU',
  image: 'Imagen',
  price: 'Precio',
  discount: 'Descuento',
  promotion: 'Promoción',
  logo: 'Logo'
};

function getBlockLabel(type: BlockType): string {
  return blockLabels[type] || type;
}


=== src/components/Builder/Canvas.tsx ===
import React, { useState, useCallback } from 'react';
import { Block } from './Block';
import { ZoomControls } from './ZoomControls';
import Rulers from './Rulers';
import { Block as BlockType } from '../../types/builder';

interface CanvasProps {
  blocks: BlockType[];
  setBlocks: React.Dispatch<React.SetStateAction<BlockType[]>>;
}

export default function Canvas({ blocks, setBlocks }: CanvasProps) {
  const GRID_SIZE = 20;
  const [scale, setScale] = useState(1);

  const handleDelete = useCallback((id: string) => {
    setBlocks(prev => prev.filter(block => block.id !== id));
  }, [setBlocks]);

  const handleResize = useCallback((id: string, size: { width: number; height: number }) => {
    setBlocks(prev => prev.map(block => 
      block.id === id ? { ...block, size } : block
    ));
  }, [setBlocks]);

  const handleMove = useCallback((e: React.MouseEvent, id: string) => {
    const block = blocks.find(b => b.id === id);
    if (!block) return;

    const startX = e.clientX - block.position.x;
    const startY = e.clientY - block.position.y;

    const handleMouseMove = (e: MouseEvent) => {
      setBlocks(prev => prev.map(b => 
        b.id === id 
          ? { ...b, position: { x: e.clientX - startX, y: e.clientY - startY } }
          : b
      ));
    };

    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', () => {
      document.removeEventListener('mousemove', handleMouseMove);
    }, { once: true });
  }, [blocks, setBlocks]);

  const handleImageUpload = useCallback((id: string, file: File) => {
    const reader = new FileReader();
    reader.onload = (e) => {
      const result = e.target?.result;
      if (typeof result === 'string') {
        setBlocks(prev => prev.map(block => 
          block.id === id 
            ? { ...block, content: { ...block.content, imageUrl: result } }
            : block
        ));
      }
    };
    reader.readAsDataURL(file);
  }, [setBlocks]);

  return (
    <div className="flex-1 bg-white rounded-lg shadow-lg p-4 relative min-h-[800px] overflow-hidden">
      <ZoomControls
        scale={scale}
        onZoomIn={() => setScale(s => Math.min(s + 0.1, 2))}
        onZoomOut={() => setScale(s => Math.max(s - 0.1, 0.5))}
      />
      <Rulers gridSize={GRID_SIZE * scale} />
      <div 
        className="relative w-[calc(100%-20px)] h-[calc(100%-20px)] ml-[20px] mt-[20px]"
        style={{
          transform: `scale(${scale})`,
          transformOrigin: '0 0',
          backgroundImage: `linear-gradient(to right, rgba(99, 102, 241, 0.1) 1px, transparent 1px),
                           linear-gradient(to bottom, rgba(99, 102, 241, 0.1) 1px, transparent 1px)`,
          backgroundSize: `${GRID_SIZE}px ${GRID_SIZE}px`,
          backgroundColor: 'white',
          width: '3000px',
          height: '2000px'
        }}
      >
        {blocks.map(block => (
          <Block
            key={block.id}
            block={block}
            onDelete={handleDelete}
            onResize={handleResize}
            onMove={handleMove}
            onImageUpload={handleImageUpload}
          />
        ))}
      </div>
    </div>
  );
}


=== src/components/Builder/ErrorBoundary.tsx ===
import React, { Component, ErrorInfo, ReactNode } from 'react';

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
}

class ErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false
  };

  public static getDerivedStateFromError(_: Error): State {
    return { hasError: true };
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Error Boundary caught an error:', error, errorInfo);
  }

  public render() {
    if (this.state.hasError) {
      return (
        <div className="p-4 bg-red-50 rounded-lg">
          <h2 className="text-red-800 font-medium">Algo salió mal.</h2>
          <button
            className="mt-2 text-red-600 hover:text-red-800"
            onClick={() => this.setState({ hasError: false })}
          >
            Intentar de nuevo
          </button>
        </div>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary; 


=== src/components/Builder/HistoryPanel.tsx ===
import React from 'react';
import { motion } from 'framer-motion';
import { Clock, Undo, Redo } from 'lucide-react';

interface HistoryPanelProps {
  history: any[];
  currentIndex: number;
  onUndo: () => void;
  onRedo: () => void;
  canUndo: boolean;
  canRedo: boolean;
}

export default function HistoryPanel({
  history,
  currentIndex,
  onUndo,
  onRedo,
  canUndo,
  canRedo
}: HistoryPanelProps) {
  return (
    <div className="w-64 bg-white border-l border-gray-200 p-4">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-2">
          <Clock className="w-5 h-5 text-gray-500" />
          <h2 className="font-medium text-gray-900">Historial</h2>
        </div>
        <div className="flex gap-2">
          <button
            onClick={onUndo}
            disabled={!canUndo}
            className={`p-2 rounded-lg ${
              canUndo ? 'hover:bg-gray-100 text-gray-700' : 'text-gray-400 cursor-not-allowed'
            }`}
          >
            <Undo className="w-4 h-4" />
          </button>
          <button
            onClick={onRedo}
            disabled={!canRedo}
            className={`p-2 rounded-lg ${
              canRedo ? 'hover:bg-gray-100 text-gray-700' : 'text-gray-400 cursor-not-allowed'
            }`}
          >
            <Redo className="w-4 h-4" />
          </button>
        </div>
      </div>

      <div className="space-y-2">
        {history.map((entry, index) => (
          <motion.div
            key={entry.timestamp}
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: index * 0.05 }}
            className={`p-2 rounded-lg ${
              index === currentIndex ? 'bg-indigo-50 text-indigo-600' : 'hover:bg-gray-50'
            }`}
          >
            <p className="text-sm font-medium">{entry.description}</p>
            <p className="text-xs text-gray-500">
              {new Date(entry.timestamp).toLocaleTimeString()}
            </p>
          </motion.div>
        ))}
      </div>
    </div>
  );
} 


=== src/components/Builder/LayersPanel.tsx ===
import React, { useState } from 'react';
import { motion, Reorder } from 'framer-motion';
import { Layers, Eye, EyeOff, Lock, Unlock } from 'lucide-react';
import { Block } from '../../types/builder';

interface LayersPanelProps {
  blocks: Block[];
  setBlocks: (blocks: Block[]) => void;
  selectedBlock: string | null;
  setSelectedBlock: (id: string | null) => void;
}

interface Layer extends Block {
  isVisible: boolean;
  isLocked: boolean;
  zIndex: number;
}

export default function LayersPanel({ blocks, setBlocks, selectedBlock, setSelectedBlock }: LayersPanelProps) {
  const [layers, setLayers] = useState<Layer[]>(
    blocks.map((block, index) => ({
      ...block,
      isVisible: true,
      isLocked: false,
      zIndex: blocks.length - index
    }))
  );

  const toggleVisibility = (blockId: string) => {
    setLayers(prev =>
      prev.map(layer =>
        layer.id === blockId
          ? { ...layer, isVisible: !layer.isVisible }
          : layer
      )
    );
  };

  const toggleLock = (blockId: string) => {
    setLayers(prev =>
      prev.map(layer =>
        layer.id === blockId
          ? { ...layer, isLocked: !layer.isLocked }
          : layer
      )
    );
  };

  const handleReorder = (reorderedLayers: Layer[]) => {
    const updatedLayers = reorderedLayers.map((layer, index) => ({
      ...layer,
      zIndex: reorderedLayers.length - index
    }));
    setLayers(updatedLayers);
    setBlocks(updatedLayers);
  };

  return (
    <div className="w-64 bg-white border-l border-gray-200 p-4">
      <div className="flex items-center gap-2 mb-4">
        <Layers className="w-5 h-5 text-gray-500" />
        <h2 className="font-medium text-gray-900">Capas</h2>
      </div>

      <Reorder.Group axis="y" values={layers} onReorder={handleReorder}>
        {layers.map((layer) => (
          <Reorder.Item key={layer.id} value={layer}>
            <motion.div
              className={`p-2 rounded-lg mb-2 cursor-pointer flex items-center justify-between ${
                selectedBlock === layer.id ? 'bg-indigo-50' : 'hover:bg-gray-50'
              }`}
              onClick={() => setSelectedBlock(layer.id)}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              <div className="flex items-center gap-2">
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    toggleVisibility(layer.id);
                  }}
                  className="p-1 rounded-full hover:bg-gray-100"
                >
                  {layer.isVisible ? (
                    <Eye className="w-4 h-4 text-gray-600" />
                  ) : (
                    <EyeOff className="w-4 h-4 text-gray-400" />
                  )}
                </button>
                <span className="text-sm text-gray-700">{layer.type}</span>
              </div>
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  toggleLock(layer.id);
                }}
                className="p-1 rounded-full hover:bg-gray-100"
              >
                {layer.isLocked ? (
                  <Lock className="w-4 h-4 text-gray-600" />
                ) : (
                  <Unlock className="w-4 h-4 text-gray-400" />
                )}
              </button>
            </motion.div>
          </Reorder.Item>
        ))}
      </Reorder.Group>
    </div>
  );
} 


=== src/components/Builder/Preview.tsx ===
import React from 'react';
import { X } from 'lucide-react';
import { Block } from '../../types/builder';
import { renderBlockContent } from '../../utils/blockRenderer';

interface PreviewProps {
  blocks: Block[];
  isOpen: boolean;
  onClose: () => void;
}

export default function Preview({ blocks, isOpen, onClose }: PreviewProps) {
  if (!isOpen) return null;

  return (
    <div
      className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center"
      onClick={onClose}
    >
      <div
        className="bg-gray-100 rounded-lg shadow-2xl p-8 relative max-h-[90vh] overflow-auto"
        onClick={e => e.stopPropagation()}
      >
        {/* Toolbar */}
        <div className="absolute top-4 right-4 flex items-center space-x-2 bg-white rounded-lg shadow-sm p-1">
          <button
            onClick={onClose}
            className="p-2 rounded-lg hover:bg-gray-100 transition-colors"
          >
            <X className="w-5 h-5" />
          </button>
        </div>

        {/* Preview Content */}
        <div 
          className="mt-16 bg-white shadow-xl mx-auto relative"
          style={{
            width: '1123px', // A4 horizontal width at 96 DPI
            height: '794px',  // A4 horizontal height at 96 DPI
            transformOrigin: 'top center',
          }}
        >
          {blocks.map((block) => (
            <div
              key={block.id}
              className="absolute"
              style={{
                left: block.position.x,
                top: block.position.y,
                width: block.size?.width,
                height: block.size?.height,
              }}
            >
              {renderBlockContent({
                block,
                onImageUpload: () => {}, // Vista previa no permite subir imágenes
              })}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
} 


=== src/components/Builder/Rulers.tsx ===
import React from 'react';

interface RulersProps {
  gridSize: number;
}

export default function Rulers({ gridSize }: RulersProps) {
  const rulerSize = 20;

  return (
    <>
      {/* Regla horizontal */}
      <div
        className="absolute top-0 left-[20px] right-0 bg-white border-b border-gray-200"
        style={{ height: rulerSize }}
      >
        {Array.from({ length: 100 }).map((_, i) => (
          <div
            key={`h-${i}`}
            className="absolute border-l border-gray-300"
            style={{
              left: i * gridSize,
              height: i % 5 === 0 ? '100%' : '50%',
              top: i % 5 === 0 ? 0 : '50%',
              borderColor: i % 5 === 0 ? '#9CA3AF' : '#E5E7EB'
            }}
          >
            {i % 5 === 0 && (
              <span
                className="absolute text-[10px] text-gray-500"
                style={{
                  top: '2px',
                  left: '2px',
                  transform: 'translateX(-50%)',
                }}
              >
                {i * gridSize}
              </span>
            )}
          </div>
        ))}
      </div>

      {/* Regla vertical */}
      <div
        className="absolute top-[20px] left-0 bottom-0 bg-white border-r border-gray-200"
        style={{ width: rulerSize }}
      >
        {Array.from({ length: 100 }).map((_, i) => (
          <div
            key={`v-${i}`}
            className="absolute border-t border-gray-300"
            style={{
              top: i * gridSize,
              width: i % 5 === 0 ? '100%' : '50%',
              left: i % 5 === 0 ? 0 : '50%',
              borderColor: i % 5 === 0 ? '#9CA3AF' : '#E5E7EB'
            }}
          >
            {i % 5 === 0 && (
              <span
                className="absolute text-[10px] text-gray-500"
                style={{
                  left: '2px',
                  top: '-7px',
                }}
              >
                {i * gridSize}
              </span>
            )}
          </div>
        ))}
      </div>

      {/* Esquina superior izquierda */}
      <div
        className="absolute top-0 left-0 bg-white border-r border-b border-gray-200"
        style={{ width: rulerSize, height: rulerSize }}
      />
    </>
  );
} 


=== src/components/Builder/TemplateThumbnails.tsx ===
import React from 'react';
import { motion } from 'framer-motion';
import { Block } from '../../types/builder';

interface TemplateThumbnailsProps {
  templates: { id: string; name: string; blocks: Block[]; updatedAt: Date }[];
  onSelect: (template: any) => void;
}

export default function TemplateThumbnails({ templates, onSelect }: TemplateThumbnailsProps) {
  return (
    <div className="grid grid-cols-2 gap-4 p-4">
      {templates.map((template) => (
        <motion.div
          key={template.id}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          className="bg-white rounded-lg shadow-sm overflow-hidden cursor-pointer"
          onClick={() => onSelect(template)}
        >
          <div className="relative aspect-video bg-gray-50">
            {/* Miniatura de la plantilla */}
            <div className="absolute inset-0 p-2">
              {template.blocks.map((block) => (
                <div
                  key={block.id}
                  className="absolute bg-gray-200 rounded"
                  style={{
                    left: `${(block.position.x / 1000) * 100}%`,
                    top: `${(block.position.y / 1000) * 100}%`,
                    width: `${(block.size?.width || 100) / 10}px`,
                    height: `${(block.size?.height || 50) / 10}px`,
                  }}
                />
              ))}
            </div>
          </div>
          <div className="p-3">
            <h3 className="font-medium text-gray-900">{template.name}</h3>
            <p className="text-sm text-gray-500">
              {new Date(template.updatedAt).toLocaleDateString()}
            </p>
          </div>
        </motion.div>
      ))}
    </div>
  );
} 


=== src/components/Builder/ToolPanel.tsx ===
import React from 'react';
import { Layout, Image, Tag, DollarSign, Percent, Gift, Image as ImageIcon } from 'lucide-react';
import { BlockType } from '../../types/builder';

interface ToolPanelProps {
  activeTab: 'elements' | 'product' | 'history';
  setActiveTab: (tab: 'elements' | 'product' | 'history') => void;
  onAddBlock: (type: BlockType) => void;
}

const BLOCKS: { type: BlockType; icon: React.ReactNode; label: string }[] = [
  { type: 'header', icon: <Layout className="w-5 h-5" />, label: 'Header' },
  { type: 'footer', icon: <Layout className="w-5 h-5" />, label: 'Footer' },
  { type: 'sku', icon: <Tag className="w-5 h-5" />, label: 'SKU' },
  { type: 'image', icon: <Image className="w-5 h-5" />, label: 'Imagen' },
  { type: 'price', icon: <DollarSign className="w-5 h-5" />, label: 'Precio' },
  { type: 'discount', icon: <Percent className="w-5 h-5" />, label: 'Descuento' },
  { type: 'promotion', icon: <Gift className="w-5 h-5" />, label: 'Promoción' },
  { type: 'logo', icon: <ImageIcon className="w-5 h-5" />, label: 'Logo' },
];

export default function ToolPanel({ activeTab, setActiveTab, onAddBlock }: ToolPanelProps) {
  return (
    <div className="w-64 bg-white border-l border-gray-200 flex flex-col shadow-lg">
      <div className="space-y-2 p-4 border-b border-gray-200">
        {['elements', 'product', 'history'].map((tab) => (
          <button
            key={tab}
            onClick={() => setActiveTab(tab as any)}
            className={`w-full px-4 py-2 text-left rounded-lg transition-colors
                       ${activeTab === tab 
                         ? 'bg-indigo-50 text-indigo-600 shadow-sm' 
                         : 'text-gray-600 hover:bg-gray-50'}`}
          >
            {tab.charAt(0).toUpperCase() + tab.slice(1)}
          </button>
        ))}
      </div>

      {activeTab === 'elements' && (
        <div className="p-4 grid grid-cols-2 gap-2">
          {BLOCKS.map((block) => (
            <button
              key={block.type}
              onClick={() => onAddBlock(block.type)}
              className="flex flex-col items-center p-3 bg-white rounded-lg border border-gray-200 
                       hover:border-indigo-500 hover:shadow-lg transition-colors"
            >
              <div className="p-2 bg-indigo-100 rounded-lg">
                {block.icon}
              </div>
              <span className="mt-2 text-sm font-medium text-gray-600">{block.label}</span>
            </button>
          ))}
        </div>
      )}
    </div>
  );
}


=== src/components/Builder/Toolbar.tsx ===
import React from 'react';
import { Copy, Save, Eye, Download } from 'lucide-react';
import { motion } from 'framer-motion';

interface ToolbarProps {
  onSave?: () => void;
  onPreview?: () => void;
  templateId?: string;
}

export default function Toolbar({ onSave, onPreview, templateId = generateTemplateId() }: ToolbarProps) {
  const handleCopyId = () => {
    navigator.clipboard.writeText(templateId);
  };

  return (
    <div className="flex items-center justify-between h-16 px-4">
      <div className="flex items-center space-x-2">
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={onSave}
          className="flex items-center gap-2 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700"
        >
          <Save className="w-4 h-4" />
          <span>Guardar</span>
        </motion.button>

        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={onPreview}
          className="flex items-center gap-2 px-4 py-2 bg-white text-gray-700 rounded-lg hover:bg-gray-50 border border-gray-200"
        >
          <Eye className="w-4 h-4" />
          <span>Vista previa</span>
        </motion.button>

        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          className="flex items-center gap-2 px-4 py-2 bg-white text-gray-700 rounded-lg hover:bg-gray-50 border border-gray-200"
        >
          <Download className="w-4 h-4" />
          <span>Exportar</span>
        </motion.button>
      </div>

      <div className="flex items-center space-x-2">
        <div className="flex items-center space-x-2 px-3 py-1.5 bg-gray-50 rounded-lg border border-gray-200">
          <span className="text-sm text-gray-500">ID:</span>
          <span className="font-mono text-sm text-gray-700">{templateId}</span>
          <motion.button
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.9 }}
            onClick={handleCopyId}
            className="p-1 hover:bg-gray-200 rounded-full transition-colors"
            title="Copiar ID"
          >
            <Copy className="w-4 h-4 text-gray-500" />
          </motion.button>
        </div>
      </div>
    </div>
  );
}

function generateTemplateId(): string {
  const timestamp = Date.now().toString(36);
  const randomStr = Math.random().toString(36).substring(2, 8);
  return `TPL-${timestamp}-${randomStr}`.toUpperCase();
}


=== src/components/Builder/ZoomControls.tsx ===
import React from 'react';
import { ZoomIn, ZoomOut } from 'lucide-react';
import { motion } from 'framer-motion';

interface ZoomControlsProps {
  scale: number;
  onZoomIn: () => void;
  onZoomOut: () => void;
}

export const ZoomControls = React.memo(function ZoomControls({ 
  scale, 
  onZoomIn, 
  onZoomOut 
}: ZoomControlsProps) {
  return (
    <div className="absolute top-4 right-4 flex gap-2 bg-white rounded-lg shadow-md p-1 z-50">
      <motion.button
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
        onClick={onZoomIn}
        className="p-2 hover:bg-gray-100 rounded-lg"
      >
        <ZoomIn className="w-5 h-5 text-gray-600" />
      </motion.button>
      <motion.button
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
        onClick={onZoomOut}
        className="p-2 hover:bg-gray-100 rounded-lg"
      >
        <ZoomOut className="w-5 h-5 text-gray-600" />
      </motion.button>
      <div className="flex items-center px-2 text-sm text-gray-500 border-l border-gray-200">
        {Math.round(scale * 100)}%
      </div>
    </div>
  );
}); 


=== src/components/Dashboard/WelcomeModal.tsx ===
import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, FileText, Package2, Tags, Star, Clock } from 'lucide-react';

interface WelcomeModalProps {
  isOpen: boolean;
  onClose: () => void;
  stats: {
    totalProducts: number;
    totalPromotions: number;
    totalTemplates: number;
  };
}

interface FrequentTemplate {
  id: string;
  name: string;
  thumbnail: string;
  lastUsed: string;
  usageCount: number;
}

const frequentTemplates: FrequentTemplate[] = [
  {
    id: '1',
    name: 'Oferta 2x1',
    thumbnail: '/templates/2x1.jpg',
    lastUsed: '2024-01-15',
    usageCount: 45
  },
  {
    id: '2',
    name: 'Descuento Bancario',
    thumbnail: '/templates/bank.jpg',
    lastUsed: '2024-01-14',
    usageCount: 38
  },
  {
    id: '3',
    name: 'Promoción Especial',
    thumbnail: '/templates/special.jpg',
    lastUsed: '2024-01-13',
    usageCount: 32
  }
];

export const WelcomeModal: React.FC<WelcomeModalProps> = ({ isOpen, onClose, stats }) => {
  return (
    <AnimatePresence>
      {isOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={onClose}
            className="absolute inset-0 bg-black/60 backdrop-blur-sm"
          />
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
            className="relative bg-slate-900 rounded-2xl shadow-xl w-full max-w-4xl 
                     border border-white/10 overflow-hidden"
            onClick={e => e.stopPropagation()}
          >
            {/* Header */}
            <div className="p-6 border-b border-white/10">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold text-white">¡Bienvenido a Speed+!</h2>
                <button
                  onClick={onClose}
                  className="text-white/60 hover:text-white transition-colors"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>
            </div>

            {/* Content */}
            <div className="p-6 space-y-8">
              {/* Stats */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.1 }}
                  className="bg-white/5 rounded-xl p-4 border border-white/10"
                >
                  <div className="flex items-center gap-3 mb-2">
                    <Package2 className="w-5 h-5 text-sky-400" />
                    <h3 className="text-white/90 font-medium">Productos</h3>
                  </div>
                  <p className="text-2xl font-bold text-white">{stats.totalProducts}</p>
                </motion.div>

                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.2 }}
                  className="bg-white/5 rounded-xl p-4 border border-white/10"
                >
                  <div className="flex items-center gap-3 mb-2">
                    <Tags className="w-5 h-5 text-rose-400" />
                    <h3 className="text-white/90 font-medium">Promociones</h3>
                  </div>
                  <p className="text-2xl font-bold text-white">{stats.totalPromotions}</p>
                </motion.div>

                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.3 }}
                  className="bg-white/5 rounded-xl p-4 border border-white/10"
                >
                  <div className="flex items-center gap-3 mb-2">
                    <FileText className="w-5 h-5 text-emerald-400" />
                    <h3 className="text-white/90 font-medium">Templates</h3>
                  </div>
                  <p className="text-2xl font-bold text-white">{stats.totalTemplates}</p>
                </motion.div>
              </div>

              {/* Frequent Templates */}
              <div>
                <h3 className="text-lg font-medium text-white mb-4">Plantillas más utilizadas</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {frequentTemplates.map((template, index) => (
                    <motion.div
                      key={template.id}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: 0.4 + index * 0.1 }}
                      className="bg-white/5 rounded-xl overflow-hidden border border-white/10"
                    >
                      <div className="aspect-video bg-slate-800 relative">
                        <img
                          src={template.thumbnail}
                          alt={template.name}
                          className="w-full h-full object-cover"
                        />
                      </div>
                      <div className="p-4">
                        <h4 className="font-medium text-white mb-2">{template.name}</h4>
                        <div className="flex justify-between text-sm text-white/60">
                          <div className="flex items-center gap-1">
                            <Star className="w-4 h-4" />
                            <span>{template.usageCount} usos</span>
                          </div>
                          <div className="flex items-center gap-1">
                            <Clock className="w-4 h-4" />
                            <span>Hace {getDaysAgo(template.lastUsed)} días</span>
                          </div>
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>
            </div>

            {/* Footer */}
            <div className="p-6 border-t border-white/10 flex justify-end">
              <button
                onClick={onClose}
                className="px-4 py-2 bg-white/10 hover:bg-white/20 text-white rounded-lg 
                         transition-colors"
              >
                Comenzar
              </button>
            </div>
          </motion.div>
        </div>
      )}
    </AnimatePresence>
  );
};

function getDaysAgo(date: string): number {
  const diff = new Date().getTime() - new Date(date).getTime();
  return Math.floor(diff / (1000 * 60 * 60 * 24));
} 


=== src/components/Dashboard.tsx ===
import React, { useState } from 'react';
import { ArrowLeft, LogOut, Plus, Package2, Tags, Star, Clock, FileText, Sun, Moon, LayoutTemplate, Settings, Send, FileEdit, Printer, X } from 'lucide-react';
import { motion } from 'framer-motion';
import { Header } from './shared/Header';
import { COMPANIES } from '../data/companies';

interface DashboardProps {
  onLogout: () => void;
  onNewTemplate: () => void;
  onNewPoster: () => void;
  onProducts: () => void;
  onPromotions: () => void;
  onBack: () => void;
  userEmail?: string;
  onSettings: () => void;
}

interface PlantillaReciente {
  id: string;
  nombre: string;
  tipo: 'envio' | 'edicion' | 'impresion';
  tiempoAtras: string;
  sucursal?: string;
  cantidad?: number;
  estado: 'impreso' | 'no_impreso';
  empresa: {
    nombre: string;
    logo: string;
  };
}

interface DashboardStats {
  products: {
    total: number;
    active: number;
    lastWeek: number;
  };
  promotions: {
    total: number;
    active: number;
    expiringSoon: number;
  };
  templates: {
    total: number;
    recentlyUsed: number;
    mostUsed: string;
  };
}

const easyLogo = COMPANIES.find(c => c.id === 'easy-mdh')?.logo;

// Constantes para los logos
const LOGOS = {
  easy: easyLogo || 'https://upload.wikimedia.org/wikipedia/commons/8/89/Easy_logo.png',
  jumbo: 'https://upload.wikimedia.org/wikipedia/commons/d/d3/Logo_Jumbo_Cencosud.png',
  disco: 'https://upload.wikimedia.org/wikipedia/commons/thumb/0/07/Disco-Supermarket-Logo.svg/2048px-Disco-Supermarket-Logo.svg.png',
  vea: 'https://upload.wikimedia.org/wikipedia/commons/9/94/Logo-VEA-Supermercados.png'
};

const plantillasRecientes: PlantillaReciente[] = [
  // Easy
  {
    id: '1',
    nombre: 'Carteles Coca Cola',
    tipo: 'envio',
    tiempoAtras: 'hace 2h',
    sucursal: 'Easy San Martín',
    cantidad: 5,
    estado: 'no_impreso',
    empresa: {
      nombre: 'Easy',
      logo: LOGOS.easy
    }
  },
  // Jumbo
  {
    id: '2',
    nombre: 'Carteles Ofertas Semanales',
    tipo: 'envio',
    tiempoAtras: 'hace 3h',
    sucursal: 'Jumbo Quilmes',
    cantidad: 10,
    estado: 'impreso',
    empresa: {
      nombre: 'Jumbo',
      logo: LOGOS.jumbo
    }
  },
  // Disco
  {
    id: '3',
    nombre: 'Carteles Black Friday',
    tipo: 'edicion',
    tiempoAtras: 'hace 4h',
    sucursal: 'Disco Belgrano',
    cantidad: 8,
    estado: 'no_impreso',
    empresa: {
      nombre: 'Disco',
      logo: LOGOS.disco
    }
  },
  // Vea
  {
    id: '4',
    nombre: 'Carteles Navidad',
    tipo: 'impresion',
    tiempoAtras: 'hace 5h',
    sucursal: 'Vea Caballito',
    cantidad: 12,
    estado: 'impreso',
    empresa: {
      nombre: 'Vea',
      logo: LOGOS.vea
    }
  },
  // Easy
  {
    id: '5',
    nombre: 'Carteles Electrodomésticos',
    tipo: 'envio',
    tiempoAtras: 'hace 6h',
    sucursal: 'Easy San Justo',
    cantidad: 20,
    estado: 'no_impreso',
    empresa: {
      nombre: 'Easy',
      logo: LOGOS.easy
    }
  },
  // Jumbo
  {
    id: '6',
    nombre: 'Carteles Bebidas',
    tipo: 'edicion',
    tiempoAtras: 'hace 8h',
    sucursal: 'Jumbo Palermo',
    cantidad: 15,
    estado: 'impreso',
    empresa: {
      nombre: 'Jumbo',
      logo: LOGOS.jumbo
    }
  },
  // ... continuar hasta 20 actividades con diferentes empresas y sucursales
  {
    id: '7',
    nombre: 'Carteles Tecnología',
    tipo: 'envio',
    tiempoAtras: 'hace 10h',
    sucursal: 'Disco Núñez',
    cantidad: 6,
    estado: 'no_impreso',
    empresa: {
      nombre: 'Disco',
      logo: LOGOS.disco
    }
  },
  {
    id: '8',
    nombre: 'Carteles Ofertas Verano',
    tipo: 'impresion',
    tiempoAtras: 'hace 12h',
    sucursal: 'Vea Flores',
    cantidad: 15,
    estado: 'impreso',
    empresa: {
      nombre: 'Vea',
      logo: LOGOS.vea
    }
  },
  {
    id: '9',
    nombre: 'Carteles Productos Frescos',
    tipo: 'edicion',
    tiempoAtras: 'hace 14h',
    sucursal: 'Jumbo Pilar',
    cantidad: 18,
    estado: 'no_impreso',
    empresa: {
      nombre: 'Jumbo',
      logo: LOGOS.jumbo
    }
  },
  {
    id: '10',
    nombre: 'Carteles Jardín',
    tipo: 'envio',
    tiempoAtras: 'hace 16h',
    sucursal: 'Easy Córdoba',
    cantidad: 25,
    estado: 'no_impreso',
    empresa: {
      nombre: 'Easy',
      logo: LOGOS.easy
    }
  },
  {
    id: '11',
    nombre: 'Carteles Lácteos',
    tipo: 'impresion',
    tiempoAtras: 'hace 18h',
    sucursal: 'Disco Rosario',
    cantidad: 10,
    estado: 'no_impreso',
    empresa: {
      nombre: 'Disco',
      logo: LOGOS.disco
    }
  },
  {
    id: '12',
    nombre: 'Carteles Ofertas Fin de Mes',
    tipo: 'edicion',
    tiempoAtras: 'hace 20h',
    sucursal: 'Vea Mendoza',
    cantidad: 22,
    estado: 'no_impreso',
    empresa: {
      nombre: 'Vea',
      logo: LOGOS.vea
    }
  },
  {
    id: '13',
    nombre: 'Carteles Herramientas',
    tipo: 'envio',
    tiempoAtras: 'hace 22h',
    sucursal: 'Easy Tucumán',
    cantidad: 14,
    estado: 'no_impreso',
    empresa: {
      nombre: 'Easy',
      logo: LOGOS.easy
    }
  },
  {
    id: '14',
    nombre: 'Carteles Pescadería',
    tipo: 'impresion',
    tiempoAtras: 'hace 1d',
    sucursal: 'Jumbo Neuquén',
    cantidad: 8,
    estado: 'no_impreso',
    empresa: {
      nombre: 'Jumbo',
      logo: LOGOS.jumbo
    }
  },
  {
    id: '15',
    nombre: 'Carteles Panadería',
    tipo: 'edicion',
    tiempoAtras: 'hace 1d',
    sucursal: 'Disco Mar del Plata',
    cantidad: 12,
    estado: 'impreso',
    empresa: {
      nombre: 'Disco',
      logo: LOGOS.disco
    }
  },
  {
    id: '16',
    nombre: 'Carteles Limpieza',
    tipo: 'envio',
    tiempoAtras: 'hace 1d',
    sucursal: 'Vea San Juan',
    cantidad: 16,
    estado: 'no_impreso',
    empresa: {
      nombre: 'Vea',
      logo: LOGOS.vea
    }
  },
  {
    id: '17',
    nombre: 'Carteles Decoración',
    tipo: 'impresion',
    tiempoAtras: 'hace 2d',
    sucursal: 'Easy Salta',
    cantidad: 20,
    estado: 'no_impreso',
    empresa: {
      nombre: 'Easy',
      logo: LOGOS.easy
    }
  },
  {
    id: '18',
    nombre: 'Carteles Carnicería',
    tipo: 'edicion',
    tiempoAtras: 'hace 2d',
    sucursal: 'Jumbo La Plata',
    cantidad: 9,
    estado: 'no_impreso',
    empresa: {
      nombre: 'Jumbo',
      logo: LOGOS.jumbo
    }
  },
  {
    id: '19',
    nombre: 'Carteles Perfumería',
    tipo: 'envio',
    tiempoAtras: 'hace 2d',
    sucursal: 'Disco Bahía Blanca',
    cantidad: 11,
    estado: 'no_impreso',
    empresa: {
      nombre: 'Disco',
      logo: LOGOS.disco
    }
  },
  {
    id: '20',
    nombre: 'Carteles Bebidas',
    tipo: 'impresion',
    tiempoAtras: 'hace 2d',
    sucursal: 'Vea Santa Fe',
    cantidad: 13,
    estado: 'impreso',
    empresa: {
      nombre: 'Vea',
      logo: LOGOS.vea
    }
  }
];

const getIconByType = (tipo: PlantillaReciente['tipo']) => {
  switch (tipo) {
    case 'envio':
      return <Send className="w-4 h-4 text-white" />;
    case 'edicion':
      return <FileEdit className="w-4 h-4 text-white" />;
    case 'impresion':
      return <Printer className="w-4 h-4 text-white" />;
    default:
      return <FileText className="w-4 h-4 text-white" />;
  }
};

const getTextByType = (template: PlantillaReciente) => {
  switch (template.tipo) {
    case 'envio':
      return `${template.cantidad} carteles enviados a ${template.sucursal}`;
    case 'edicion':
      return `Editados para ${template.sucursal}`;
    case 'impresion':
      return `${template.cantidad} carteles impresos para ${template.sucursal}`;
    default:
      return template.nombre;
  }
};

export default function Dashboard({ onLogout, onNewTemplate, onNewPoster, onProducts, onPromotions, onBack, userEmail, onSettings }: DashboardProps) {
  // Datos de ejemplo
  const stats: DashboardStats = {
    products: {
      total: 1234,
      active: 856,
      lastWeek: 45
    },
    promotions: {
      total: 68,
      active: 24,
      expiringSoon: 5
    },
    templates: {
      total: 12,
      recentlyUsed: 3,
      mostUsed: 'Promoción Bancaria'
    }
  };

  const [selectedActivity, setSelectedActivity] = useState<PlantillaReciente | null>(null);

  return (
    <div className="min-h-screen flex flex-col bg-white">
      <div className="absolute inset-0 bg-gradient-to-br from-indigo-500/5 via-purple-500/5 to-pink-500/5
        animate-gradient-xy pointer-events-none" />
      
      <Header onBack={onBack} onLogout={onLogout} onSettings={onSettings} />
      
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="max-w-7xl mx-auto px-4 py-12"
      >
        {/* Welcome Section */}
        <motion.div
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ delay: 0.2 }}
          className="mb-8 flex items-center gap-3"
        >
          <h2 className="text-3xl font-medium text-slate-900">
            Bienvenido de nuevo, <span className="text-violet-400">{userEmail?.split('@')[0]}</span>
          </h2>
          <motion.span
            animate={{
              rotate: [0, 14, -8, 14, -4, 10, 0],
              transformOrigin: "bottom right"
            }}
            transition={{
              duration: 2,
              ease: "easeInOut",
              repeat: Infinity,
              repeatDelay: 1
            }}
            className="text-3xl"
          >
            👋
          </motion.span>
          <p className="text-slate-500">
            Aquí está lo que sucede con tus plantillas.
          </p>
        </motion.div>

        {/* Action Buttons Section */}
        <div className="flex justify-center gap-12 mb-12 py-12">
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{
              type: "spring",
              stiffness: 260,
              damping: 20,
              delay: 0.1
            }}
            onClick={onProducts}
            className={`group flex flex-col items-center w-56 px-8 py-8 rounded-3xl
              bg-gradient-to-br from-white to-gray-50 border-gray-100 shadow-[0_0_20px_rgba(0,0,0,0.1)]
              transition-all duration-300`}
          >
            <div className="mb-4 p-4 rounded-2xl bg-gradient-to-br from-blue-500 to-blue-600
              transform group-hover:scale-110 group-hover:rotate-6 transition-all duration-300">
              <Package2 className="w-10 h-10 text-white" />
            </div>
            <span className={`text-xl font-semibold bg-gradient-to-r from-gray-800 to-gray-600 bg-clip-text text-transparent`}>
              Productos
            </span>
          </motion.button>

          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{
              type: "spring",
              stiffness: 260,
              damping: 20,
              delay: 0.2
            }}
            onClick={onPromotions}
            className={`group flex flex-col items-center w-56 px-8 py-8 rounded-3xl
              bg-gradient-to-br from-white to-gray-50 border-gray-100 shadow-[0_0_20px_rgba(0,0,0,0.1)]
              transition-all duration-300`}
          >
            <div className="mb-4 p-4 rounded-2xl bg-gradient-to-br from-purple-500 to-purple-600
              transform group-hover:scale-110 group-hover:rotate-6 transition-all duration-300">
              <Tags className="w-10 h-10 text-white" />
            </div>
            <span className={`text-xl font-semibold bg-gradient-to-r from-gray-800 to-gray-600 bg-clip-text text-transparent`}>
              Promociones
            </span>
          </motion.button>

          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{
              type: "spring",
              stiffness: 260,
              damping: 20,
              delay: 0.3
            }}
            onClick={onNewPoster}
            className="group flex flex-col items-center w-56 px-8 py-8 rounded-3xl
              bg-gradient-to-br from-violet-500 to-violet-600 text-white
              border border-violet-400 shadow-[0_0_30px_rgba(139,92,246,0.3)]
              hover:shadow-[0_0_35px_rgba(139,92,246,0.4)] transition-all duration-300"
          >
            <div className="mb-4 p-4 rounded-2xl bg-white/20
              transform group-hover:scale-110 group-hover:rotate-6 transition-all duration-300
              backdrop-blur-lg">
              <FileText className="w-10 h-10 text-white" />
            </div>
            <span className="text-xl font-semibold">
              Cartel
            </span>
          </motion.button>

          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{
              type: "spring",
              stiffness: 260,
              damping: 20,
              delay: 0.4
            }}
            onClick={onNewTemplate}
            className={`group flex flex-col items-center w-56 px-8 py-8 rounded-3xl
              bg-gradient-to-br from-white to-gray-50 border-gray-100 shadow-[0_0_20px_rgba(0,0,0,0.1)]
              transition-all duration-300`}
          >
            <div className="mb-4 p-4 rounded-2xl bg-gradient-to-br from-emerald-500 to-emerald-600
              transform group-hover:scale-110 group-hover:rotate-6 transition-all duration-300">
              <LayoutTemplate className="w-10 h-10 text-white" />
            </div>
            <span className={`text-xl font-semibold bg-gradient-to-r from-gray-800 to-gray-600 bg-clip-text text-transparent`}>
              Builder
            </span>
          </motion.button>

          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{
              type: "spring",
              stiffness: 260,
              damping: 20,
              delay: 0.5
            }}
            onClick={onSettings}
            className={`group flex flex-col items-center w-56 px-8 py-8 rounded-3xl
              bg-gradient-to-br from-white to-gray-50 border-gray-100 shadow-[0_0_20px_rgba(0,0,0,0.1)]
              transition-all duration-300`}
          >
            <div className="mb-4 p-4 rounded-2xl bg-gradient-to-br from-yellow-500 to-yellow-600
              transform group-hover:scale-110 group-hover:rotate-6 transition-all duration-300">
              <Settings className="w-10 h-10 text-white" />
            </div>
            <span className={`text-xl font-semibold bg-gradient-to-r from-gray-800 to-gray-600 bg-clip-text text-transparent`}>
              Configuración
            </span>
          </motion.button>
        </div>

        {/* Stats Grid */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4 }}
          className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-12"
        >
          {/* Productos Stats */}
          <motion.div
            whileHover={{ scale: 1.02 }}
            className="rounded-xl p-6 transition-all duration-300
              bg-white border-gray-200 shadow-lg hover:shadow-xl border"
          >
            <div className="flex items-center gap-4 mb-6">
              <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-sky-500 to-blue-500 
                            flex items-center justify-center shadow-lg shadow-sky-500/20">
                <Package2 className="w-6 h-6 text-white" />
              </div>
              <div>
                <h3 className="text-lg font-medium text-slate-900">
                  Productos
                </h3>
                <p className="text-slate-500">
                  Vista general
                </p>
              </div>
            </div>
            <div className="space-y-4">
              <div>
                <div className="flex justify-between items-center mb-1">
                  <span className="text-slate-500">Total</span>
                  <span className="text-2xl font-semibold text-slate-900">
                    {stats.products.total}
                  </span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-slate-500">Activos</span>
                  <span className="text-slate-900">
                    {stats.products.active}
                  </span>
                </div>
              </div>
              <div className="text-sm text-slate-500">
                <span className="text-emerald-400">+{stats.products.lastWeek}</span> nuevos esta semana
              </div>
            </div>
          </motion.div>

          {/* Promociones Stats */}
          <motion.div
            whileHover={{ scale: 1.02 }}
            className={`rounded-xl p-6 transition-colors border
              bg-white border-slate-200 shadow-lg`}
          >
            <div className="flex items-center gap-4 mb-6">
              <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-rose-500 to-pink-500 
                            flex items-center justify-center shadow-lg shadow-rose-500/20">
                <Tags className="w-6 h-6 text-white" />
              </div>
              <div>
                <h3 className={`text-lg font-medium text-slate-900`}>
                  Promociones
                </h3>
                <p className={`text-slate-500`}>
                  Vista general
                </p>
              </div>
            </div>
            <div className="space-y-4">
              <div>
                <div className="flex justify-between items-center mb-1">
                  <span className={`text-slate-500`}>Total</span>
                  <span className={`text-2xl font-semibold text-slate-900`}>
                    {stats.promotions.total}
                  </span>
                </div>
                <div className="flex justify-between items-center">
                  <span className={`text-slate-500`}>Activas</span>
                  <span className="text-slate-900">
                    {stats.promotions.active}
                  </span>
                </div>
              </div>
              <div className={`text-sm text-slate-500`}>
                <span className="text-amber-400">{stats.promotions.expiringSoon}</span> por vencer pronto
              </div>
            </div>
          </motion.div>

          {/* Templates Stats */}
          <motion.div
            whileHover={{ scale: 1.02 }}
            className={`rounded-xl p-6 transition-colors border
              bg-white border-slate-200 shadow-lg`}
          >
            <div className="flex items-center gap-4 mb-6">
              <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-violet-500 to-purple-500 
                            flex items-center justify-center shadow-lg shadow-violet-500/20">
                <FileText className="w-6 h-6 text-white" />
              </div>
              <div>
                <h3 className={`text-lg font-medium text-slate-900`}>
                  Templates
                </h3>
                <p className={`text-slate-500`}>
                  Vista general
                </p>
              </div>
            </div>
            <div className="space-y-4">
              <div>
                <div className="flex justify-between items-center mb-1">
                  <span className={`text-slate-500`}>Total</span>
                  <span className={`text-2xl font-semibold text-slate-900`}>
                    {stats.templates.total}
                  </span>
                </div>
                <div className="flex justify-between items-center">
                  <span className={`text-slate-500`}>Recientes</span>
                  <span className="text-slate-900">
                    {stats.templates.recentlyUsed}
                  </span>
                </div>
              </div>
              <div className={`text-sm text-slate-500`}>
                Más usado: <span className="text-slate-900">{stats.templates.mostUsed}</span>
              </div>
            </div>
          </motion.div>
        </motion.div>

        {/* Recent Activity */}
        <div className="mt-12">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.6 }}
            className="rounded-xl border overflow-hidden backdrop-blur-sm
              bg-white/50 border-gray-200 dark:border-slate-700"
          >
            <div className="flex flex-col items-center mb-8">
              <div className="flex items-center gap-3 mb-2">
                <Clock className="w-5 h-5 text-indigo-500" />
                <h3 className="text-xl font-semibold bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 
                               bg-clip-text text-transparent">
                  Actividad Reciente
                </h3>
              </div>
              <p className="text-sm text-gray-500">
                Seguimiento de las últimas actualizaciones y cambios
              </p>
              <div className="mt-4">
                <button className="text-sm text-indigo-500 hover:text-indigo-600 font-medium 
                                  transition-colors duration-200 flex items-center gap-2">
                  Ver historial completo
                  <ArrowLeft className="w-4 h-4 rotate-180" />
                </button>
              </div>
            </div>
            <div className={`rounded-xl border overflow-hidden
              bg-white border-gray-200`}>
              {plantillasRecientes.map((template, index) => (
                <motion.div 
                  key={template.id}
                  initial={{ opacity: 0.9, x: 0 }}
                  whileHover={{ 
                    backgroundColor: 'rgba(99, 102, 241, 0.1)',
                    scale: 1.01,
                    x: 4,
                    transition: {
                      type: "spring",
                      stiffness: 300,
                      damping: 20
                    }
                  }}
                  whileTap={{ scale: 0.98 }}
                  onClick={() => setSelectedActivity(template)}
                  className={`flex items-center justify-between p-4 transition-all duration-200 cursor-pointer
                            ${index !== plantillasRecientes.length - 1 ? 'border-b border-indigo-500/10' : ''}
                            hover:shadow-lg hover:shadow-indigo-500/10`}
                >
                  <div className="flex items-center gap-4">
                    <motion.div 
                      whileHover={{ rotate: [0, -10, 10, -10, 0] }}
                      transition={{ duration: 0.5 }}
                      className="w-8 h-8 rounded-lg bg-gradient-to-br from-indigo-500 to-purple-500 
                                flex items-center justify-center shadow-lg shadow-indigo-500/20"
                    >
                      {getIconByType(template.tipo)}
                    </motion.div>
                    <img 
                      src={template.empresa.logo}
                      alt={template.empresa.nombre}
                      className="w-6 h-6 object-contain"
                    />
                    <div>
                      <p className="font-medium text-indigo-300">{template.nombre}</p>
                      <p className="text-sm text-indigo-300/40">{getTextByType(template)}</p>
                    </div>
                  </div>
                  <motion.div 
                    className={`px-2 py-1 rounded-full text-xs ${
                      template.estado === 'impreso' 
                        ? 'bg-green-100 text-green-800 border border-green-200' 
                        : 'bg-yellow-100 text-yellow-800 border border-yellow-200'
                    }`}
                  >
                    {template.estado === 'impreso' ? (
                      <div className="flex items-center gap-1">
                        <span>✓</span>
                        <span>Impreso</span>
                      </div>
                    ) : (
                      <div className="flex items-center gap-1">
                        <span>No impreso</span>
                      </div>
                    )}
                  </motion.div>
                </motion.div>
              ))}
            </div>
          </motion.div>
        </div>

        {selectedActivity && (
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={() => setSelectedActivity(null)}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 backdrop-blur-sm"
          >
            <motion.div 
              initial={{ opacity: 0, scale: 0.5, y: 100 }}
              animate={{ 
                opacity: 1, 
                scale: 1, 
                y: 0,
                transition: {
                  type: "spring",
                  duration: 0.5,
                  bounce: 0.3
                }
              }}
              exit={{ 
                opacity: 0, 
                scale: 0.8, 
                y: -100,
                transition: { duration: 0.2 }
              }}
              onClick={e => e.stopPropagation()}
              className="bg-white rounded-xl p-6 max-w-lg w-full mx-4 relative
                        shadow-2xl shadow-indigo-500/20"
            >
              <motion.button 
                whileHover={{ rotate: 90 }}
                transition={{ duration: 0.2 }}
                onClick={() => setSelectedActivity(null)}
                className="absolute top-4 right-4 text-gray-400 hover:text-gray-600"
              >
                <X className="w-5 h-5" />
              </motion.button>

              <motion.div 
                initial={{ x: -20, opacity: 0 }}
                animate={{ x: 0, opacity: 1 }}
                transition={{ delay: 0.1 }}
                className="flex items-center gap-4 mb-6"
              >
                <motion.div 
                  whileHover={{ rotate: [0, -10, 10, -10, 0] }}
                  className="w-10 h-10 rounded-lg bg-gradient-to-br from-indigo-500 to-purple-500 
                            flex items-center justify-center shadow-lg shadow-indigo-500/20"
                >
                  {getIconByType(selectedActivity.tipo)}
                </motion.div>
                <div>
                  <h3 className="text-xl font-medium text-gray-900">{selectedActivity.nombre}</h3>
                  <p className="text-sm text-gray-500">{selectedActivity.sucursal}</p>
                </div>
              </motion.div>

              <motion.div 
                initial={{ y: 20, opacity: 0 }}
                animate={{ y: 0, opacity: 1 }}
                transition={{ delay: 0.2 }}
                className="space-y-4"
              >
                <div className="flex justify-between items-center">
                  <span className="text-gray-500">Empresa</span>
                  <div className="flex items-center gap-2">
                    <img 
                      src={selectedActivity.empresa.logo}
                      alt={selectedActivity.empresa.nombre}
                      className="w-6 h-6 object-contain"
                    />
                    <span className="text-gray-900">{selectedActivity.empresa.nombre}</span>
                  </div>
                </div>

                <div className="flex justify-between items-center">
                  <span className="text-gray-500">Cantidad</span>
                  <span className="text-gray-900">{selectedActivity.cantidad} carteles</span>
                </div>

                <div className="flex justify-between items-center">
                  <span className="text-gray-500">Tiempo</span>
                  <span className="text-gray-900">{selectedActivity.tiempoAtras}</span>
                </div>

                <div className="flex justify-between items-center">
                  <span className="text-gray-500">Estado</span>
                  <motion.div 
                    className={`px-2 py-1 rounded-full text-xs ${
                      selectedActivity.estado === 'impreso' 
                        ? 'bg-green-100 text-green-800 border border-green-200' 
                        : 'bg-yellow-100 text-yellow-800 border border-yellow-200'
                    }`}
                  >
                    {selectedActivity.estado === 'impreso' ? (
                      <div className="flex items-center gap-1">
                        <span>✓</span>
                        <span>Impreso</span>
                      </div>
                    ) : (
                      <div className="flex items-center gap-1">
                        <span>No impreso</span>
                      </div>
                    )}
                  </motion.div>
                </div>
              </motion.div>
            </motion.div>
          </motion.div>
        )}
      </motion.div>
    </div>
  );
}


=== src/components/DashboardStats.tsx ===
import React from 'react';
import { BarChart3, FileText, Printer, Star } from 'lucide-react';

const stats = [
  { name: 'Active Templates', value: '60+', icon: FileText, color: 'bg-blue-500' },
  { name: 'Monthly Prints', value: '2,345', icon: Printer, color: 'bg-green-500' },
  { name: 'Most Used', value: 'Promo', icon: Star, color: 'bg-yellow-500' },
  { name: 'Usage Stats', value: '+24%', icon: BarChart3, color: 'bg-purple-500' },
];

export default function DashboardStats() {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
      {stats.map((stat) => {
        const Icon = stat.icon;
        return (
          <div key={stat.name} className="bg-white rounded-xl shadow-sm p-6">
            <div className="flex items-center">
              <div className={`${stat.color} p-3 rounded-lg`}>
                <Icon className="h-6 w-6 text-white" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">{stat.name}</p>
                <p className="text-2xl font-semibold text-gray-900">{stat.value}</p>
              </div>
            </div>
          </div>
        );
      })}
    </div>
  );
}


=== src/components/LoadingModal.tsx ===
import React from 'react';

interface LoadingModalProps {
  isOpen: boolean;
}

export const LoadingModal: React.FC<LoadingModalProps> = ({ isOpen }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-[100]">
      <div className="bg-white/10 backdrop-blur-lg border border-white/20 rounded-lg p-6 w-96 space-y-4">
        <div className="flex flex-col items-center space-y-4">
          <div className="animate-spin rounded-full h-12 w-12 border-4 border-white/20 border-t-violet-500"></div>
          <div className="text-white space-y-2 text-center">
            <p>Obteniendo promociones desde:</p>
            <p className="font-semibold text-violet-400">Digital Promotion</p>
            <p className="mt-4">Obteniendo Productos desde:</p>
            <div className="flex justify-center">
              <img 
                src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/59/SAP_2011_logo.svg/2560px-SAP_2011_logo.svg.png"
                alt="SAP Logo"
                className="h-8 mt-2"
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}; 


=== src/components/Navigation/Navigation.tsx ===
import React from 'react';
import { Link } from 'react-router-dom';

interface NavLinkProps {
  isActive: boolean;
  children: React.ReactNode;
  to: string;
}

const NavLink: React.FC<NavLinkProps> = ({ isActive, children, to }) => {
  return (
    <Link
      to={to}
      className={`flex items-center gap-2 px-3 py-2 rounded-lg transition-colors
                 ${isActive 
                   ? 'bg-white/10 text-white' 
                   : 'text-white/60 hover:text-white hover:bg-white/5'}`}
    >
      {children}
    </Link>
  );
};

export const Navigation = () => {
  return (
    <nav>
      <NavLink to="/products" isActive={false}>
        Productos
      </NavLink>
      <NavLink to="/promotions" isActive={false}>
        Promociones
      </NavLink>
      <NavLink to="/builder" isActive={false}>
        Builder
      </NavLink>
    </nav>
  );
}; 


=== src/components/Posters/CategoryPosterPreview.tsx ===
import React from 'react';

interface CategoryPosterPreviewProps {
  category: string;
  promotion?: {
    discount: string;
  };
  company?: {
    id: string;
    name: string;
    logo: string;
  };
  showTopLogo?: boolean;
  points?: string;
  origin?: string;
  barcode?: string;
}

export const CategoryPosterPreview: React.FC<CategoryPosterPreviewProps> = ({ 
  category,
  promotion,
  company,
  showTopLogo = true,
  points = '',
  origin = 'ARGENTINA',
  barcode = '7790895000782'
}) => {
  return (
    <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-2xl mx-auto relative overflow-hidden">
      {/* Logo de fondo translúcido - siempre visible si hay company */}
      {company?.logo && (
        <div className="absolute inset-0 flex items-center justify-center opacity-5">
          <img 
            src={company.logo}
            alt={company.name}
            className="w-2/3 object-contain"
          />
        </div>
      )}

      <div className="space-y-6 text-center relative">
        {/* Logo superior izquierdo - controlado por showTopLogo */}
        {showTopLogo && company?.logo && (
          <div className="absolute left-0 top-0">
            <img 
              src={company.logo}
              alt={company.name}
              className="h-24 w-auto object-contain"
            />
          </div>
        )}

        {/* Nombre de la categoría */}
        <div className="text-5xl font-bold text-black tracking-tight leading-tight uppercase">
          {category}
        </div>

        {/* Descuento */}
        {promotion && (
          <div className="space-y-2">
            <div className="flex items-center justify-center">
              <div className="bg-red-600 text-white px-6 py-2 rounded-full text-4xl font-bold">
                {promotion.discount}
              </div>
            </div>
            
            <div className="text-3xl font-bold text-gray-800">
              EN TODOS LOS PRODUCTOS
            </div>
          </div>
        )}

        {/* Información adicional */}
        <div className="grid grid-cols-2 gap-4 text-gray-800 mt-8">
          <div className="space-y-1 text-left">
            <div className="text-base font-medium">
              ORIGEN: {origin}
            </div>
          </div>
          <div className="text-right">
            {points && (
              <div className="text-base font-bold">
                SUMÁ {points} PUNTOS JUMBO MÁS
              </div>
            )}
          </div>
        </div>

        {/* Código de barras y QR */}
        <div className="flex justify-between items-end mt-6">
          <div className="text-base text-left">
            {barcode}
          </div>
          <div className="flex items-center gap-2">
            <img 
              src={`https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=https://speed-plus.com/category/${category}`}
              alt="QR Code"
              className="w-16 h-16 rounded bg-white"
            />
            <span className="text-xs text-gray-500 text-left">
              más información<br />de la categoría
            </span>
          </div>
        </div>
      </div>
    </div>
  );
}; 


=== src/components/Posters/CategorySelect.tsx ===
import React, { useState, useRef, useEffect } from 'react';
import { ChevronDown } from 'lucide-react';

interface CategorySelectProps {
  value: string;
  onChange: (value: string) => void;
  categories: string[];
}

export const CategorySelect: React.FC<CategorySelectProps> = ({ value, onChange, categories }) => {
  const [isOpen, setIsOpen] = useState(false);
  const ref = useRef<HTMLDivElement>(null);

  const allCategories = ['Todos', ...categories];

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (ref.current && !ref.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  return (
    <div className="relative" ref={ref}>
      <button
        type="button"
        onClick={() => setIsOpen(!isOpen)}
        className="w-full border border-gray-300 rounded-md px-3 py-2 bg-white text-left flex items-center justify-between
                 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
      >
        <span className={value ? '' : 'text-gray-500'}>
          {value || 'Seleccionar categoría...'}
        </span>
        <ChevronDown className={`w-5 h-5 text-gray-400 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
      </button>

      {isOpen && (
        <div className="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg">
          <ul className="py-1 max-h-60 overflow-auto">
            {allCategories.map(category => (
              <li key={category}>
                <button
                  type="button"
                  onClick={() => {
                    onChange(category);
                    setIsOpen(false);
                  }}
                  className={`w-full px-3 py-2 text-left hover:bg-gray-100
                            ${value === category ? 'bg-blue-50' : ''}`}
                >
                  {category}
                </button>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}; 


=== src/components/Posters/CompanySelect.tsx ===
import React, { useState, useRef, useEffect } from 'react';
import { ChevronDown } from 'lucide-react';

interface Company {
  id: string;
  name: string;
  logo: string;
}

interface CompanySelectProps {
  value: string;
  onChange: (value: string) => void;
  companies: Company[];
}

export const CompanySelect: React.FC<CompanySelectProps> = ({ value, onChange, companies }) => {
  const [isOpen, setIsOpen] = useState(false);
  const ref = useRef<HTMLDivElement>(null);

  const selectedCompany = companies.find(c => c.id === value);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (ref.current && !ref.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  return (
    <div className="relative" ref={ref}>
      <button
        type="button"
        onClick={() => setIsOpen(!isOpen)}
        className="w-full border border-gray-300 rounded-md px-3 py-2 bg-white text-left flex items-center justify-between
                 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
      >
        <div className="flex items-center gap-2">
          {selectedCompany ? (
            <>
              <img 
                src={selectedCompany.logo} 
                alt={selectedCompany.name} 
                className="w-6 h-6 object-contain"
              />
              <span>{selectedCompany.name}</span>
            </>
          ) : (
            <span className="text-gray-500">Seleccionar empresa...</span>
          )}
        </div>
        <ChevronDown className={`w-5 h-5 text-gray-400 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
      </button>

      {isOpen && (
        <div className="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg">
          <ul className="py-1 max-h-60 overflow-auto">
            {companies.map(company => (
              <li key={company.id}>
                <button
                  type="button"
                  onClick={() => {
                    onChange(company.id);
                    setIsOpen(false);
                  }}
                  className={`w-full px-3 py-2 text-left flex items-center gap-2 hover:bg-gray-100
                            ${value === company.id ? 'bg-blue-50' : ''}`}
                >
                  <img 
                    src={company.logo} 
                    alt={company.name} 
                    className="w-6 h-6 object-contain"
                  />
                  <span>{company.name}</span>
                </button>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}; 


=== src/components/Posters/LocationMap.tsx ===
import React from 'react';

interface LocationMapProps {
  location?: {
    name: string;
    coordinates: [number, number];
    address: string;
  };
}

export const LocationMap: React.FC<LocationMapProps> = ({ location }) => {
  const getGoogleMapsEmbedUrl = (lat: number, lng: number, name: string) => {
    const query = encodeURIComponent(`${name} - ${location?.address}`);
    return `https://maps.google.com/maps?q=${query}&t=&z=15&ie=UTF8&iwloc=&output=embed`;
  };

  return (
    <div className="relative rounded-lg overflow-hidden shadow-lg bg-white">
      {location ? (
        <>
          <iframe
            title={`Mapa de ${location.name}`}
            width="100%"
            height="300"
            frameBorder="0"
            scrolling="no"
            marginHeight={0}
            marginWidth={0}
            src={getGoogleMapsEmbedUrl(location.coordinates[1], location.coordinates[0], location.name)}
            style={{ border: 0 }}
            className="w-full"
            loading="lazy"
          />
          <div className="absolute bottom-0 left-0 right-0 bg-black/50 text-white p-2 text-sm">
            {location.address}
          </div>
        </>
      ) : (
        <div className="h-64 flex items-center justify-center bg-gray-100">
          <p className="text-gray-500">Selecciona una ubicación</p>
        </div>
      )}
    </div>
  );
}; 


=== src/components/Posters/LocationSelect.tsx ===
import React from 'react';
import Select from 'react-select';

interface Location {
  id: string;
  name: string;
  region: string;
}

interface LocationSelectProps {
  value: string[];
  onChange: (values: string[]) => void;
  locations: Location[];
  disabled?: boolean;
  isMulti?: boolean;
  className?: string;
}

export const LocationSelect: React.FC<LocationSelectProps> = ({
  value,
  onChange,
  locations,
  disabled = false,
  isMulti = false,
  className
}) => {
  return (
    <Select
      isMulti={isMulti}
      isDisabled={disabled}
      value={locations.filter(l => value.includes(l.id)).map(l => ({
        value: l.id,
        label: l.name
      }))}
      onChange={(newValue: any) => {
        const selectedValues = newValue ? (Array.isArray(newValue) 
          ? newValue.map(v => v.value)
          : [newValue.value]) 
        : [];
        onChange(selectedValues);
      }}
      options={locations.map(l => ({
        value: l.id,
        label: l.name
      }))}
      classNames={{
        control: (state) => `${className} ${state.isFocused ? 'border-indigo-500' : ''}`,
        menu: () => "bg-white rounded-lg shadow-lg",
        option: () => "px-3 py-2 hover:bg-gray-100 cursor-pointer"
      }}
    />
  );
}; 


=== src/components/Posters/PosterEditor.tsx ===
import React, { useState, useEffect } from 'react';
import { ArrowLeft, LayoutGrid, List, Minus, Plus } from 'lucide-react';
import { CompanySelect } from './CompanySelect';
import { RegionSelect } from './RegionSelect';
import { LocationSelect } from './LocationSelect';
import { PromotionSelect } from './PromotionSelect';
import { ProductSelect } from './ProductSelect';
import { CategorySelect } from './CategorySelect';
import { PosterPreview } from './PosterPreview';
import { useNavigate } from 'react-router-dom';
import { Header } from '../shared/Header';
import { useTheme } from '../../hooks/useTheme';
import { ProductSelectorModal } from '../Products/ProductSelectorModal';
import { PosterModal } from './PosterModal';
import { COMPANIES } from '../../data/companies';
import { LOCATIONS, REGIONS } from '../../data/locations';
import { LoadingModal } from '../LoadingModal';
import { products } from '../../data/products';
import { SendingModal } from './SendingModal';

interface PosterEditorProps {
  onBack: () => void;
  onLogout: () => void;
  initialProducts?: string[];
  initialPromotion?: Promotion;
}

interface Promotion {
  id: string;
  title: string;
  description: string;
  discount: string;
  imageUrl: string;
  category: 'Bancaria' | 'Especial' | 'Categoría';
  conditions: string[];
  startDate: string;
  endDate: string;
  bank?: string;
  cardType?: string;
  type?: 'percentage' | '2x1' | '3x2' | 'second-70';
}

interface Product {
  id: string;
  sku: string;
  name: string;
  price: number;
  imageUrl: string;
  category: string;
}

const PAPER_FORMATS = [
  { id: 'A2', width: '420mm', height: '594mm', name: 'A2 (420 × 594 mm)' },
  { id: 'A3', width: '297mm', height: '420mm', name: 'A3 (297 × 420 mm)' },
  { id: 'A4', width: '210mm', height: '297mm', name: 'A4 (210 × 297 mm)' },
  { id: 'letter', width: '215.9mm', height: '279.4mm', name: 'Carta (215.9 × 279.4 mm)' },
  { id: 'legal', width: '215.9mm', height: '355.6mm', name: 'Legal (215.9 × 355.6 mm)' }
];

const PROMOTIONS: Promotion[] = [
  {
    id: '1',
    title: 'American Express 25% OFF',
    description: 'Comprá cuando quieras y programá tu entrega los días Jueves.',
    discount: '25% OFF',
    imageUrl: 'https://images.unsplash.com/photo-1580828343064-fde4fc206bc6?w=500&auto=format&fit=crop&q=60',
    category: 'Bancaria',
    conditions: ['Tope de reintegro $2000', 'Válido solo los jueves'],
    startDate: '2024-01-01',
    endDate: '2024-12-31',
    bank: 'American Express',
    cardType: 'Todas las tarjetas'
  },
  {
    id: '2',
    title: 'Hasta 40% OFF en Especiales de la semana',
    description: 'Descuentos especiales en productos seleccionados',
    discount: 'Hasta 40% OFF',
    imageUrl: 'https://images.unsplash.com/photo-1607082349566-187342175e2f?w=500&auto=format&fit=crop&q=60',
    category: 'Especial',
    conditions: ['Válido solo los jueves'],
    startDate: '2024-01-01',
    endDate: '2024-12-31'
  },
  {
    id: '3',
    title: 'Tarjeta Cencosud 20% OFF',
    description: 'Realizá tus compras los días Miércoles',
    discount: '20% OFF',
    imageUrl: 'https://images.unsplash.com/photo-1556742502-ec7c0e9f34b1?w=500&auto=format&fit=crop&q=60',
    category: 'Bancaria',
    conditions: ['Válido solo los miércoles'],
    startDate: '2024-01-01',
    endDate: '2024-12-31',
    bank: 'Cencosud'
  },
  {
    id: '4',
    title: '2do al 70% en Almacén, Bebidas y más',
    description: 'En la segunda unidad de productos seleccionados',
    discount: '70% OFF',
    imageUrl: 'https://images.unsplash.com/photo-1579113800032-c38bd7635818?w=500&auto=format&fit=crop&q=60',
    category: 'Especial',
    conditions: ['Valido solo comprando dos productos iguales el segundo al 70%'],
    startDate: '2024-01-01',
    endDate: '2024-12-31'
  },
  {
    id: '5',
    title: 'Hasta 35% y Hasta 12 CSI',
    description: 'Descuentos especiales en productos seleccionados con cuotas sin interés',
    discount: '35% OFF',
    imageUrl: 'https://images.unsplash.com/photo-1556742044-3c52d6e88c62?w=500&auto=format&fit=crop&q=60',
    category: 'Bancaria',
    conditions: ['Válido solo los jueves'],
    startDate: '2024-01-01',
    endDate: '2024-12-31',
    bank: 'Banco Nación'
  },
  {
    id: '6',
    title: 'Santander 30% OFF',
    description: 'Todos los días con Tarjetas Santander',
    discount: '30% OFF',
    imageUrl: 'https://images.unsplash.com/photo-1556742393-d75f468bfcb0?w=500&auto=format&fit=crop&q=60',
    category: 'Bancaria',
    conditions: ['Válido solo los días'],
    startDate: '2024-01-01',
    endDate: '2024-12-31',
    bank: 'Santander'
  },
  {
    id: '7',
    title: 'BBVA 25% OFF',
    description: 'Descuentos exclusivos para clientes BBVA',
    discount: '25% OFF',
    imageUrl: 'https://images.unsplash.com/photo-1556742111-a301076d9d18?w=500&auto=format&fit=crop&q=60',
    category: 'Bancaria',
    conditions: ['Válido solo los jueves'],
    startDate: '2024-01-01',
    endDate: '2024-12-31',
    bank: 'BBVA'
  },
  {
    id: '8',
    title: 'Banco Provincia 30% OFF',
    description: 'Miércoles y Sábados con Banco Provincia',
    discount: '30% OFF',
    imageUrl: 'https://images.unsplash.com/photo-1556741533-6e6a62bd8b49?w=500&auto=format&fit=crop&q=60',
    category: 'Bancaria',
    conditions: ['Válido solo los miércoles y sábados'],
    startDate: '2024-01-01',
    endDate: '2024-12-31',
    bank: 'Banco Provincia'
  },
  {
    id: '9',
    title: 'Banco Nación 25% OFF',
    description: 'Descuentos especiales con Banco Nación',
    discount: '25% OFF',
    imageUrl: 'https://images.unsplash.com/photo-1556742205-e7530469f4eb?w=500&auto=format&fit=crop&q=60',
    category: 'Bancaria',
    conditions: ['Válido solo los jueves'],
    startDate: '2024-01-01',
    endDate: '2024-12-31',
    bank: 'Banco Nación'
  },
  {
    id: '10',
    title: '2da Unidad 70% OFF',
    description: 'En la segunda unidad de productos seleccionados',
    discount: '70% OFF',
    imageUrl: 'https://images.unsplash.com/photo-1607082349566-187342175e2f?w=500&auto=format&fit=crop&q=60',
    category: 'Especial',
    conditions: ['Válido en la compra de dos unidades iguales', 'Productos seleccionados'],
    startDate: '2024-01-01',
    endDate: '2024-12-31',
    type: 'second-70'
  },
  {
    id: '11',
    title: '2x1 en Productos Seleccionados',
    description: 'Llevá 2 y pagá 1 en productos seleccionados',
    discount: '2x1',
    imageUrl: 'https://images.unsplash.com/photo-1563636619-e9143da7973b?w=500&auto=format&fit=crop&q=60',
    category: 'Especial',
    conditions: ['Válido en productos seleccionados', 'Llevando dos unidades iguales'],
    startDate: '2024-01-01',
    endDate: '2024-12-31',
    type: '2x1'
  },
  {
    id: '12',
    title: '3x2 en Productos Seleccionados',
    description: 'Llevá 3 y pagá 2 en productos seleccionados',
    discount: '3x2',
    imageUrl: 'https://images.unsplash.com/photo-1563636619-e9143da7973b?w=500&auto=format&fit=crop&q=60',
    category: 'Especial',
    conditions: ['Válido en productos seleccionados', 'Llevando tres unidades iguales'],
    startDate: '2024-01-01',
    endDate: '2024-12-31',
    type: '3x2'
  }
];

console.log('Importación de productos:', { products });

// Extraer categorías únicas de los productos
const CATEGORIES = Array.from(new Set(products.map(p => p.category)));
console.log('Categorías encontradas:', CATEGORIES);

export const PosterEditor: React.FC<PosterEditorProps> = ({ 
  onBack, 
  onLogout, 
  initialProducts = [], 
  initialPromotion 
}) => {
  const { theme } = useTheme();
  const isDark = theme === 'dark';
  const [company, setCompany] = useState('');
  const [region, setRegion] = useState<string[]>([]);
  const [cc, setCC] = useState<string[]>([]);
  const [promotion, setPromotion] = useState(initialPromotion?.id || '');
  const [selectedProducts, setSelectedProducts] = useState<string[]>(initialProducts);
  const [selectedCategory, setSelectedCategory] = useState('');
  const navigate = useNavigate();
  const [showLogo, setShowLogo] = useState(true);
  const [showPesosCheck, setShowPesosCheck] = useState(false);
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [isProductSelectorOpen, setIsProductSelectorOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [isSendingModalOpen, setIsSendingModalOpen] = useState(false);
  const [selectedPoster, setSelectedPoster] = useState<Product | null>(null);
  const [selectedFormat, setSelectedFormat] = useState(PAPER_FORMATS[2]); // A4 por defecto
  const [showFormatSelector, setShowFormatSelector] = useState(false);
  const [zoom, setZoom] = useState(1);
  const [cardSize, setCardSize] = useState(0.85);
  const [isLandscape, setIsLandscape] = useState(false);

  console.log('LOCATIONS imported:', LOCATIONS); // Debug
  console.log('COMPANIES imported:', COMPANIES); // Debug
  console.log('Productos disponibles:', products);

  // Limpiar región y CC cuando cambia la empresa
  const handleCompanyChange = (newCompany: string) => {
    setCompany(newCompany);
    setRegion([]);
    setCC([]);
  };

  // Filtrar ubicaciones basado en la empresa y región seleccionadas
  const filteredLocations = React.useMemo(() => {
    let locations = [...LOCATIONS];
    console.log('Company selected:', company); // Debug
    console.log('All locations:', locations); // Debug

    // Filtrar por empresa si hay una seleccionada y no es "TODAS"
    if (company && company !== 'no-logo') {
      locations = locations.filter(loc => {
        const matches = loc.id.startsWith(company.toLowerCase());
        console.log(`Checking location ${loc.id} against ${company.toLowerCase()}: ${matches}`); // Debug
        return matches;
      });
    }

    console.log('Filtered by company:', locations); // Debug

    // Filtrar por regiones seleccionadas
    if (region.length > 0 && !region.includes('todos')) {
      locations = locations.filter(loc => region.includes(loc.region));
    }

    console.log('Final filtered locations:', locations); // Debug
    return locations;
  }, [company, region]);

  // Obtener regiones únicas basadas en las ubicaciones filtradas por empresa
  const availableRegions = React.useMemo(() => {
    console.log('Calculating regions for company:', company); // Debug
    const locations = company && company !== 'no-logo'
      ? LOCATIONS.filter(loc => {
          const matches = loc.id.startsWith(company.toLowerCase());
          console.log(`Checking location ${loc.id} for regions: ${matches}`); // Debug
          return matches;
        })
      : LOCATIONS;
      
    const regions = new Set(locations.map(loc => loc.region));
    console.log('Available regions:', regions); // Debug
    
    const result = [
      { id: 'todos', name: 'Todas las Regiones' },
      ...REGIONS.filter(r => r.id !== 'todos' && regions.has(r.id))
    ];
    console.log('Final regions list:', result); // Debug
    return result;
  }, [company]);

  const selectedPromotion = PROMOTIONS.find(p => p.id === promotion);

  // Renombrar a mappedProducts para evitar la redeclaración
  const mappedProducts = selectedProducts.map(productId => 
    products.find(p => p.id === productId)
  ).filter((p): p is Product => p !== undefined);

  const handlePrint = () => {
    const printData = {
      products: mappedProducts,
      promotion: selectedPromotion
    };
    navigate('/print-view', { state: printData });
  };

  const companyDetails = COMPANIES.find(c => c.id === company);

  const handlePreview = (product: Product) => {
    navigate('/poster-preview', {
      state: {
        product,
        promotion: selectedPromotion,
        company: companyDetails,
        showLogo
      }
    });
  };

  const handleSelectProduct = (productId: string) => {
    setSelectedProducts(prev => {
      if (prev.includes(productId)) {
        return prev.filter(id => id !== productId);
      }
      return [...prev, productId];
    });
  };

  // Simular carga inicial
  useEffect(() => {
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 3000); // Cambiado de 2000 a 2500 para que dure 2.5 segundos

    return () => clearTimeout(timer);
  }, []);

  // Modificar donde se usan los productos
  const filteredProducts = selectedCategory === 'Todos' || !selectedCategory 
    ? products
    : products.filter(p => p.category === selectedCategory);

  console.log('Categoría seleccionada:', selectedCategory);
  console.log('Productos filtrados:', filteredProducts);

  // Agregar el handler para enviar a sucursales
  const handleSendToLocations = () => {
    if (!cc.length) {
      alert('Por favor seleccione al menos una sucursal');
      return;
    }
    if (!selectedProducts.length) {
      alert('Por favor seleccione al menos un producto');
      return;
    }

    // Cerrar el modal si está abierto y volver a abrirlo para reiniciar la animación
    setIsSendingModalOpen(false);
    setTimeout(() => {
      setIsSendingModalOpen(true);
    }, 100);
  };

  // Agregar las funciones de zoom
  const handleZoomIn = () => setZoom(prev => Math.min(prev + 0.1, 2));
  const handleZoomOut = () => setZoom(prev => Math.max(prev - 0.1, 0.5));

  const handleCardSizeChange = (newSize: number) => {
    // Redondeamos al múltiplo de 5 más cercano
    const roundedSize = Math.round(newSize * 20) / 20;
    // Limitamos entre 50% y 120%
    setCardSize(Math.max(0.5, Math.min(roundedSize, 1.2)));
  };

  return (
    <>
      <LoadingModal isOpen={isLoading} />
      <div className="poster-editor-container min-h-screen flex flex-col bg-white">
        <Header 
          onBack={onBack} 
          onLogout={onLogout} 
          onSettings={() => console.log('Settings clicked')} 
        />
        <main className="pt-10 px-6 pb-6 max-w-7xl mx-auto space-y-6 min-h-[1000px]">
          <div className="flex items-center gap-4 mb-8">
            <h2 className="text-2xl font-medium text-gray-900">Editor de Carteles</h2>
          </div>

          <div className="bg-white rounded-xl shadow-lg p-6 space-y-6 border border-gray-200">
            <div className="grid grid-cols-3 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Empresa:
                </label>
                <CompanySelect
                  value={company}
                  onChange={handleCompanyChange}
                  companies={COMPANIES}
                  className="bg-white/10 border-white/20 text-white placeholder:text-white/50 focus:border-white/30"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Región:
                </label>
                <RegionSelect
                  value={region}
                  onChange={(values) => {
                    setRegion(values);
                    setCC([]);
                  }}
                  regions={availableRegions}
                  isMulti={true}
                  className="bg-white/10 border-white/20 text-white placeholder:text-white/50 focus:border-white/30"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  CC:
                </label>
                <LocationSelect
                  value={cc}
                  onChange={setCC}
                  locations={filteredLocations}
                  disabled={region.length === 0}
                  isMulti={true}
                  className="bg-white/10 border-white/20 text-white placeholder:text-white/50 focus:border-white/30"
                />
              </div>
            </div>

            <div className="border-t border-gray-200">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Promoción:
                </label>
                <PromotionSelect
                  value={promotion}
                  onChange={setPromotion}
                  promotions={PROMOTIONS}
                  className="bg-white/10 border-white/20 text-white placeholder:text-white/50 focus:border-white/30"
                />
              </div>

              {selectedPromotion && (
                <div className="bg-gray-50 rounded-lg p-6 space-y-4">
                  <div className="flex items-start gap-6">
                    <img 
                      src={selectedPromotion.imageUrl}
                      alt={selectedPromotion.title}
                      className="w-32 h-32 object-cover rounded-lg"
                    />
                    <div className="flex-1 space-y-4">
                      <div>
                        <div className="flex items-center gap-3">
                          <h3 className="text-lg font-medium text-gray-900">
                            {selectedPromotion.title}
                          </h3>
                          <span className="px-2 py-1 text-xs font-medium rounded-full bg-blue-100 text-blue-700">
                            {selectedPromotion.category}
                          </span>
                        </div>
                        <p className="text-gray-600 mt-1">{selectedPromotion.description}</p>
                      </div>

                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <h4 className="text-sm font-medium text-gray-700 mb-1">Descuento</h4>
                          <p className="text-2xl font-bold text-indigo-600">{selectedPromotion.discount}</p>
                        </div>
                        <div>
                          <h4 className="text-sm font-medium text-gray-700 mb-1">Vigencia</h4>
                          <p className="text-gray-900">
                            {new Date(selectedPromotion.startDate).toLocaleDateString()} - {new Date(selectedPromotion.endDate).toLocaleDateString()}
                          </p>
                        </div>
                      </div>

                      {selectedPromotion.category === 'Bancaria' && (
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <h4 className="text-sm font-medium text-gray-700 mb-1">Banco</h4>
                            <p className="text-gray-900">{selectedPromotion.bank}</p>
                          </div>
                          <div>
                            <h4 className="text-sm font-medium text-gray-700 mb-1">Tarjetas</h4>
                            <p className="text-gray-900">{selectedPromotion.cardType}</p>
                          </div>
                        </div>
                      )}

                      <div>
                        <h4 className="text-sm font-medium text-gray-700 mb-2">Condiciones</h4>
                        <ul className="space-y-1">
                          {selectedPromotion.conditions.map((condition, index) => (
                            <li key={index} className="text-gray-600 text-sm flex items-center gap-2">
                              <span className="w-1.5 h-1.5 rounded-full bg-gray-400" />
                              {condition}
                            </li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>

            <div className="border-t border-gray-200 pt-6">
              <div className="grid grid-cols-4 gap-4">
                <div className="col-span-1">
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Categoría:
                  </label>
                  <CategorySelect
                    value={selectedCategory}
                    onChange={setSelectedCategory}
                    categories={CATEGORIES}
                    className="bg-white/10 border-white/20 text-white placeholder:text-white/50 focus:border-white/30"
                  />
                </div>
                <div className="col-span-3">
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Productos:
                  </label>
                  <div className="relative">
                    <ProductSelect
                      value={selectedProducts}
                      onChange={setSelectedProducts}
                      products={filteredProducts}
                      className="bg-white/10 border-white/20 text-white placeholder:text-white/50 focus:border-white/30"
                      menuPlacement="top"
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>

          {(selectedCategory || mappedProducts.length > 0) && (
            <div className="border-t border-gray-200 pt-6">
              <div className="flex justify-between items-center mb-4">
                <div className="flex items-center gap-4">
                  {/* Controles agrupados */}
                  <div className="flex items-center gap-4">
                    {/* Vista grilla/lista */}
                    <div className="flex bg-gray-200 rounded-lg p-1">
                      <button
                        onClick={() => setViewMode('grid')}
                        className={`p-2 rounded-md transition-colors ${
                          viewMode === 'grid' ? 'bg-gray-300 text-gray-700' : 'text-gray-500 hover:text-gray-700'
                        }`}
                      >
                        <LayoutGrid className="w-4 h-4" />
                      </button>
                      <button
                        onClick={() => setViewMode('list')}
                        className={`p-2 rounded-md transition-colors ${
                          viewMode === 'list' ? 'bg-gray-300 text-gray-700' : 'text-gray-500 hover:text-gray-700'
                        }`}
                      >
                        <List className="w-4 h-4" />
                      </button>
                    </div>

                    {/* Separador vertical */}
                    <div className="h-8 w-px bg-gray-200"></div>

                    {/* Selector de formato */}
                    <div className="relative">
                      <button
                        onClick={() => setShowFormatSelector(!showFormatSelector)}
                        className="bg-gray-200 px-3 py-2 rounded-lg text-sm font-medium hover:bg-gray-300 transition-colors flex items-center gap-2"
                      >
                        {selectedFormat.id}
                        <span className="text-xs text-gray-500">
                          {selectedFormat.width} × {selectedFormat.height}
                        </span>
                        <svg className="w-4 h-4 text-gray-500" viewBox="0 0 20 20" fill="currentColor">
                          <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                        </svg>
                      </button>

                      {/* Menú desplegable de formatos */}
                      {showFormatSelector && (
                        <div className="absolute top-full left-0 mt-1 bg-white rounded-lg shadow-lg border border-gray-200 py-1 w-64 z-50">
                          {PAPER_FORMATS.map(format => (
                            <button
                              key={format.id}
                              onClick={() => {
                                setSelectedFormat(format);
                                setShowFormatSelector(false);
                              }}
                              className={`w-full px-4 py-2 text-left hover:bg-gray-100 flex items-center justify-between ${
                                selectedFormat.id === format.id ? 'bg-gray-50 text-indigo-600' : 'text-gray-700'
                              }`}
                            >
                              <span className="font-medium">{format.name}</span>
                              <span className="text-xs text-gray-500">
                                {format.width} × {format.height}
                              </span>
                            </button>
                          ))}
                        </div>
                      )}
                    </div>

                    {/* Separador vertical */}
                    <div className="h-8 w-px bg-gray-200"></div>

                    {/* Control de orientación */}
                    <button
                      onClick={() => setIsLandscape(!isLandscape)}
                      className="p-2 rounded-lg bg-gray-200 hover:bg-gray-300 transition-colors flex items-center gap-2"
                    >
                      <svg 
                        className={`w-4 h-4 transition-transform ${isLandscape ? 'rotate-90' : ''}`} 
                        viewBox="0 0 24 24" 
                        fill="none" 
                        stroke="currentColor"
                      >
                        <rect x="4" y="5" width="16" height="14" rx="2" strokeWidth="2"/>
                      </svg>
                      <span className="text-sm">
                        {isLandscape ? 'Horizontal' : 'Vertical'}
                      </span>
                    </button>

                    {/* Separador vertical */}
                    <div className="h-8 w-px bg-gray-200"></div>

                    {/* Controles de zoom */}
                    <div className="flex items-center gap-2">
                      <button
                        onClick={handleZoomOut}
                        className="p-2 rounded-lg bg-gray-200 hover:bg-gray-300 transition-colors"
                      >
                        <Minus className="w-4 h-4" />
                      </button>
                      <span className="text-sm text-gray-600 min-w-[3rem] text-center">
                        {Math.round(zoom * 100)}%
                      </span>
                      <button
                        onClick={handleZoomIn}
                        className="p-2 rounded-lg bg-gray-200 hover:bg-gray-300 transition-colors"
                      >
                        <Plus className="w-4 h-4" />
                      </button>
                    </div>

                    {/* Separador vertical */}
                    <div className="h-8 w-px bg-gray-200"></div>

                    {/* Controles de tamaño del cartel */}
                    <div className="flex items-center gap-2">
                      <button
                        onClick={() => handleCardSizeChange(cardSize - 0.05)}
                        className="p-2 rounded-lg bg-gray-200 hover:bg-gray-300 transition-colors"
                      >
                        <Minus className="w-4 h-4" />
                      </button>
                      <span className="text-sm text-gray-600 min-w-[3rem] text-center">
                        {Math.round(cardSize * 100)}%
                      </span>
                      <button
                        onClick={() => handleCardSizeChange(cardSize + 0.05)}
                        className="p-2 rounded-lg bg-gray-200 hover:bg-gray-300 transition-colors"
                      >
                        <Plus className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                </div>

                {/* Controles del lado derecho */}
                <div className="flex items-center gap-4">
                  <div className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      id="show-logo"
                      checked={showLogo}
                      onChange={(e) => setShowLogo(e.target.checked)}
                      className="rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"
                    />
                    <label htmlFor="show-logo" className="text-sm text-gray-700">
                      Mostrar logo
                    </label>
                  </div>

                  <button
                    onClick={handleSendToLocations}
                    disabled={!cc.length || !selectedProducts.length}
                    className={`px-4 py-2 rounded-lg font-medium transition-colors
                      ${(!cc.length || !selectedProducts.length)
                        ? 'bg-gray-200 text-gray-500 cursor-not-allowed'
                        : 'bg-indigo-600 text-white hover:bg-indigo-700'
                      }`}
                  >
                    Enviar a Sucursales
                  </button>
                </div>
              </div>

              <div className="h-[800px] w-[1080px] mx-auto overflow-y-auto">
                <div className={viewMode === 'grid' ? 'space-y-8' : 'space-y-4'}>
                  {mappedProducts.map(product => (
                    <div key={product.id} 
                         className={`flex justify-center ${viewMode === 'list' ? 'bg-gray-100 rounded-lg p-4' : ''}`}
                    >
                      <PosterPreview
                        product={product}
                        promotion={selectedPromotion}
                        company={companyDetails}
                        showTopLogo={showLogo}
                        pricePerUnit={`${product.price * 2}`}
                        points="49"
                        origin="ARGENTINA"
                        barcode="7790895000782"
                        compact={viewMode === 'list'}
                        selectedFormat={selectedFormat}
                        zoom={zoom}
                        cardSize={cardSize}
                        isLandscape={isLandscape}
                      />
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          <ProductSelectorModal
            isOpen={isProductSelectorOpen}
            onClose={() => setIsProductSelectorOpen(false)}
            products={selectedCategory === 'Todos' || !selectedCategory 
              ? products
              : products.filter(p => p.category === selectedCategory)
            }
            selectedProducts={selectedProducts}
            onSelectProduct={handleSelectProduct}
            category={selectedCategory}
          />

          <SendingModal
            isOpen={isSendingModalOpen}
            onClose={() => setIsSendingModalOpen(false)}
            locations={filteredLocations.filter(loc => cc.includes(loc.id))}
            productsCount={selectedProducts.length}
          />

          <PosterModal
            isOpen={!!selectedPoster}
            onClose={() => setSelectedPoster(null)}
            product={selectedPoster!}
            promotion={selectedPromotion}
            company={companyDetails}
            showLogo={showLogo}
          />
        </main>
      </div>
    </>
  );
}; 


=== src/components/Posters/PosterModal.tsx ===
import React from 'react';
import { X } from 'lucide-react';
import { PosterPreview } from './PosterPreview';
import { Product } from '../../types/product';
import { Promotion } from '../../types/promotion';

interface PosterModalProps {
  isOpen: boolean;
  onClose: () => void;
  product: Product;
  promotion?: Promotion;
  company?: {
    id: string;
    name: string;
    logo: string;
  };
  showLogo?: boolean;
}

export const PosterModal: React.FC<PosterModalProps> = ({
  isOpen,
  onClose,
  product,
  promotion,
  company,
  showLogo = true
}) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-[100]">
      <div className="relative">
        <button
          onClick={onClose}
          className="absolute -top-12 right-0 text-white/60 hover:text-white"
        >
          <X className="w-6 h-6" />
        </button>
        
        <PosterPreview
          product={product}
          promotion={promotion}
          company={company}
          showTopLogo={showLogo}
          pricePerUnit={`${product.price * 2}`}
          points="49"
          origin="ARGENTINA"
          barcode="7790895000782"
        />
      </div>
    </div>
  );
}; 


=== src/components/Posters/PosterPreview.tsx ===
import React, { useState } from 'react';

interface Product {
  id: string;
  name: string;
  description: string;
  price: number;
  imageUrl: string;
  category: string;
}

interface PosterPreviewProps {
  product: Product;
  promotion?: {
    discount: string;
    bank?: string;
    cardType?: string;
    conditions?: string[];
    startDate?: string;
    endDate?: string;
    type?: 'percentage' | '2x1' | '3x2' | 'second-70';
    title?: string;
    description?: string;
  };
  company?: {
    id: string;
    name: string;
    logo: string;
  };
  showTopLogo?: boolean;
  pricePerUnit?: string;
  points?: string;
  origin?: string;
  barcode?: string;
  size?: {
    id: string;
    name: string;
  };
  compact?: boolean;
  selectedFormat: {
    id: string;
    width: string;
    height: string;
    name: string;
  };
  zoom: number;
  cardSize: number;
  isLandscape?: boolean;
}

// Definimos los formatos de papel disponibles
const PAPER_FORMATS = [
  { id: 'A2', width: '420mm', height: '594mm', name: 'A2 (420 × 594 mm)' },
  { id: 'A3', width: '297mm', height: '420mm', name: 'A3 (297 × 420 mm)' },
  { id: 'A4', width: '210mm', height: '297mm', name: 'A4 (210 × 297 mm)' },
  { id: 'letter', width: '215.9mm', height: '279.4mm', name: 'Carta (215.9 × 279.4 mm)' },
  { id: 'legal', width: '215.9mm', height: '355.6mm', name: 'Legal (215.9 × 355.6 mm)' }
];

export const PosterPreview: React.FC<PosterPreviewProps> = ({ 
  product,
  promotion,
  company,
  showTopLogo = true,
  pricePerUnit = '',
  points = '',
  origin = 'ARGENTINA',
  barcode = '7790895000782',
  compact = false,
  size,
  selectedFormat,
  zoom,
  cardSize,
  isLandscape = false
}) => {
  // En el componente, agregamos el estado para el formato seleccionado
  const [showFormatSelector, setShowFormatSelector] = useState(false);
  const [position, setPosition] = useState({ x: 0, y: 0 });
  const [isDragging, setIsDragging] = useState(false);
  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });

  // Manejadores de movimiento
  const handleMouseDown = (e: React.MouseEvent) => {
    // Solo activar el arrastre si se hace clic en el cartel
    const target = e.target as HTMLElement;
    if (!target.closest('.poster-content')) return;

    e.preventDefault();
    setIsDragging(true);
    setDragStart({
      x: e.clientX - position.x,
      y: e.clientY - position.y
    });
  };

  const handleMouseMove = (e: React.MouseEvent) => {
    if (!isDragging) return;
    
    // Calcular nueva posición
    const newX = e.clientX - dragStart.x;
    const newY = e.clientY - dragStart.y;

    // Limitar el movimiento dentro de la hoja
    const maxOffset = 500; // Aumentamos el rango de movimiento
    setPosition({
      x: Math.max(-maxOffset, Math.min(maxOffset, newX)),
      y: Math.max(-maxOffset, Math.min(maxOffset, newY))
    });
  };

  // Calcular el precio con descuento
  const calculatePrice = () => {
    if (!promotion) return {
      finalPrice: product.price,
      unitPrice: product.price,
      totalUnits: 1,
      savedAmount: 0,
      secondUnitPrice: 0
    };

    switch (promotion.type) {
      case 'second-70':
        const secondUnitPrice = product.price * 0.3; // 70% de descuento en la segunda unidad
        return {
          finalPrice: product.price + secondUnitPrice,
          unitPrice: (product.price + secondUnitPrice) / 2,
          totalUnits: 2,
          savedAmount: product.price * 0.7,
          secondUnitPrice
        };
      case '2x1':
        return {
          finalPrice: product.price,
          unitPrice: product.price / 2,
          totalUnits: 2,
          savedAmount: product.price
        };
      case '3x2':
        return {
          finalPrice: product.price * 2,
          unitPrice: (product.price * 2) / 3,
          totalUnits: 3,
          savedAmount: product.price
        };
      default:
        // Descuento porcentual normal
        const discountMatch = promotion.discount.match(/(\d+)/);
        if (!discountMatch) return {
          finalPrice: product.price,
          unitPrice: product.price,
          totalUnits: 1,
          savedAmount: 0
        };
        
        const discountPercent = parseInt(discountMatch[0]);
        const finalPrice = product.price * (1 - discountPercent / 100);
        return {
          finalPrice,
          unitPrice: finalPrice,
          totalUnits: 1,
          savedAmount: product.price - finalPrice
        };
    }
  };

  const priceInfo = calculatePrice();

  const qrUrl = `https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=https://speed-plus.com/product/${product.id}`;

  const roundedFontStyle = { 
    fontFamily: 'VAG Rounded BT, VAG Rounded Std, Arial Rounded MT Bold, Arial Black, sans-serif'
  };

  // Renderizado normal cuando no es modal
  return (
    <div className="flex justify-center items-center min-h-screen bg-gray-100 p-8">
      <div className="flex gap-4 items-start">
        {/* Área de la hoja con zoom y movimiento */}
        <div 
          className="relative overflow-hidden flex items-center justify-center"
          style={{
            width: '100vw',
            height: '90vh',
            cursor: isDragging ? 'grabbing' : 'grab'
          }}
          onMouseDown={handleMouseDown}
          onMouseMove={handleMouseMove}
          onMouseUp={() => setIsDragging(false)}
          onMouseLeave={() => setIsDragging(false)}
        >
          <div className="relative"> {/* Contenedor para la hoja y los controles */}
            {/* Mantener solo la hoja */}
            <div 
              className="bg-white shadow-xl relative transition-transform"
              style={{ 
                width: isLandscape ? selectedFormat.height : selectedFormat.width, 
                height: isLandscape ? selectedFormat.width : selectedFormat.height,
                transform: `scale(${zoom}) translate(${position.x}px, ${position.y}px)`,
                transformOrigin: 'center center',
                backgroundImage: `
                  linear-gradient(to right, #f0f0f0 1px, transparent 1px),
                  linear-gradient(to bottom, #f0f0f0 1px, transparent 1px)
                `,
                backgroundSize: '10mm 10mm',
              }}
            >
              {/* Cartel */}
              <div 
                className="poster-content absolute inset-0 flex items-center justify-center z-[9000]"
              >
                {compact ? (
                  <div className="transform" style={{ transform: `scale(${cardSize})` }}>
                    <div className="relative bg-white rounded-lg shadow-2xl overflow-hidden z-0 w-[900px] h-[200px] flex">
                      {/* Logo en modo lista */}
                      {company?.logo && showTopLogo && (
                        <div className="w-[200px] p-4 flex items-center justify-center border-r border-gray-100">
                          <img 
                            src={company.logo}
                            alt={company.name}
                            className="h-full w-auto object-contain"
                          />
                        </div>
                      )}

                      {/* Contenido en modo lista */}
                      <div className="flex-1 p-4 flex justify-between items-center">
                        <div className="flex-1 px-6" style={roundedFontStyle}>
                          <h1 className="text-2xl font-black text-black leading-none">
                            {product.name.toLowerCase()}
                          </h1>
                          <div className="mt-2 flex items-center gap-4">
                            <span className="text-2xl text-gray-400 line-through">
                              ${product.price.toLocaleString('es-AR')}
                            </span>
                            {promotion && (
                              <div className="bg-red-600 text-center text-white px-4 py-1 rounded-full text-lg font-bold">
                                {promotion.discount}
                              </div>
                            )}
                          </div>
                          <div className="mt-2">
                            <span className="text-4xl font-black text-black" style={roundedFontStyle}>
                              ${Math.round(priceInfo.finalPrice).toLocaleString('es-AR')}
                            </span>
                          </div>
                        </div>

                        <div className="flex items-center gap-8">
                          <div className="flex items-center gap-4">
                            <div className="text-sm text-gray-600">SKU: {barcode}</div>
                            <img src={qrUrl} alt="QR Code" className="w-16 h-16" />
                          </div>
                          <div className="text-sm" style={roundedFontStyle}>
                            <div className="font-medium">ORIGEN: {origin}</div>
                            {points && <div className="font-bold">SUMÁ {points} PUNTOS</div>}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="transform" style={{ transform: `scale(${cardSize})` }}>
                    <div className="bg-white p-2 rounded-lg shadow-2xl w-[900px] h-[600px] relative overflow-hidden">
                      {/* Logo de fondo translúcido */}
                      {company?.logo && (
                        <div className="absolute inset-0 flex items-center justify-center opacity-5">
                          <img 
                            src={company.logo}
                            alt={company.name}
                            className="w-2/3 object-contain"
                          />
                        </div>
                      )}

                      <div className="space-y-4 text-center relative h-full" style={roundedFontStyle}>
                        {/* Reservamos el espacio para el logo siempre, esté visible o no */}
                        <div className="h-20">
                          {showTopLogo && company?.logo && (
                            <div className="absolute left-1 top-1">
                              <img 
                                src={company.logo}
                                alt={company.name}
                                className="h-24 w-auto object-contain"
                              />
                            </div>
                          )}
                        </div>

                        {/* Nombre del producto */}
                        <div className="text-5xl font-bold text-black tracking-tight leading-tight uppercase mt-28 text-center">
                          {product.name}
                        </div>

                        {/* Descuento y Condiciones */}
                        {promotion && (
                          <div className="space-y-2">
                            <div className="flex items-center justify-center">
                              <div className="bg-red-600 text-white px-6 py-2 rounded-full text-3xl font-bold">
                                {promotion.discount}
                              </div>
                            </div>

                            {/* Condiciones y vigencia */}
                            <div className="text-right absolute top-40 right-10">
                              {promotion.conditions && promotion.conditions.length > 0 && (
                                <div className="text-[14px]" style={roundedFontStyle}>
                                  <span className="text-gray-600">Condiciones:</span><br />
                                  {promotion.conditions.map((condition, index) => (
                                    <div key={index}>• {condition}</div>
                                  ))}
                                </div>
                              )}
                              {(promotion.startDate || promotion.endDate) && (
                                <div className="text-[14px] mt-2" style={roundedFontStyle}>
                                  <span className="text-gray-600">Vigencia:</span><br />
                                  {promotion.startDate && <div>Del {new Date(promotion.startDate).toLocaleDateString()}</div>}
                                  {promotion.endDate && <div>al {new Date(promotion.endDate).toLocaleDateString()}</div>}
                                </div>
                              )}
                            </div>
                          </div>
                        )}

                        {/* Sección de precios */}
                        <div className="flex-grow flex flex-col items-center justify-center -mt-0">
                          {/* Precio tachado y descuento */}
                          <div className="flex items-center gap-4 mb-4">
                            <span className="text-[50px] text-gray-400 line-through">
                              ${product.price.toLocaleString('es-AR')}
                            </span>
                          </div>

                          {/* Precio Final */}
                          <span className="text-[100px] font-black leading-none mb-4" 
                                style={{ 
                                  ...roundedFontStyle,
                                  letterSpacing: '-0.01em'
                                }}>
                            ${Math.round(priceInfo.finalPrice).toLocaleString('es-AR')}
                          </span>
                        </div>

                        {/* Información adicional */}
                        <div className="grid grid-cols-2 gap-4 text-gray-800 mt-4">
                          <div className="space-y-1 text-left">
                            <div className="text-base font-medium">
                              ORIGEN: {origin}
                            </div>
                          </div>
                          <div className="text-right">
                            {points && (
                              <div className="text-base font-bold">
                                SUMÁ {points} PUNTOS JUMBO MÁS
                              </div>
                            )}
                          </div>
                        </div>

                        {/* Código de barras y QR */}
                        <div className="flex justify-between items-end mt-4">
                          <div className="text-base text-left">
                            SKU: {barcode}
                          </div>
                          <div className="flex items-center gap-2">
                            <img 
                              src={qrUrl}
                              alt="QR Code"
                              className="w-16 h-16 rounded bg-white"
                            />
                            <span className="text-xs text-gray-500 text-left">
                              más información<br />del producto
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}; 


=== src/components/Posters/PrintView.tsx ===
import React, { useState } from 'react';
import { ArrowLeft } from 'lucide-react';
import { PosterPreview } from './PosterPreview';
import { useLocation, useNavigate } from 'react-router-dom';

interface Product {
  id: string;
  name: string;
  description: string;
  price: number;
  imageUrl: string;
  category: string;
}

const PAPER_SIZES = [
  { id: 'a3', name: 'A3', width: '297mm', height: '420mm', previewWidth: 595, previewHeight: 842 },
  { id: 'a4', name: 'A4', width: '210mm', height: '297mm', previewWidth: 420, previewHeight: 595 },
  { id: 'letter', name: 'Carta', width: '215.9mm', height: '279.4mm', previewWidth: 432, previewHeight: 559 },
  { id: 'legal', name: 'Oficio', width: '215.9mm', height: '355.6mm', previewWidth: 432, previewHeight: 711 },
  { id: 'tabloid', name: 'Tabloide', width: '279.4mm', height: '431.8mm', previewWidth: 559, previewHeight: 864 },
  { id: 'banderilla', name: 'Banderilla', width: '215.9mm', height: '279.4mm', previewWidth: 432, previewHeight: 559 },
  { id: 'cenefa-1-3', name: 'Cenefa 1/3', width: '215.9mm', height: '93.1mm', previewWidth: 432, previewHeight: 186 },
  { id: 'cenefa-1-6', name: 'Cenefa 1/6', width: '215.9mm', height: '46.6mm', previewWidth: 432, previewHeight: 93 },
];

export const PrintView: React.FC = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { products, promotion } = location.state || { products: [], promotion: undefined };
  const [selectedSize, setSelectedSize] = useState(PAPER_SIZES[1]); // A4 por defecto

  const handleBack = () => {
    navigate('/', { 
      replace: true,
      state: { 
        showPosterEditor: true,
        selectedProducts: products.map((p: Product) => p.id),
        selectedPromotion: promotion
      } 
    });
  };

  return (
    <div className="min-h-screen bg-gray-100 p-8">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <button 
            onClick={handleBack}
            className="flex items-center gap-2 px-4 py-2 text-gray-600 hover:text-gray-900"
          >
            <ArrowLeft className="w-5 h-5" />
            <span>Volver al editor</span>
          </button>
          <div className="flex items-center gap-4">
            <select
              value={selectedSize.id}
              onChange={(e) => {
                const size = PAPER_SIZES.find(s => s.id === e.target.value);
                if (size) setSelectedSize(size);
              }}
              className="block w-48 pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none 
                       focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
            >
              {PAPER_SIZES.map((size) => (
                <option key={size.id} value={size.id}>
                  {size.name} ({size.width} × {size.height})
                </option>
              ))}
            </select>
            <button
              onClick={() => window.print()}
              className="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors"
            >
              Imprimir
            </button>
          </div>
        </div>

        {/* Carteles */}
        <div className="space-y-8 print:space-y-0">
          {products.map((product: Product) => (
            <div key={product.id} className="print:break-after-page mb-8">
              {/* Papel de fondo */}
              <div 
                className="bg-white shadow-lg mx-auto relative"
                style={{ 
                  width: selectedSize.previewWidth,
                  height: selectedSize.previewHeight,
                  padding: '20px',
                }}
              >
                {/* Guías de margen (solo en vista previa) */}
                <div className="absolute inset-0 border-2 border-dashed border-gray-200 m-4 print:hidden" />
                
                {/* Cartel */}
                <div 
                  className="absolute"
                  style={{ 
                    left: '50%',
                    top: '50%',
                    transform: 'translate(-50%, -50%)',
                    maxWidth: '90%',
                    maxHeight: '90%',
                  }}
                >
                  <PosterPreview
                    product={product}
                    promotion={promotion}
                    pricePerUnit={`${product.price * 2}`}
                    points="49"
                    origin="ARGENTINA"
                    barcode="7790895000782"
                  />
                </div>
              </div>
              
              {/* Información del tamaño (solo en vista previa) */}
              <div className="text-center mt-2 text-sm text-gray-500 print:hidden">
                {selectedSize.name} ({selectedSize.width} × {selectedSize.height})
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Estilos de impresión */}
      <style>
        {`
          @media print {
            @page {
              size: ${selectedSize.width} ${selectedSize.height};
              margin: 0;
            }
            body {
              margin: 0;
              padding: 0;
            }
            .print\\:break-after-page {
              break-after: page;
            }
          }
        `}
      </style>
    </div>
  );
}; 


=== src/components/Posters/ProductSelect.tsx ===
import React, { useState, useRef, useEffect } from 'react';
import { ChevronDown, Search } from 'lucide-react';
import Select from 'react-select';

interface Product {
  id: string;
  name: string;
  description: string;
  price: number;
  imageUrl: string;
  category: string;
}

interface ProductSelectProps {
  value: string[];
  onChange: (value: string[]) => void;
  products: Product[];
}

interface ProductOption {
  value: string;
  label: string;
  price: number;
  category: string;
}

// Función para transformar un producto en una opción del selector
const mapProductToOption = (product: Product): ProductOption => ({
  value: product.id,
  label: product.name,
  price: product.price,
  category: product.category
});

export const ProductSelect: React.FC<ProductSelectProps> = ({
  value,
  onChange,
  products,
  ...props
}) => {
  // Transformar productos a opciones
  const options = products.map(mapProductToOption);

  // Personalizar el renderizado de cada opción
  const customOption = ({ label, price, category }: ProductOption) => (
    <div className="flex justify-between items-center py-1">
      <div>
        <div className="font-medium text-gray-900">{label}</div>
        <div className="text-sm text-gray-600">{category}</div>
      </div>
      <div className="text-sm font-medium text-gray-900">
        ${price.toLocaleString('es-AR')}
      </div>
    </div>
  );

  return (
    <Select
      isMulti
      options={options}
      value={options.filter(option => value.includes(option.value))}
      onChange={(selected) => {
        onChange(selected ? selected.map(option => option.value) : []);
      }}
      formatOptionLabel={customOption}
      styles={{
        control: (base) => ({
          ...base,
          backgroundColor: 'white',
        }),
        option: (base, state) => ({
          ...base,
          backgroundColor: state.isFocused ? '#f3f4f6' : 'white',
          color: 'black',
          '&:hover': {
            backgroundColor: '#f3f4f6'
          }
        }),
        multiValue: (base) => ({
          ...base,
          backgroundColor: '#f3f4f6'
        }),
        multiValueLabel: (base) => ({
          ...base,
          color: 'black'
        }),
        menu: (base) => ({
          ...base,
          backgroundColor: 'white'
        })
      }}
      {...props}
    />
  );
}; 


=== src/components/Posters/ProductSelector.tsx ===
import { useState } from 'react';
import { products, productCategories, brands } from '../../data/products';

interface ProductSelectorProps {
  onSelectProduct: (product: Product) => void;
}

export function ProductSelector({ onSelectProduct }: ProductSelectorProps) {
  const [selectedCategory, setSelectedCategory] = useState<string>('');
  const [selectedBrand, setSelectedBrand] = useState<string>('');
  
  const filteredProducts = products.filter(product => {
    if (selectedCategory && product.subCategory !== selectedCategory) return false;
    if (selectedBrand && product.brand !== selectedBrand) return false;
    return true;
  });

  return (
    <div className="p-4">
      <div className="flex gap-4 mb-4">
        <select 
          className="p-2 border rounded"
          onChange={(e) => setSelectedCategory(e.target.value)}
          value={selectedCategory}
        >
          <option value="">Todas las categorías</option>
          {productCategories.map(cat => (
            <option key={cat} value={cat}>{cat}</option>
          ))}
        </select>

        <select
          className="p-2 border rounded"
          onChange={(e) => setSelectedBrand(e.target.value)}
          value={selectedBrand}
        >
          <option value="">Todas las marcas</option>
          {brands.map(brand => (
            <option key={brand} value={brand}>{brand}</option>
          ))}
        </select>
      </div>

      <div className="grid grid-cols-3 gap-4">
        {filteredProducts.map(product => (
          <div 
            key={product.id}
            onClick={() => onSelectProduct(product)}
            className="p-4 border rounded cursor-pointer hover:bg-gray-50"
          >
            <img 
              src={product.image} 
              alt={product.name}
              className="w-full h-40 object-contain mb-2"
            />
            <h3 className="font-medium">{product.name}</h3>
            <p className="text-sm text-gray-500">{product.brand}</p>
            <p className="text-sm text-gray-500">{product.volume}</p>
          </div>
        ))}
      </div>
    </div>
  );
} 


=== src/components/Posters/PromoTypeSelect.tsx ===
import React, { useState, useRef, useEffect } from 'react';
import { ChevronDown } from 'lucide-react';

export type PromoType = 'Productos' | 'Todos los productos' | 'Medios de pago' | 'Financieras';

interface PromoTypeSelectProps {
  value: PromoType | '';
  onChange: (value: PromoType) => void;
}

const PROMO_TYPES: PromoType[] = [
  'Productos',
  'Todos los productos',
  'Medios de pago',
  'Financieras'
];

export const PromoTypeSelect: React.FC<PromoTypeSelectProps> = ({ value, onChange }) => {
  const [isOpen, setIsOpen] = useState(false);
  const ref = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (ref.current && !ref.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  return (
    <div className="relative" ref={ref}>
      <button
        type="button"
        onClick={() => setIsOpen(!isOpen)}
        className="w-full border border-gray-300 rounded-md px-3 py-2 bg-white text-left flex items-center justify-between
                 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
      >
        <span className={value ? '' : 'text-gray-500'}>
          {value || 'Seleccionar tipo de promoción...'}
        </span>
        <ChevronDown className={`w-5 h-5 text-gray-400 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
      </button>

      {isOpen && (
        <div className="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg">
          <ul className="py-1 max-h-60 overflow-auto">
            {PROMO_TYPES.map(type => (
              <li key={type}>
                <button
                  type="button"
                  onClick={() => {
                    onChange(type);
                    setIsOpen(false);
                  }}
                  className={`w-full px-3 py-2 text-left hover:bg-gray-100
                            ${value === type ? 'bg-blue-50' : ''}`}
                >
                  {type}
                </button>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}; 


=== src/components/Posters/PromotionSelect.tsx ===
import React, { useState, useRef, useEffect } from 'react';
import { ChevronDown } from 'lucide-react';

interface Promotion {
  id: string;
  title: string;
  description: string;
  discount: string;
  imageUrl: string;
}

interface PromotionSelectProps {
  value: string;
  onChange: (value: string) => void;
  promotions: Promotion[];
}

export const PromotionSelect: React.FC<PromotionSelectProps> = ({ value, onChange, promotions }) => {
  const [isOpen, setIsOpen] = useState(false);
  const ref = useRef<HTMLDivElement>(null);

  const selectedPromotion = promotions.find(p => p.id === value);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (ref.current && !ref.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  return (
    <div className="relative" ref={ref}>
      <button
        type="button"
        onClick={() => setIsOpen(!isOpen)}
        className="w-full border border-gray-300 rounded-md px-3 py-2 bg-white text-left flex items-center justify-between
                 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
      >
        <div className="flex items-center gap-3">
          {selectedPromotion ? (
            <>
              <img 
                src={selectedPromotion.imageUrl} 
                alt={selectedPromotion.title}
                className="w-10 h-10 object-cover rounded"
              />
              <div className="flex flex-col">
                <span className="font-medium">{selectedPromotion.title}</span>
                <span className="text-sm text-gray-500">{selectedPromotion.discount}</span>
              </div>
            </>
          ) : (
            <span className="text-gray-500">Seleccionar promoción...</span>
          )}
        </div>
        <ChevronDown className={`w-5 h-5 text-gray-400 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
      </button>

      {isOpen && (
        <div className="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg">
          <ul className="py-1 max-h-[300px] overflow-auto">
            {promotions.map(promotion => (
              <li key={promotion.id}>
                <button
                  type="button"
                  onClick={() => {
                    onChange(promotion.id);
                    setIsOpen(false);
                  }}
                  className={`w-full px-3 py-2 text-left hover:bg-gray-100 flex items-center gap-3
                            ${value === promotion.id ? 'bg-blue-50' : ''}`}
                >
                  <img 
                    src={promotion.imageUrl} 
                    alt={promotion.title}
                    className="w-10 h-10 object-cover rounded"
                  />
                  <div className="flex flex-col">
                    <span className="font-medium">{promotion.title}</span>
                    <span className="text-sm text-gray-500">{promotion.description}</span>
                  </div>
                </button>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}; 


=== src/components/Posters/RegionSelect.tsx ===
import React from 'react';
import Select from 'react-select';

interface Region {
  id: string;
  name: string;
}

interface RegionSelectProps {
  value: string[];
  onChange: (values: string[]) => void;
  regions: { id: string; name: string; }[];
  isMulti?: boolean;
  className?: string;
}

export const RegionSelect: React.FC<RegionSelectProps> = ({
  value,
  onChange,
  regions,
  isMulti = false,
  className
}) => {
  return (
    <Select
      isMulti={isMulti}
      value={regions.filter(r => value.includes(r.id)).map(r => ({
        value: r.id,
        label: r.name
      }))}
      onChange={(newValue: any) => {
        const selectedValues = newValue ? (Array.isArray(newValue) 
          ? newValue.map(v => v.value)
          : [newValue.value]) 
        : [];
        onChange(selectedValues);
      }}
      options={regions.map(r => ({
        value: r.id,
        label: r.name
      }))}
      classNames={{
        control: () => className,
        menu: () => "bg-white rounded-lg shadow-lg",
        option: () => "px-3 py-2 hover:bg-gray-100 cursor-pointer"
      }}
    />
  );
}; 


=== src/components/Posters/SendingModal.tsx ===
import React, { useState, useEffect } from 'react';
import { Package, Send, Check } from 'lucide-react';

interface SendingModalProps {
  isOpen: boolean;
  onClose: () => void;
  locations: { id: string; name: string }[];
  productsCount: number;
}

export const SendingModal: React.FC<SendingModalProps> = ({
  isOpen,
  onClose,
  locations,
  productsCount
}) => {
  const [step, setStep] = useState(0);
  
  useEffect(() => {
    if (isOpen) {
      setStep(0);
      const timer1 = setTimeout(() => setStep(1), 1500); // Empacando
      const timer2 = setTimeout(() => setStep(2), 3000); // Enviando
      const timer3 = setTimeout(() => {
        setStep(3);  // Completado
        setTimeout(onClose, 1000);
      }, 4500);

      return () => {
        clearTimeout(timer1);
        clearTimeout(timer2);
        clearTimeout(timer3);
      };
    }
  }, [isOpen]);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-8 max-w-md w-full space-y-6">
        <div className="flex flex-col items-center justify-center space-y-4">
          {/* Animación de empaque y envío */}
          <div className="relative h-24 w-24">
            {step === 0 && (
              <div className="absolute inset-0 flex items-center justify-center animate-bounce">
                <Package className="w-12 h-12 text-indigo-600" />
              </div>
            )}
            {step === 1 && (
              <div className="absolute inset-0 flex items-center justify-center animate-pulse">
                <Package className="w-12 h-12 text-indigo-600" />
              </div>
            )}
            {step === 2 && (
              <div className="absolute inset-0 flex items-center justify-center animate-ping">
                <Send className="w-12 h-12 text-indigo-600" />
              </div>
            )}
            {step === 3 && (
              <div className="absolute inset-0 flex items-center justify-center animate-bounce">
                <Check className="w-12 h-12 text-green-500" />
              </div>
            )}
          </div>

          {/* Texto de estado */}
          <h3 className="text-xl font-medium text-gray-900">
            {step === 0 && 'Preparando envío...'}
            {step === 1 && 'Empacando carteles...'}
            {step === 2 && 'Enviando a sucursales...'}
            {step === 3 && '¡Envío completado!'}
          </h3>

          {/* Detalles */}
          <div className="text-sm text-gray-500 text-center">
            <p>{productsCount} carteles serán enviados a:</p>
            <ul className="mt-2 space-y-1">
              {locations.map(location => (
                <li key={location.id}>{location.name}</li>
              ))}
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
}; 


=== src/components/Products/AddProductModal.tsx ===
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, FileText, Upload, Smartphone, Plus, ArrowLeft } from 'lucide-react';
import { ManualForm } from './ManualForm';
import { Product } from '../../types/product';
import { BulkUpload } from './BulkUpload';
import { MobileScanner } from './MobileScanner';

interface AddProductModalProps {
  isOpen: boolean;
  onClose: () => void;
  onAddProduct: (product: Product | Product[]) => void;
}

interface MethodProps {
  onSubmit: (product: Product) => void;
  onBack: () => void;
}

interface BulkMethodProps {
  onSubmit: (products: Product[]) => void;
  onBack: () => void;
}

type AddMethod = 'manual' | 'bulk' | 'mobile' | null;

const AddProductModal: React.FC<AddProductModalProps> = ({ isOpen, onClose, onAddProduct }) => {
  const [selectedMethod, setSelectedMethod] = useState<AddMethod>(null);

  const methods = [
    {
      id: 'manual',
      name: 'Agregar Manualmente',
      description: 'Ingresa los datos del producto uno por uno',
      icon: Plus,
    },
    {
      id: 'bulk',
      name: 'Importar CSV',
      description: 'Sube un archivo CSV con múltiples productos',
      icon: FileText,
    },
    {
      id: 'mobile',
      name: 'Usar Dispositivo Móvil',
      description: 'Escanea productos usando la cámara',
      icon: Smartphone,
    },
  ];

  const renderMethodContent = () => {
    switch (selectedMethod) {
      case 'manual':
        return <ManualForm onSubmit={(product) => onAddProduct(product)} onBack={() => setSelectedMethod(null)} />;
      case 'bulk':
        return <BulkUpload onSubmit={(products) => onAddProduct(products)} onBack={() => setSelectedMethod(null)} />;
      case 'mobile':
        return <MobileScanner onSubmit={(product) => onAddProduct(product)} onBack={() => setSelectedMethod(null)} />;
      default:
        return (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {methods.map((method) => (
              <motion.button
                key={method.id}
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                onClick={() => setSelectedMethod(method.id as AddMethod)}
                className="p-6 bg-white/5 rounded-xl border border-white/10 hover:border-white/20 
                         text-left transition-colors"
              >
                <method.icon className="w-8 h-8 text-purple-400 mb-4" />
                <h3 className="text-lg font-medium text-white mb-2">{method.name}</h3>
                <p className="text-white/60 text-sm">{method.description}</p>
              </motion.button>
            ))}
          </div>
        );
    }
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={onClose}
            className="absolute inset-0 bg-black/60 backdrop-blur-sm"
          />
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
            className="relative bg-slate-900 rounded-2xl shadow-xl w-full max-w-4xl 
                     border border-white/10 overflow-hidden"
            onClick={e => e.stopPropagation()}
          >
            <div className="p-6 border-b border-white/10 flex justify-between items-center">
              <h2 className="text-xl font-medium text-white">
                {selectedMethod ? methods.find(m => m.id === selectedMethod)?.name : 'Agregar Producto'}
              </h2>
              <button
                onClick={onClose}
                className="text-white/60 hover:text-white transition-colors"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
            <div className="p-6">
              {renderMethodContent()}
            </div>
          </motion.div>
        </div>
      )}
    </AnimatePresence>
  );
};

export default AddProductModal; 


=== src/components/Products/BulkUpload.tsx ===
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { ArrowLeft, Upload, Download, AlertCircle, CheckCircle } from 'lucide-react';
import { Product } from '../../types/product';
import Papa, { ParseResult, ParseError } from 'papaparse';

interface BulkUploadProps {
  onSubmit: (products: Product[]) => void;
  onBack: () => void;
}

interface CSVRow {
  SKU: string;
  Nombre: string;
  Precio: string;
  Categoria: string;
  'URL de Imagen': string;
}

const sampleData = [
  {
    sku: 'PRD-001',
    name: 'Producto Ejemplo 1',
    price: '999.99',
    category: 'Categoría 1',
    imageUrl: 'https://ejemplo.com/imagen1.jpg'
  },
  {
    sku: 'PRD-002',
    name: 'Producto Ejemplo 2',
    price: '1999.99',
    category: 'Categoría 2',
    imageUrl: 'https://ejemplo.com/imagen2.jpg'
  }
];

export const BulkUpload: React.FC<BulkUploadProps> = ({ onSubmit, onBack }) => {
  const [file, setFile] = useState<File | null>(null);
  const [error, setError] = useState<string>('');
  const [preview, setPreview] = useState<CSVRow[]>([]);
  const [success, setSuccess] = useState<string>('');

  const downloadSampleCSV = () => {
    const csv = Papa.unparse(sampleData);
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', 'productos_ejemplo.csv');
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      if (file.type !== 'text/csv') {
        setError('Por favor, selecciona un archivo CSV válido');
        return;
      }
      setFile(file);
      setError('');

      Papa.parse<CSVRow>(file, {
        header: true,
        complete: (results: ParseResult<CSVRow>) => {
          setPreview(results.data.slice(0, 3));
          if (results.errors.length > 0) {
            setError('El archivo contiene errores de formato');
          }
        },
        error: (error: ParseError) => {
          setError('Error al leer el archivo: ' + error.message);
        }
      });
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!file) return;

    try {
      const results = await new Promise<CSVRow[]>((resolve, reject) => {
        Papa.parse(file, {
          header: true,
          skipEmptyLines: true,
          transformHeader: (header: string) => {
            const headerMap: { [key: string]: string } = {
              'SKU': 'SKU',
              'Nombre': 'Nombre',
              'Precio': 'Precio',
              'Categoria': 'Categoria',
              'URL de Imagen': 'URL de Imagen'
            };
            return headerMap[header] || header;
          },
          complete: (results: Papa.ParseResult<CSVRow>) => {
            if (results.errors.length > 0) {
              reject('El archivo contiene errores de formato');
              return;
            }
            
            const validData = results.data.filter(row => 
              row.SKU && 
              row.Nombre && 
              row.Precio && 
              row.Categoria && 
              row['URL de Imagen']
            );

            if (validData.length === 0) {
              reject('No se encontraron datos válidos en el archivo');
              return;
            }

            resolve(validData);
          },
          error: (error: Papa.ParseError) => reject(error.message)
        });
      });

      const products: Product[] = results.map((row, index) => ({
        id: Date.now().toString() + index,
        sku: row.SKU.trim(),
        name: row.Nombre.trim(),
        price: parseFloat(row.Precio.replace(/[^\d.-]/g, '')),
        category: row.Categoria.trim(),
        imageUrl: row['URL de Imagen'].trim()
      }));

      if (products.length > 0) {
        setSuccess(`Se procesaron ${products.length} productos`);
        onSubmit(products);
        setTimeout(() => {
          setSuccess('');
          onBack();
        }, 3000);
      } else {
        setError('No se pudieron procesar los productos del archivo');
      }
    } catch (error) {
      setError(error as string);
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center gap-2 text-white/60">
        <button onClick={onBack} className="hover:text-white">
          <ArrowLeft className="w-5 h-5" />
        </button>
        <span>Volver a opciones</span>
      </div>

      <div className="bg-white/5 rounded-lg p-6 border border-white/10">
        <h3 className="text-lg font-medium text-white mb-4">Importar productos desde CSV</h3>
        
        <div className="space-y-4">
          <div className="flex items-center gap-4">
            <button
              onClick={downloadSampleCSV}
              className="flex items-center gap-2 px-4 py-2 bg-white/10 text-white rounded-lg 
                       hover:bg-white/20 transition-colors"
            >
              <Download className="w-4 h-4" />
              Descargar CSV de ejemplo
            </button>
            <span className="text-white/60 text-sm">
              Usa este archivo como plantilla
            </span>
          </div>

          <div className="flex items-center justify-center w-full">
            <label className="w-full flex flex-col items-center px-4 py-6 bg-white/5 
                            border border-white/10 border-dashed rounded-lg cursor-pointer 
                            hover:bg-white/10">
              <Upload className="w-8 h-8 text-white/60 mb-2" />
              <span className="text-sm text-white/60">
                {file ? file.name : 'Seleccionar archivo CSV'}
              </span>
              <input
                type="file"
                accept=".csv"
                className="hidden"
                onChange={handleFileChange}
              />
            </label>
          </div>

          {error && (
            <div className="flex items-center gap-2 text-red-400 bg-red-400/10 p-4 rounded-lg">
              <AlertCircle className="w-5 h-5" />
              <span>{error}</span>
            </div>
          )}

          {success && (
            <div className="flex items-center gap-2 text-emerald-400 bg-emerald-500/10 p-4 rounded-lg">
              <CheckCircle className="w-5 h-5" />
              <span>{success}</span>
            </div>
          )}

          {preview.length > 0 && (
            <div className="space-y-2">
              <h4 className="text-sm font-medium text-white/80">Vista previa:</h4>
              <div className="bg-white/5 rounded-lg overflow-hidden">
                <table className="w-full text-sm text-white/60">
                  <thead className="bg-white/5 text-white/80">
                    <tr>
                      {Object.keys(preview[0]).map(key => (
                        <th key={key} className="px-4 py-2 text-left">{key}</th>
                      ))}
                    </tr>
                  </thead>
                  <tbody>
                    {preview.map((row, i) => (
                      <tr key={i} className="border-t border-white/5">
                        {Object.values(row).map((value: any, j) => (
                          <td key={j} className="px-4 py-2">{value}</td>
                        ))}
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
              <p className="text-sm text-white/40">
                Mostrando {preview.length} de {file ? 'los primeros registros' : '0 registros'}
              </p>
            </div>
          )}
        </div>

        <div className="flex justify-end gap-4 mt-6">
          <button
            type="button"
            onClick={onBack}
            className="px-4 py-2 text-white/60 hover:text-white"
          >
            Cancelar
          </button>
          <motion.button
            onClick={handleSubmit}
            disabled={!file}
            whileHover={{ scale: file ? 1.02 : 1 }}
            whileTap={{ scale: file ? 0.98 : 1 }}
            className={`px-6 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500/50
                     ${file 
                       ? 'bg-gradient-to-r from-purple-500 to-indigo-500 text-white hover:from-purple-600 hover:to-indigo-600' 
                       : 'bg-white/5 text-white/40 cursor-not-allowed'}`}
          >
            Importar Productos
          </motion.button>
        </div>
      </div>

      <div className="text-sm text-white/60 space-y-2">
        <p>El archivo CSV debe contener las siguientes columnas:</p>
        <ul className="list-disc list-inside space-y-1">
          <li>SKU</li>
          <li>Nombre</li>
          <li>Precio</li>
          <li>Categoria</li>
          <li>URL de Imagen</li>
        </ul>
      </div>
    </div>
  );
}; 


=== src/components/Products/ManualForm.tsx ===
import React, { useState, useCallback } from 'react';
import { motion } from 'framer-motion';
import { ArrowLeft, Upload, Link as LinkIcon } from 'lucide-react';
import { products } from '../../data/products';

interface ManualFormProps {
  onSubmit: (product: any) => void;
  onBack: () => void;
}

interface FormData {
  sku: string;
  name: string;
  price: string;
  category: string;
  newCategory: string;
  imageUrl: string;
  imageFile: File | null;
  imageSource: 'url' | 'file';
}

export function ManualForm({ onSubmit, onBack }: ManualFormProps) {
  const [formData, setFormData] = useState<FormData>({
    sku: '',
    name: '',
    price: '',
    category: '',
    newCategory: '',
    imageUrl: '',
    imageFile: null,
    imageSource: 'url'
  });

  // Obtener categorías únicas existentes
  const existingCategories = Array.from(new Set(products.map(p => p.category))).sort();

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleImageFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setFormData(prev => ({ ...prev, imageFile: file }));
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    let finalImageUrl = formData.imageUrl;
    if (formData.imageSource === 'file' && formData.imageFile) {
      finalImageUrl = URL.createObjectURL(formData.imageFile);
    }

    const newProduct = {
      id: Date.now().toString(),
      sku: formData.sku,
      name: formData.name,
      price: parseFloat(formData.price.toString()),
      category: formData.category === 'new' ? formData.newCategory : formData.category,
      imageUrl: finalImageUrl
    };

    onSubmit(newProduct);
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center gap-2 text-white/60">
        <button onClick={onBack} className="hover:text-white">
          <ArrowLeft className="w-5 h-5" />
        </button>
        <span>Volver a opciones</span>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* SKU y Nombre */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-white/80 mb-2">SKU</label>
            <input
              type="text"
              name="sku"
              value={formData.sku}
              onChange={handleInputChange}
              required
              className="w-full bg-white/5 border border-white/10 rounded-lg px-4 py-2.5 
                       text-white placeholder-white/30 focus:outline-none focus:ring-2 
                       focus:ring-purple-500/50 focus:border-transparent"
              placeholder="Ej: PRD-001"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-white/80 mb-2">Nombre del Producto</label>
            <input
              type="text"
              name="name"
              value={formData.name}
              onChange={handleInputChange}
              required
              className="w-full bg-white/5 border border-white/10 rounded-lg px-4 py-2.5 
                       text-white placeholder-white/30 focus:outline-none focus:ring-2 
                       focus:ring-purple-500/50 focus:border-transparent"
              placeholder="Nombre del producto"
            />
          </div>
        </div>

        {/* Precio y Categoría */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-white/80 mb-2">Precio</label>
            <input
              type="number"
              name="price"
              value={formData.price}
              onChange={handleInputChange}
              required
              step="0.01"
              min="0"
              className="w-full bg-white/5 border border-white/10 rounded-lg px-4 py-2.5 
                       text-white placeholder-white/30 focus:outline-none focus:ring-2 
                       focus:ring-purple-500/50 focus:border-transparent"
              placeholder="0.00"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-white/80 mb-2">Categoría</label>
            <select
              name="category"
              value={formData.category}
              onChange={handleInputChange}
              required
              className="w-full bg-white/5 border border-white/10 rounded-lg px-4 py-2.5 
                       text-white focus:outline-none focus:ring-2 
                       focus:ring-purple-500/50 focus:border-transparent"
            >
              <option value="">Seleccionar categoría</option>
              {existingCategories.map(cat => (
                <option key={cat} value={cat}>{cat}</option>
              ))}
              <option value="new">+ Agregar nueva categoría</option>
            </select>
          </div>
        </div>

        {/* Nueva categoría si se selecciona */}
        {formData.category === 'new' && (
          <div>
            <label className="block text-sm font-medium text-white/80 mb-2">Nueva Categoría</label>
            <input
              type="text"
              name="newCategory"
              value={formData.newCategory}
              onChange={handleInputChange}
              required
              className="w-full bg-white/5 border border-white/10 rounded-lg px-4 py-2.5 
                       text-white placeholder-white/30 focus:outline-none focus:ring-2 
                       focus:ring-purple-500/50 focus:border-transparent"
              placeholder="Nombre de la nueva categoría"
            />
          </div>
        )}

        {/* Imagen */}
        <div className="space-y-4">
          <label className="block text-sm font-medium text-white/80">Imagen del Producto</label>
          <div className="flex gap-4">
            <button
              type="button"
              onClick={() => setFormData(prev => ({ ...prev, imageSource: 'url' }))}
              className={`flex-1 p-4 rounded-lg border ${
                formData.imageSource === 'url'
                  ? 'border-purple-500 bg-purple-500/10'
                  : 'border-white/10 bg-white/5'
              } transition-colors`}
            >
              <LinkIcon className="w-6 h-6 text-white mx-auto mb-2" />
              <p className="text-sm text-white">URL de imagen</p>
            </button>
            <button
              type="button"
              onClick={() => setFormData(prev => ({ ...prev, imageSource: 'file' }))}
              className={`flex-1 p-4 rounded-lg border ${
                formData.imageSource === 'file'
                  ? 'border-purple-500 bg-purple-500/10'
                  : 'border-white/10 bg-white/5'
              } transition-colors`}
            >
              <Upload className="w-6 h-6 text-white mx-auto mb-2" />
              <p className="text-sm text-white">Subir imagen</p>
            </button>
          </div>

          {formData.imageSource === 'url' ? (
            <input
              type="url"
              name="imageUrl"
              value={formData.imageUrl}
              onChange={handleInputChange}
              className="w-full bg-white/5 border border-white/10 rounded-lg px-4 py-2.5 
                       text-white placeholder-white/30 focus:outline-none focus:ring-2 
                       focus:ring-purple-500/50 focus:border-transparent"
              placeholder="https://ejemplo.com/imagen.jpg"
            />
          ) : (
            <div className="flex items-center justify-center w-full">
              <label className="w-full flex flex-col items-center px-4 py-6 bg-white/5 
                              border border-white/10 border-dashed rounded-lg cursor-pointer 
                              hover:bg-white/10">
                <Upload className="w-8 h-8 text-white/60" />
                <span className="mt-2 text-sm text-white/60">
                  {formData.imageFile ? formData.imageFile.name : 'Seleccionar archivo'}
                </span>
                <input
                  type="file"
                  className="hidden"
                  accept="image/*"
                  onChange={handleImageFileChange}
                />
              </label>
            </div>
          )}
        </div>

        {/* Botones */}
        <div className="flex justify-end gap-4">
          <button
            type="button"
            onClick={onBack}
            className="px-4 py-2 text-white/60 hover:text-white"
          >
            Cancelar
          </button>
          <motion.button
            type="submit"
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            className="px-6 py-2 bg-gradient-to-r from-purple-500 to-indigo-500 
                     text-white rounded-lg hover:from-purple-600 hover:to-indigo-600 
                     focus:outline-none focus:ring-2 focus:ring-purple-500/50"
          >
            Guardar Producto
          </motion.button>
        </div>
      </form>
    </div>
  );
} 


=== src/components/Products/MobileScanner.tsx ===
import React from 'react';
import { motion } from 'framer-motion';
import { ArrowLeft, Construction, Smartphone } from 'lucide-react';

interface MobileScannerProps {
  onSubmit: (product: any) => void;
  onBack: () => void;
}

export const MobileScanner: React.FC<MobileScannerProps> = ({ onBack }) => {
  return (
    <div className="space-y-6">
      <div className="flex items-center gap-2 text-white/60">
        <button onClick={onBack} className="hover:text-white">
          <ArrowLeft className="w-5 h-5" />
        </button>
        <span>Volver a opciones</span>
      </div>

      <div className="flex flex-col items-center justify-center p-12 bg-white/5 rounded-lg border border-white/10">
        <motion.div
          animate={{
            rotate: [0, -10, 10, -10, 0],
          }}
          transition={{
            duration: 2,
            repeat: Infinity,
            repeatType: "reverse",
            ease: "easeInOut"
          }}
          className="relative mb-6"
        >
          <Construction className="w-16 h-16 text-yellow-500" />
          <motion.div
            animate={{ scale: [1, 1.2, 1] }}
            transition={{
              duration: 2,
              repeat: Infinity,
              repeatType: "reverse"
            }}
            className="absolute -top-1 -right-1"
          >
            <Smartphone className="w-8 h-8 text-purple-400" />
          </motion.div>
        </motion.div>

        <motion.h3
          animate={{ opacity: [0.5, 1, 0.5] }}
          transition={{
            duration: 2,
            repeat: Infinity,
            repeatType: "reverse"
          }}
          className="text-2xl font-bold text-white mb-4"
        >
          En Construcción
        </motion.h3>

        <p className="text-white/60 text-center max-w-md">
          Estamos trabajando en una funcionalidad increíble que te permitirá 
          escanear y agregar productos usando tu dispositivo móvil. 
          ¡Vuelve pronto!
        </p>

        <div className="mt-8 flex gap-4">
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={onBack}
            className="px-6 py-2 bg-white/10 text-white rounded-lg hover:bg-white/20 
                     transition-colors"
          >
            Volver
          </motion.button>
        </div>
      </div>
    </div>
  );
}; 


=== src/components/Products/ProductDetails.tsx ===
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, Save, Trash2, Upload, Link as LinkIcon } from 'lucide-react';
import { Product } from '../../types/product';

interface ProductDetailsProps {
  product: Product;
  isOpen: boolean;
  onClose: () => void;
  onUpdate: (product: Product) => void;
  onDelete: (id: string) => void;
  categories: string[];
}

export const ProductDetails: React.FC<ProductDetailsProps> = ({
  product,
  isOpen,
  onClose,
  onUpdate,
  onDelete,
  categories
}) => {
  const [formData, setFormData] = useState({
    ...product,
    newCategory: '',
    imageSource: 'url' as 'url' | 'file',
    imageFile: null as File | null
  });
  const [isEditing, setIsEditing] = useState(false);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleImageFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setFormData(prev => ({ 
        ...prev, 
        imageFile: file,
        imageUrl: URL.createObjectURL(file)
      }));
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onUpdate({
      ...formData,
      category: formData.category === 'new' ? formData.newCategory : formData.category,
      price: parseFloat(formData.price.toString())
    });
    setIsEditing(false);
  };

  const handleDelete = () => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este producto?')) {
      onDelete(product.id);
      onClose();
    }
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={onClose}
            className="absolute inset-0 bg-black/60 backdrop-blur-sm"
          />
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
            onClick={e => e.stopPropagation()}
            className="relative bg-slate-900 rounded-2xl shadow-xl w-full max-w-3xl 
                     border border-white/10 overflow-hidden"
          >
            <div className="p-6 border-b border-white/10 flex justify-between items-center">
              <h2 className="text-xl font-medium text-white">
                {isEditing ? 'Editar Producto' : 'Detalles del Producto'}
              </h2>
              <div className="flex items-center gap-4">
                {!isEditing && (
                  <>
                    <motion.button
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      onClick={() => setIsEditing(true)}
                      className="px-4 py-2 bg-white/10 text-white rounded-lg hover:bg-white/20"
                    >
                      Editar
                    </motion.button>
                    <motion.button
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      onClick={handleDelete}
                      className="px-4 py-2 bg-red-500/10 text-red-400 rounded-lg hover:bg-red-500/20"
                    >
                      <Trash2 className="w-5 h-5" />
                    </motion.button>
                  </>
                )}
                <button
                  onClick={onClose}
                  className="text-white/60 hover:text-white transition-colors"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>
            </div>

            <div className="p-6">
              {isEditing ? (
                <form onSubmit={handleSubmit} className="space-y-6">
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-white/80 mb-2">SKU</label>
                      <input
                        type="text"
                        name="sku"
                        value={formData.sku}
                        onChange={handleInputChange}
                        required
                        className="w-full bg-white/5 border border-white/10 rounded-lg px-4 py-2.5 
                                text-white placeholder-white/30 focus:outline-none focus:ring-2 
                                focus:ring-purple-500/50 focus:border-transparent"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-white/80 mb-2">Nombre</label>
                      <input
                        type="text"
                        name="name"
                        value={formData.name}
                        onChange={handleInputChange}
                        required
                        className="w-full bg-white/5 border border-white/10 rounded-lg px-4 py-2.5 
                                text-white placeholder-white/30 focus:outline-none focus:ring-2 
                                focus:ring-purple-500/50 focus:border-transparent"
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-white/80 mb-2">Precio</label>
                      <input
                        type="number"
                        name="price"
                        value={formData.price}
                        onChange={handleInputChange}
                        required
                        step="0.01"
                        min="0"
                        className="w-full bg-white/5 border border-white/10 rounded-lg px-4 py-2.5 
                                text-white placeholder-white/30 focus:outline-none focus:ring-2 
                                focus:ring-purple-500/50 focus:border-transparent"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-white/80 mb-2">Categoría</label>
                      <select
                        name="category"
                        value={formData.category}
                        onChange={handleInputChange}
                        required
                        className="w-full bg-white/5 border border-white/10 rounded-lg px-4 py-2.5 
                                text-white focus:outline-none focus:ring-2 
                                focus:ring-purple-500/50 focus:border-transparent"
                      >
                        {categories.map(cat => (
                          <option key={cat} value={cat}>{cat}</option>
                        ))}
                        <option value="new">+ Agregar nueva categoría</option>
                      </select>
                    </div>
                  </div>

                  {formData.category === 'new' && (
                    <div>
                      <label className="block text-sm font-medium text-white/80 mb-2">
                        Nueva Categoría
                      </label>
                      <input
                        type="text"
                        name="newCategory"
                        value={formData.newCategory}
                        onChange={handleInputChange}
                        required
                        className="w-full bg-white/5 border border-white/10 rounded-lg px-4 py-2.5 
                                text-white placeholder-white/30 focus:outline-none focus:ring-2 
                                focus:ring-purple-500/50 focus:border-transparent"
                      />
                    </div>
                  )}

                  <div className="space-y-4">
                    <label className="block text-sm font-medium text-white/80">Imagen</label>
                    <div className="flex gap-4">
                      <button
                        type="button"
                        onClick={() => setFormData(prev => ({ ...prev, imageSource: 'url' }))}
                        className={`flex-1 p-4 rounded-lg border ${
                          formData.imageSource === 'url'
                            ? 'border-purple-500 bg-purple-500/10'
                            : 'border-white/10 bg-white/5'
                        } transition-colors`}
                      >
                        <LinkIcon className="w-6 h-6 text-white mx-auto mb-2" />
                        <p className="text-sm text-white">URL de imagen</p>
                      </button>
                      <button
                        type="button"
                        onClick={() => setFormData(prev => ({ ...prev, imageSource: 'file' }))}
                        className={`flex-1 p-4 rounded-lg border ${
                          formData.imageSource === 'file'
                            ? 'border-purple-500 bg-purple-500/10'
                            : 'border-white/10 bg-white/5'
                        } transition-colors`}
                      >
                        <Upload className="w-6 h-6 text-white mx-auto mb-2" />
                        <p className="text-sm text-white">Subir imagen</p>
                      </button>
                    </div>

                    {formData.imageSource === 'url' ? (
                      <input
                        type="url"
                        name="imageUrl"
                        value={formData.imageUrl}
                        onChange={handleInputChange}
                        className="w-full bg-white/5 border border-white/10 rounded-lg px-4 py-2.5 
                                text-white placeholder-white/30 focus:outline-none focus:ring-2 
                                focus:ring-purple-500/50 focus:border-transparent"
                      />
                    ) : (
                      <div className="flex items-center justify-center w-full">
                        <label className="w-full flex flex-col items-center px-4 py-6 bg-white/5 
                                      border border-white/10 border-dashed rounded-lg cursor-pointer 
                                      hover:bg-white/10">
                          <Upload className="w-8 h-8 text-white/60" />
                          <span className="mt-2 text-sm text-white/60">
                            {formData.imageFile ? formData.imageFile.name : 'Seleccionar archivo'}
                          </span>
                          <input
                            type="file"
                            className="hidden"
                            accept="image/*"
                            onChange={handleImageFileChange}
                          />
                        </label>
                      </div>
                    )}
                  </div>

                  <div className="flex justify-end gap-4">
                    <button
                      type="button"
                      onClick={() => setIsEditing(false)}
                      className="px-4 py-2 text-white/60 hover:text-white"
                    >
                      Cancelar
                    </button>
                    <motion.button
                      type="submit"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      className="flex items-center gap-2 px-6 py-2 bg-gradient-to-r from-purple-500 
                              to-indigo-500 text-white rounded-lg hover:from-purple-600 
                              hover:to-indigo-600"
                    >
                      <Save className="w-4 h-4" />
                      Guardar Cambios
                    </motion.button>
                  </div>
                </form>
              ) : (
                <div className="space-y-6">
                  <div className="aspect-video relative overflow-hidden rounded-lg">
                    <img
                      src={product.imageUrl}
                      alt={product.name}
                      className="w-full h-full object-cover"
                    />
                  </div>

                  <div className="grid grid-cols-2 gap-6">
                    <div>
                      <h3 className="text-sm font-medium text-white/60 mb-1">SKU</h3>
                      <p className="text-white">{product.sku}</p>
                    </div>
                    <div>
                      <h3 className="text-sm font-medium text-white/60 mb-1">Nombre</h3>
                      <p className="text-white">{product.name}</p>
                    </div>
                    <div>
                      <h3 className="text-sm font-medium text-white/60 mb-1">Precio</h3>
                      <p className="text-white">${product.price.toFixed(2)}</p>
                    </div>
                    <div>
                      <h3 className="text-sm font-medium text-white/60 mb-1">Categoría</h3>
                      <p className="text-white">{product.category}</p>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </motion.div>
        </div>
      )}
    </AnimatePresence>
  );
}; 


=== src/components/Products/ProductSelect.tsx ===
import React from 'react';
import Select from 'react-select';
import { Product } from '../../types/product';
import { Check } from 'lucide-react';

interface ProductSelectProps {
  value: string[];
  onChange: (value: any) => void;
  products: Product[];
  className?: string;
}

export const ProductSelect: React.FC<ProductSelectProps> = ({ 
  value, 
  onChange, 
  products,
  className 
}) => {
  console.log('ProductSelect recibió:', products);

  // Transformar los productos para el Select
  const options = products.map(p => ({ 
    value: p.id, 
    label: `${p.name} - ${p.category}`  // Agregar categoría para mejor identificación
  }));

  // Transformar el value actual para el Select
  const selectedValues = value.map(id => 
    options.find(opt => opt.value === id)
  ).filter(Boolean);

  return (
    <Select
      isMulti
      options={options}
      value={selectedValues}
      onChange={(newValue) => {
        const selectedIds = newValue ? newValue.map(v => v.value) : [];
        onChange(selectedIds);
      }}
      menuPlacement="top"
      maxMenuHeight={200}
      classNames={{
        control: () => className,
        menu: () => "bg-white rounded-lg shadow-lg",
        option: () => "px-3 py-2 hover:bg-gray-100 cursor-pointer"
      }}
      styles={{
        menu: (base) => ({
          ...base,
          zIndex: 40  // Aumentar el z-index para que esté por encima del cartel
        }),
        container: (base) => ({
          ...base,
          zIndex: 40  // Aumentar el z-index para que esté por encima del cartel
        })
      }}
      components={{
        Option: ({ children, isSelected, ...props }) => (
          <div
            {...props.innerProps}
            className={`flex items-center gap-2 px-3 py-2 hover:bg-gray-100 cursor-pointer ${
              isSelected ? 'bg-indigo-50' : ''
            }`}
          >
            <div className={`w-4 h-4 border rounded flex items-center justify-center ${
              isSelected ? 'bg-indigo-600 border-indigo-600' : 'border-gray-300'
            }`}>
              {isSelected && <Check className="w-3 h-3 text-white" />}
            </div>
            {children}
          </div>
        )
      }}
    />
  );
}; 


=== src/components/Products/ProductSelectorModal.tsx ===
import React from 'react';
import { X } from 'lucide-react';
import { Product } from '../../types/product';

interface ProductSelectorModalProps {
  isOpen: boolean;
  onClose: () => void;
  products: Product[];
  selectedProducts: string[];
  onSelectProduct: (productId: string) => void;
  category?: string;
}

export const ProductSelectorModal: React.FC<ProductSelectorModalProps> = ({
  isOpen,
  onClose,
  products,
  selectedProducts,
  onSelectProduct,
  category
}) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center">
      <div className="bg-white/10 backdrop-blur-md rounded-xl shadow-2xl w-[800px] max-h-[80vh] border border-white/20">
        <div className="p-6 flex justify-between items-center border-b border-white/10">
          <h2 className="text-xl font-medium text-white">
            Seleccionar Productos {category ? `- ${category}` : ''}
          </h2>
          <button
            onClick={onClose}
            className="text-white/60 hover:text-white"
          >
            <X className="w-5 h-5" />
          </button>
        </div>
        
        <div className="p-6 overflow-y-auto max-h-[60vh]">
          <div className="grid grid-cols-2 gap-4">
            {products.map(product => (
              <div
                key={product.id}
                className={`flex items-center gap-4 p-4 rounded-lg border cursor-pointer transition-colors
                  ${selectedProducts.includes(product.id)
                    ? 'bg-white/20 border-white/30'
                    : 'bg-white/5 border-white/10 hover:bg-white/10'
                  }`}
                onClick={() => onSelectProduct(product.id)}
              >
                <div className="w-16 h-16 bg-white/5 rounded-lg overflow-hidden">
                  <img
                    src={product.imageUrl}
                    alt={product.name}
                    className="w-full h-full object-cover"
                  />
                </div>
                <div className="flex-1">
                  <h3 className="text-white font-medium">{product.name}</h3>
                  <p className="text-white/60 text-sm">{product.description}</p>
                  <p className="text-white/80 mt-1">${product.price.toLocaleString('es-AR')}</p>
                </div>
                <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center
                  ${selectedProducts.includes(product.id)
                    ? 'border-white bg-white/20'
                    : 'border-white/30'
                  }`}
                >
                  {selectedProducts.includes(product.id) && (
                    <div className="w-3 h-3 bg-white rounded-full" />
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}; 


=== src/components/Products/Products.tsx ===
import React, { useState, useCallback, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ArrowLeft, Search, Filter, Plus, X, CheckSquare, Square, Trash2, FileText, CheckCircle } from 'lucide-react';
import { products } from '../../data/products';
import AddProductModal from './AddProductModal';
import { Product } from '../../types/product';
import { ProductDetails } from './ProductDetails';

interface ProductsProps {
  onBack: () => void;
}

// Función para normalizar texto (eliminar tildes y caracteres especiales)
const normalizeText = (text: string): string => {
  return text.normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "") // Eliminar tildes
    .replace(/[^a-zA-Z0-9\s-_.,]/g, "") // Solo permitir alfanuméricos, espacios y algunos símbolos
    .trim();
};

export default function Products({ onBack }: ProductsProps) {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string>('');
  const [showCategoryFilter, setShowCategoryFilter] = useState(false);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);
  const [selectedProducts, setSelectedProducts] = useState<Set<string>>(new Set());
  const [localProducts, setLocalProducts] = useState<Product[]>(products);
  const [recentlyAdded, setRecentlyAdded] = useState<Set<string>>(new Set());

  // Obtener categorías únicas
  const categories = useMemo(() => {
    const uniqueCategories = new Set(localProducts.map(product => product.category));
    return Array.from(uniqueCategories).sort();
  }, [localProducts]);

  // Función de filtrado combinada
  const filteredProducts = useMemo(() => {
    return localProducts.filter(product => {
      const matchesSearch = searchTerm === '' || 
        product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        product.sku.toLowerCase().includes(searchTerm.toLowerCase()) ||
        product.category.toLowerCase().includes(searchTerm.toLowerCase());

      const matchesCategory = selectedCategory === '' || product.category === selectedCategory;

      return matchesSearch && matchesCategory;
    });
  }, [searchTerm, selectedCategory, localProducts]);

  const handleSearch = useCallback((term: string) => {
    setSearchTerm(term);
  }, []);

  // Función para verificar duplicados
  const checkDuplicates = (newProducts: Product | Product[]) => {
    const productsToCheck = Array.isArray(newProducts) ? newProducts : [newProducts];
    const duplicates = productsToCheck.filter(newProduct => 
      localProducts.some(existingProduct => 
        existingProduct.sku === newProduct.sku ||
        (existingProduct.name.toLowerCase() === newProduct.name.toLowerCase() &&
         existingProduct.category.toLowerCase() === newProduct.category.toLowerCase())
      )
    );

    return duplicates;
  };

  // Función actualizada para agregar productos
  const handleAddProduct = (product: Product | Product[]) => {
    const duplicates = checkDuplicates(product);
    
    if (duplicates.length > 0) {
      const isMultiple = Array.isArray(product);
      const totalProducts = isMultiple ? (product as Product[]).length : 1;
      const duplicateCount = duplicates.length;
      
      if (isMultiple && duplicateCount < totalProducts) {
        // Algunos productos son duplicados
        const confirmMessage = `Se encontraron ${duplicateCount} productos duplicados de ${totalProducts}.\n\n` +
          `Productos duplicados:\n${duplicates.map(p => `- ${p.name} (${p.sku})`).join('\n')}\n\n` +
          '¿Deseas importar solo los productos no duplicados?';
        
        if (window.confirm(confirmMessage)) {
          const uniqueProducts = (product as Product[]).filter(p => 
            !duplicates.some(d => d.sku === p.sku)
          );
          const newIds = uniqueProducts.map(p => p.id);
          setLocalProducts(prev => [...prev, ...uniqueProducts]);
          setRecentlyAdded(new Set(newIds));
          setTimeout(() => setRecentlyAdded(new Set()), 5000);
        }
      } else {
        // Todos los productos son duplicados o es un solo producto duplicado
        const message = isMultiple 
          ? 'Todos los productos ya existen en el catálogo.'
          : `El producto "${duplicates[0].name}" ya existe en el catálogo.`;
        alert(message);
      }
    } else {
      // No hay duplicados, proceder normalmente
      if (Array.isArray(product)) {
        const newIds = product.map(p => p.id);
        setLocalProducts(prev => [...prev, ...product]);
        setRecentlyAdded(new Set(newIds));
        setTimeout(() => setRecentlyAdded(new Set()), 5000);
      } else {
        setLocalProducts(prev => [...prev, product]);
        setRecentlyAdded(new Set([product.id]));
        setTimeout(() => setRecentlyAdded(new Set()), 5000);
      }
    }
    setIsAddModalOpen(false);
  };

  // Función para manejar la selección de productos
  const handleSelect = (productId: string) => {
    setSelectedProducts(prev => {
      const newSelection = new Set(prev);
      if (newSelection.has(productId)) {
        newSelection.delete(productId);
      } else {
        newSelection.add(productId);
      }
      return newSelection;
    });
  };

  // Función para seleccionar/deseleccionar todos
  const handleSelectAll = () => {
    if (selectedProducts.size === filteredProducts.length) {
      setSelectedProducts(new Set());
    } else {
      setSelectedProducts(new Set(filteredProducts.map(p => p.id)));
    }
  };

  // Función para eliminar productos seleccionados
  const handleDeleteSelected = () => {
    if (window.confirm(`¿Estás seguro de que deseas eliminar ${selectedProducts.size} productos?`)) {
      setLocalProducts(prev => 
        prev.filter(product => !selectedProducts.has(product.id))
      );
      setSelectedProducts(new Set());
    }
  };

  // Función para eliminar un producto individual desde el modal de detalles
  const handleDeleteProduct = (id: string) => {
    setLocalProducts(prev => prev.filter(product => product.id !== id));
    setSelectedProduct(null);
  };

  // Función para actualizar un producto
  const handleUpdateProduct = (updatedProduct: Product) => {
    setLocalProducts(prev => 
      prev.map(product => 
        product.id === updatedProduct.id ? updatedProduct : product
      )
    );
    setSelectedProduct(null);
  };

  // Función para exportar productos seleccionados a CSV
  const handleExportCSV = () => {
    const selectedProductsData = filteredProducts.filter(p => selectedProducts.has(p.id));
    const csv = [
      // Encabezados normalizados
      ['SKU', 'Nombre', 'Precio', 'Categoria', 'URL de Imagen'].join(','),
      // Datos normalizados
      ...selectedProductsData.map(p => [
        normalizeText(p.sku),
        `"${normalizeText(p.name)}"`, // Envolvemos en comillas para manejar comas en el nombre
        p.price,
        normalizeText(p.category),
        p.imageUrl
      ].join(','))
    ].join('\n');

    // Agregar BOM para que Excel reconozca correctamente los caracteres
    const BOM = '\uFEFF';
    const blob = new Blob([BOM + csv], { 
      type: 'text/csv;charset=utf-8;' 
    });
    
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    
    link.setAttribute('href', url);
    link.setAttribute('download', `productos_${timestamp}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url); // Liberar memoria
  };

  return (
    <div className="min-h-screen bg-[conic-gradient(at_top_right,_var(--tw-gradient-stops))] from-slate-900 via-purple-900 to-slate-900">
      {/* Header */}
      <div className="bg-white/10 backdrop-blur-lg shadow-sm border-b border-white/20">
        <div className="max-w-7xl mx-auto px-4">
          <div className="flex justify-between items-center h-16 relative">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={onBack}
              className="flex items-center text-white/80 hover:text-white"
            >
              <ArrowLeft className="w-5 h-5 mr-2" />
              <span className="font-medium">Volver al inicio</span>
            </motion.button>

            <span className="absolute left-1/2 -translate-x-1/2 text-white font-light text-2xl tracking-tight">
              Speed<span className="font-medium">+</span>
            </span>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 py-8">
        {/* Toolbar */}
        <div className="flex flex-col md:flex-row justify-between items-stretch md:items-center gap-4 mb-8">
          <div className="flex-1 max-w-md">
            <div className="relative">
              <input
                type="text"
                value={searchTerm}
                onChange={(e) => handleSearch(e.target.value)}
                placeholder="Buscar por nombre, SKU o categoría..."
                className="w-full bg-white/10 border border-white/20 rounded-lg py-2 pl-10 pr-4 
                         text-white placeholder-white/50 focus:outline-none focus:ring-2 
                         focus:ring-purple-500/50 transition-all duration-200"
              />
              <Search className="absolute left-3 top-2.5 w-5 h-5 text-white/50" />
              {searchTerm && (
                <button
                  onClick={() => handleSearch('')}
                  className="absolute right-3 top-2.5 text-white/50 hover:text-white"
                >
                  <X className="w-4 h-4" />
                </button>
              )}
            </div>
          </div>

          <div className="flex gap-4">
            <div className="relative">
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => setShowCategoryFilter(!showCategoryFilter)}
                className="flex items-center gap-2 px-4 py-2 bg-white/10 text-white rounded-lg 
                         hover:bg-white/20 transition-colors duration-200"
              >
                <Filter className="w-5 h-5" />
                <span className="hidden sm:inline">
                  {selectedCategory || 'Filtrar por Categoría'}
                </span>
              </motion.button>

              {/* Dropdown de categorías */}
              {showCategoryFilter && (
                <div className="absolute right-0 mt-2 w-64 bg-white/10 backdrop-blur-lg border 
                              border-white/20 rounded-lg shadow-xl z-50">
                  <div className="p-2">
                    <button
                      onClick={() => {
                        setSelectedCategory('');
                        setShowCategoryFilter(false);
                      }}
                      className="w-full text-left px-4 py-2 text-white hover:bg-white/10 rounded-lg"
                    >
                      Todas las categorías
                    </button>
                    {categories.map((category) => (
                      <button
                        key={category}
                        onClick={() => {
                          setSelectedCategory(category);
                          setShowCategoryFilter(false);
                        }}
                        className="w-full text-left px-4 py-2 text-white hover:bg-white/10 rounded-lg"
                      >
                        {category}
                      </button>
                    ))}
                  </div>
                </div>
              )}
            </div>

            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => setIsAddModalOpen(true)}
              className="flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-purple-500 
                       to-indigo-500 text-white rounded-lg hover:from-purple-600 
                       hover:to-indigo-600 transition-all duration-200"
            >
              <Plus className="w-5 h-5" />
              <span className="hidden sm:inline">Nuevo Producto</span>
            </motion.button>
          </div>
        </div>

        {/* Toolbar con selección */}
        <div className="flex flex-col md:flex-row justify-between items-stretch md:items-center gap-4 mb-8">
          <div className="flex items-center gap-4">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={handleSelectAll}
              className="flex items-center gap-2 px-4 py-2 bg-white/10 text-white rounded-lg 
                       hover:bg-white/20 transition-colors"
            >
              {selectedProducts.size === filteredProducts.length ? (
                <CheckSquare className="w-5 h-5" />
              ) : (
                <Square className="w-5 h-5" />
              )}
              <span className="hidden sm:inline">
                {selectedProducts.size === 0
                  ? 'Seleccionar Todos'
                  : selectedProducts.size === filteredProducts.length
                  ? 'Deseleccionar Todos'
                  : `${selectedProducts.size} seleccionados`}
              </span>
            </motion.button>

            {selectedProducts.size > 0 && (
              <div className="flex items-center gap-4 mb-6">
                <span className="text-white/60">
                  {selectedProducts.size} productos seleccionados
                </span>
                <div className="flex gap-2">
                  <motion.button
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={handleExportCSV}
                    className="flex items-center gap-2 px-4 py-2 bg-emerald-500/10 text-emerald-400 
                             rounded-lg hover:bg-emerald-500/20"
                  >
                    <FileText className="w-5 h-5" />
                    <span className="hidden sm:inline">Exportar CSV</span>
                  </motion.button>
                  <motion.button
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={handleDeleteSelected}
                    className="flex items-center gap-2 px-4 py-2 bg-red-500/10 text-red-400 
                             rounded-lg hover:bg-red-500/20"
                  >
                    <Trash2 className="w-5 h-5" />
                    <span className="hidden sm:inline">Eliminar</span>
                  </motion.button>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Contador de resultados y filtro activo */}
        <div className="flex items-center gap-4 mb-6 text-white/60">
          <span>
            {filteredProducts.length === localProducts.length
              ? `${localProducts.length} productos`
              : `${filteredProducts.length} de ${localProducts.length} productos`}
          </span>
          {selectedCategory && (
            <div className="flex items-center gap-2 px-3 py-1 bg-white/10 rounded-full">
              <span>{selectedCategory}</span>
              <button
                onClick={() => setSelectedCategory('')}
                className="hover:text-white"
              >
                <X className="w-4 h-4" />
              </button>
            </div>
          )}
        </div>

        {/* Products Grid */}
        <AnimatePresence mode="popLayout">
          {filteredProducts.length > 0 ? (
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              {filteredProducts.map((product) => (
                <motion.div
                  key={product.id}
                  layout
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: 20 }}
                  className={`bg-white/10 backdrop-blur-md rounded-lg border 
                           overflow-hidden group relative
                           ${selectedProducts.has(product.id) 
                             ? 'border-purple-500' 
                             : recentlyAdded.has(product.id)
                             ? 'border-emerald-500'
                             : 'border-white/20'}`}
                >
                  {/* Indicador de producto recién agregado */}
                  {recentlyAdded.has(product.id) && (
                    <motion.div
                      initial={{ opacity: 0, scale: 0.5 }}
                      animate={{ opacity: 1, scale: 1 }}
                      className="absolute top-2 left-2 z-10 bg-emerald-500/20 p-1 rounded-full"
                    >
                      <CheckCircle className="w-5 h-5 text-emerald-400" />
                    </motion.div>
                  )}

                  {/* Checkbox de selección */}
                  <div className="absolute top-2 right-2 z-10 flex gap-2">
                    <button
                      onClick={() => handleSelect(product.id)}
                      className="p-1 bg-black/50 rounded-lg backdrop-blur-sm"
                    >
                      {selectedProducts.has(product.id) ? (
                        <CheckSquare className="w-5 h-5 text-purple-400" />
                      ) : (
                        <Square className="w-5 h-5 text-white/60" />
                      )}
                    </button>
                  </div>

                  <div className="aspect-square relative overflow-hidden">
                    <img
                      src={product.imageUrl}
                      alt={product.name}
                      className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110"
                    />
                    <div className="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity" />
                  </div>

                  <div className="p-4">
                    <div className="flex justify-between items-start mb-2">
                      <div>
                        <h3 className="text-white font-medium">{product.name}</h3>
                        <span className="text-white/60 text-sm">SKU: {product.sku}</span>
                      </div>
                      <span className="text-white font-bold">
                        ${product.price.toFixed(2)}
                      </span>
                    </div>

                    <div className="flex justify-between items-center">
                      <span className="text-xs px-2 py-1 bg-purple-500/20 text-purple-300 rounded-full">
                        {product.category}
                      </span>
                      <motion.button
                        whileHover={{ scale: 1.1 }}
                        whileTap={{ scale: 0.9 }}
                        onClick={() => setSelectedProduct(product)}
                        className="text-white/60 hover:text-white text-sm"
                      >
                        Ver detalles
                      </motion.button>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          ) : (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="text-center py-12"
            >
              <div className="text-white/60 text-lg">
                No se encontraron productos que coincidan con "{searchTerm}"
              </div>
              <button
                onClick={() => handleSearch('')}
                className="mt-4 text-purple-400 hover:text-purple-300"
              >
                Limpiar búsqueda
              </button>
            </motion.div>
          )}
        </AnimatePresence>

        {selectedProduct && (
          <ProductDetails
            product={selectedProduct}
            isOpen={!!selectedProduct}
            onClose={() => setSelectedProduct(null)}
            onUpdate={handleUpdateProduct}
            onDelete={handleDeleteProduct}
            categories={categories}
          />
        )}
      </div>

      <AddProductModal
        isOpen={isAddModalOpen}
        onClose={() => setIsAddModalOpen(false)}
        onAddProduct={handleAddProduct}
      />
    </div>
  );
} 


=== src/components/Promotions/AddPromotionModal.tsx ===
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, Plus, Calendar, Upload, Link as LinkIcon, Edit, Power, Check } from 'lucide-react';
import { Promotion } from '../../types/promotion';
import { BankSelector } from './BankSelector';
import { CardBrandIcon } from './CardBrandIcon';
import { CardTypeIcon } from './CardTypeIcon';

interface AddPromotionModalProps {
  isOpen: boolean;
  onClose: () => void;
  onAdd: (promotion: Promotion) => void;
  editingPromotion?: Promotion | null;
}

interface FormData {
  title: string;
  description: string;
  discount: string;
  startDate: string;
  endDate: string;
  category: string;
  conditions: string[];
  imageUrl: string;
  imageFile: File | null;
  imageSource: 'url' | 'file';
  bank?: string;
  cardType?: string;
  isActive: boolean;
  selectedBanks: string[];
  cardOptions: {
    debit: boolean;
    credit: boolean;
    cardBrands: string[];
  };
}

export const AddPromotionModal: React.FC<AddPromotionModalProps> = ({ 
  isOpen, 
  onClose, 
  onAdd, 
  editingPromotion 
}) => {
  const [formData, setFormData] = useState<FormData>({
    title: '',
    description: '',
    discount: '',
    startDate: new Date().toISOString().split('T')[0],
    endDate: new Date().toISOString().split('T')[0],
    category: '',
    conditions: [''],
    imageUrl: '',
    imageFile: null,
    imageSource: 'url',
    isActive: true,
    selectedBanks: [],
    cardOptions: {
      debit: false,
      credit: false,
      cardBrands: []
    }
  });

  useEffect(() => {
    if (editingPromotion) {
      setFormData({
        title: editingPromotion.title,
        description: editingPromotion.description,
        discount: editingPromotion.discount,
        startDate: editingPromotion.startDate,
        endDate: editingPromotion.endDate,
        category: editingPromotion.category,
        conditions: editingPromotion.conditions,
        imageUrl: editingPromotion.imageUrl,
        imageFile: null,
        imageSource: 'url',
        bank: editingPromotion.bank,
        cardType: editingPromotion.cardType,
        isActive: editingPromotion.isActive,
        selectedBanks: editingPromotion.selectedBanks,
        cardOptions: editingPromotion.cardOptions
      });
    }
  }, [editingPromotion]);

  const categories = ['Bancaria', 'Producto', 'Categoría', 'Especial'];

  const handleFormChange = (changes: Partial<FormData>) => {
    setFormData(prev => ({
      ...prev,
      ...changes
    }));
  };

  const handleBankSelect = (bankId: string) => {
    handleFormChange({
      selectedBanks: formData.selectedBanks.includes(bankId)
        ? formData.selectedBanks.filter(id => id !== bankId)
        : [...formData.selectedBanks, bankId]
    });
  };

  const handleCardOptionChange = (option: 'debit' | 'credit') => {
    handleFormChange({
      cardOptions: {
        ...formData.cardOptions,
        [option]: !formData.cardOptions[option]
      }
    });
  };

  const handleCardBrandSelect = (brand: string) => {
    handleFormChange({
      cardOptions: {
        ...formData.cardOptions,
        cardBrands: formData.cardOptions.cardBrands.includes(brand)
          ? formData.cardOptions.cardBrands.filter(b => b !== brand)
          : [...formData.cardOptions.cardBrands, brand]
      }
    });
  };

  const renderCardTypeButtons = () => (
    <div className="flex gap-6 justify-center">
      <motion.button
        type="button"
        whileHover={{ scale: 1.02 }}
        whileTap={{ scale: 0.98 }}
        onClick={() => handleCardOptionChange('debit')}
        className="focus:outline-none"
      >
        <CardTypeIcon 
          type="debit" 
          selected={formData.cardOptions.debit} 
        />
      </motion.button>
      <motion.button
        type="button"
        whileHover={{ scale: 1.02 }}
        whileTap={{ scale: 0.98 }}
        onClick={() => handleCardOptionChange('credit')}
        className="focus:outline-none"
      >
        <CardTypeIcon 
          type="credit" 
          selected={formData.cardOptions.credit} 
        />
      </motion.button>
    </div>
  );

  const renderCardBrandButtons = () => (
    <div className="flex gap-4">
      {['VISA', 'MASTERCARD', 'AMEX'].map(brand => (
        <motion.button
          key={brand}
          type="button"
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={(e) => {
            e.preventDefault();
            handleCardBrandSelect(brand);
          }}
          className={`p-4 rounded-lg border ${
            formData.cardOptions.cardBrands.includes(brand)
              ? 'border-rose-500 bg-rose-500/10'
              : 'border-white/10 bg-white/5'
          } transition-colors flex flex-col items-center gap-2`}
        >
          <CardBrandIcon 
            brand={brand} 
            selected={formData.cardOptions.cardBrands.includes(brand)} 
          />
          <span className="text-sm text-white">{brand}</span>
        </motion.button>
      ))}
    </div>
  );

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    handleFormChange({ [name]: value });
  };

  const handleImageFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      handleFormChange({ 
        imageFile: file,
        imageUrl: URL.createObjectURL(file)
      });
    }
  };

  const handleAddCondition = () => {
    handleFormChange({
      conditions: [...formData.conditions, '']
    });
  };

  const handleConditionChange = (index: number, value: string) => {
    handleFormChange({
      conditions: formData.conditions.map((condition, i) => 
        i === index ? value : condition
      )
    });
  };

  const handleRemoveCondition = (index: number) => {
    handleFormChange({
      conditions: formData.conditions.filter((_, i) => i !== index)
    });
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    const newPromotion: Promotion = {
      id: editingPromotion?.id || Date.now().toString(),
      title: formData.title,
      description: formData.description,
      discount: formData.discount,
      startDate: formData.startDate,
      endDate: formData.endDate,
      category: formData.category as Promotion['category'],
      conditions: formData.conditions.filter(c => c.trim() !== ''),
      imageUrl: formData.imageUrl,
      isActive: formData.isActive,
      bank: formData.bank,
      cardType: formData.cardType,
      selectedBanks: formData.selectedBanks,
      cardOptions: formData.cardOptions
    };

    onAdd(newPromotion);
    onClose();
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={onClose}
            className="absolute inset-0 bg-black/60 backdrop-blur-sm"
          />
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
            className="relative bg-slate-900 rounded-2xl shadow-xl w-full max-w-4xl 
                     border border-white/10 overflow-hidden max-h-[90vh] flex flex-col"
            onClick={e => e.stopPropagation()}
          >
            <div className="p-6 border-b border-white/10 flex justify-between items-center shrink-0">
              <h2 className="text-xl font-medium text-white">
                {editingPromotion ? 'Editar Promoción' : 'Nueva Promoción'}
              </h2>
              <button
                onClick={onClose}
                className="text-white/60 hover:text-white transition-colors"
              >
                <X className="w-5 h-5" />
              </button>
            </div>

            <div className="flex-1 overflow-y-auto p-6">
              <form id="promotionForm" onSubmit={handleSubmit} className="space-y-6">
                {/* Título y Descuento */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-white/80 mb-2">Título</label>
                    <input
                      type="text"
                      name="title"
                      value={formData.title}
                      onChange={handleInputChange}
                      required
                      className="w-full bg-white/5 border border-white/10 rounded-lg px-4 py-2.5 
                               text-white placeholder-white/30 focus:outline-none focus:ring-2 
                               focus:ring-rose-500/50 focus:border-transparent"
                      placeholder="Ej: 25% OFF con Tarjeta X"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-white/80 mb-2">Descuento</label>
                    <input
                      type="text"
                      name="discount"
                      value={formData.discount}
                      onChange={handleInputChange}
                      required
                      className="w-full bg-white/5 border border-white/10 rounded-lg px-4 py-2.5 
                               text-white placeholder-white/30 focus:outline-none focus:ring-2 
                               focus:ring-rose-500/50 focus:border-transparent"
                      placeholder="Ej: 25%"
                    />
                  </div>
                </div>

                {/* Descripción */}
                <div>
                  <label className="block text-sm font-medium text-white/80 mb-2">Descripción</label>
                  <textarea
                    name="description"
                    value={formData.description}
                    onChange={handleInputChange}
                    required
                    rows={3}
                    className="w-full bg-white/5 border border-white/10 rounded-lg px-4 py-2.5 
                             text-white placeholder-white/30 focus:outline-none focus:ring-2 
                             focus:ring-rose-500/50 focus:border-transparent resize-none"
                    placeholder="Describe los detalles de la promoción"
                  />
                </div>

                {/* Fechas */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-white/80 mb-2">Fecha Inicio</label>
                    <input
                      type="date"
                      name="startDate"
                      value={formData.startDate}
                      onChange={handleInputChange}
                      required
                      className="w-full bg-white/5 border border-white/10 rounded-lg px-4 py-2.5 
                               text-white focus:outline-none focus:ring-2 
                               focus:ring-rose-500/50 focus:border-transparent"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-white/80 mb-2">Fecha Fin</label>
                    <input
                      type="date"
                      name="endDate"
                      value={formData.endDate}
                      onChange={handleInputChange}
                      required
                      className="w-full bg-white/5 border border-white/10 rounded-lg px-4 py-2.5 
                               text-white focus:outline-none focus:ring-2 
                               focus:ring-rose-500/50 focus:border-transparent"
                    />
                  </div>
                </div>

                {/* Categoría */}
                <div>
                  <label className="block text-sm font-medium text-white/80 mb-2">Categoría</label>
                  <select
                    name="category"
                    value={formData.category}
                    onChange={handleInputChange}
                    required
                    className="w-full bg-white/5 border border-white/10 rounded-lg px-4 py-2.5 
                             text-white focus:outline-none focus:ring-2 
                             focus:ring-rose-500/50 focus:border-transparent"
                  >
                    <option value="">Seleccionar categoría</option>
                    {categories.map(category => (
                      <option key={category} value={category}>{category}</option>
                    ))}
                  </select>
                </div>

                {/* Campos adicionales para promociones bancarias */}
                {formData.category === 'Bancaria' && (
                  <div className="space-y-4">
                    <label className="block text-sm font-medium text-white/80">Bancos Participantes</label>
                    <BankSelector
                      selectedBanks={formData.selectedBanks}
                      onBankSelect={handleBankSelect}
                    />
                    <div className="space-y-4">
                      <label className="block text-sm font-medium text-white/80">Tipo de Tarjeta</label>
                      {renderCardTypeButtons()}
                      {(formData.cardOptions.debit || formData.cardOptions.credit) && (
                        <>
                          <label className="block text-sm font-medium text-white/80 mt-4">Marcas de Tarjeta</label>
                          {renderCardBrandButtons()}
                        </>
                      )}
                    </div>
                  </div>
                )}

                {/* Condiciones */}
                <div>
                  <div className="flex justify-between items-center mb-2">
                    <label className="block text-sm font-medium text-white/80">Condiciones</label>
                    <button
                      type="button"
                      onClick={handleAddCondition}
                      className="text-rose-400 hover:text-rose-300 text-sm"
                    >
                      + Agregar condición
                    </button>
                  </div>
                  <div className="space-y-2">
                    {formData.conditions.map((condition, index) => (
                      <div key={index} className="flex gap-2">
                        <input
                          type="text"
                          value={condition}
                          onChange={(e) => handleConditionChange(index, e.target.value)}
                          className="flex-1 bg-white/5 border border-white/10 rounded-lg px-4 py-2 
                                   text-white placeholder-white/30 focus:outline-none focus:ring-2 
                                   focus:ring-rose-500/50 focus:border-transparent"
                          placeholder="Ej: Tope de reintegro $2000"
                        />
                        {formData.conditions.length > 1 && (
                          <button
                            type="button"
                            onClick={() => handleRemoveCondition(index)}
                            className="text-red-400 hover:text-red-300"
                          >
                            <X className="w-5 h-5" />
                          </button>
                        )}
                      </div>
                    ))}
                  </div>
                </div>

                {/* Imagen */}
                <div className="space-y-4">
                  <label className="block text-sm font-medium text-white/80">Imagen</label>
                  <div className="flex gap-4">
                    <button
                      type="button"
                      onClick={() => handleFormChange({ imageSource: 'url' })}
                      className={`flex-1 p-4 rounded-lg border ${
                        formData.imageSource === 'url'
                          ? 'border-rose-500 bg-rose-500/10'
                          : 'border-white/10 bg-white/5'
                      } transition-colors`}
                    >
                      <LinkIcon className="w-6 h-6 text-white mx-auto mb-2" />
                      <p className="text-sm text-white">URL de imagen</p>
                    </button>
                    <button
                      type="button"
                      onClick={() => handleFormChange({ imageSource: 'file' })}
                      className={`flex-1 p-4 rounded-lg border ${
                        formData.imageSource === 'file'
                          ? 'border-rose-500 bg-rose-500/10'
                          : 'border-white/10 bg-white/5'
                      } transition-colors`}
                    >
                      <Upload className="w-6 h-6 text-white mx-auto mb-2" />
                      <p className="text-sm text-white">Subir imagen</p>
                    </button>
                  </div>

                  {formData.imageSource === 'url' ? (
                    <input
                      type="url"
                      name="imageUrl"
                      value={formData.imageUrl}
                      onChange={handleInputChange}
                      className="w-full bg-white/5 border border-white/10 rounded-lg px-4 py-2.5 
                               text-white placeholder-white/30 focus:outline-none focus:ring-2 
                               focus:ring-rose-500/50 focus:border-transparent"
                      placeholder="https://ejemplo.com/imagen.jpg"
                    />
                  ) : (
                    <div className="flex items-center justify-center w-full">
                      <label className="w-full flex flex-col items-center px-4 py-6 bg-white/5 
                                    border border-white/10 border-dashed rounded-lg cursor-pointer 
                                    hover:bg-white/10">
                        <Upload className="w-8 h-8 text-white/60" />
                        <span className="mt-2 text-sm text-white/60">
                          {formData.imageFile ? formData.imageFile.name : 'Seleccionar archivo'}
                        </span>
                        <input
                          type="file"
                          className="hidden"
                          accept="image/*"
                          onChange={handleImageFileChange}
                        />
                      </label>
                    </div>
                  )}
                </div>

                {/* Estado */}
                <div className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    name="isActive"
                    checked={formData.isActive}
                    onChange={(e) => handleFormChange({ isActive: e.target.checked })}
                    className="w-4 h-4 rounded border-white/10 bg-white/5 text-rose-500 
                             focus:ring-rose-500/50"
                  />
                  <label className="text-sm text-white/80">Promoción activa</label>
                </div>
              </form>
            </div>

            <div className="p-6 border-t border-white/10 flex justify-end gap-4 shrink-0 bg-slate-900/50 backdrop-blur-sm">
              <button
                type="button"
                onClick={onClose}
                className="px-4 py-2 text-white/60 hover:text-white"
              >
                Cancelar
              </button>
              <motion.button
                type="submit"
                form="promotionForm"
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                className="px-6 py-2 bg-gradient-to-r from-rose-500 to-pink-500 
                         text-white rounded-lg hover:from-rose-600 hover:to-pink-600 
                         focus:outline-none focus:ring-2 focus:ring-rose-500/50"
              >
                {editingPromotion ? 'Guardar Cambios' : 'Crear Promoción'}
              </motion.button>
            </div>
          </motion.div>
        </div>
      )}
    </AnimatePresence>
  );
}; 


=== src/components/Promotions/BankSelector.tsx ===
import React from 'react';
import { motion } from 'framer-motion';
import { Check } from 'lucide-react';
import { Bank, banks } from '../../data/banks';

interface BankSelectorProps {
  selectedBanks: string[];
  onBankSelect: (bankId: string) => void;
}

export const BankSelector: React.FC<BankSelectorProps> = ({
  selectedBanks,
  onBankSelect
}) => {
  return (
    <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
      {banks.map((bank) => (
        <motion.button
          key={bank.id}
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          onClick={() => onBankSelect(bank.id)}
          className={`relative p-4 bg-white/5 border rounded-lg flex flex-col items-center gap-2
                    ${selectedBanks.includes(bank.id) 
                      ? 'border-rose-500 bg-rose-500/10' 
                      : 'border-white/10 hover:border-white/20'}`}
        >
          <div className="h-12 w-24 relative">
            <img
              src={bank.logoUrl}
              alt={bank.name}
              className="h-full w-full object-contain filter brightness-0 invert opacity-80"
            />
          </div>
          <span className="text-sm text-white/80">{bank.name}</span>
          {selectedBanks.includes(bank.id) && (
            <div className="absolute top-2 right-2">
              <Check className="w-4 h-4 text-rose-400" />
            </div>
          )}
        </motion.button>
      ))}
    </div>
  );
}; 


=== src/components/Promotions/CardBrandIcon.tsx ===
import React from 'react';
import { motion } from 'framer-motion';

interface CardBrandIconProps {
  brand: string;
  selected: boolean;
}

export const CardBrandIcon: React.FC<CardBrandIconProps> = ({ brand, selected }) => {
  const getCardStyle = () => {
    switch (brand) {
      case 'VISA':
        return 'bg-gradient-to-br from-blue-600 to-blue-800';
      case 'MASTERCARD':
        return 'bg-gradient-to-br from-orange-600 to-red-600';
      case 'AMEX':
        return 'bg-gradient-to-br from-cyan-600 to-blue-700';
      default:
        return 'bg-gradient-to-br from-gray-700 to-gray-900';
    }
  };

  return (
    <div className={`relative w-16 h-10 rounded-lg ${getCardStyle()} shadow-lg`}>
      <div className="absolute inset-0 rounded-lg overflow-hidden">
        <div className="absolute inset-0 bg-white/10 backdrop-blur-sm" />
        {brand === 'VISA' && (
          <div className="absolute inset-0 flex items-center justify-center text-white font-bold text-sm">
            VISA
          </div>
        )}
        {brand === 'MASTERCARD' && (
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="w-4 h-4 bg-red-500 rounded-full opacity-80" />
            <div className="w-4 h-4 bg-yellow-500 rounded-full -ml-2 opacity-80" />
          </div>
        )}
        {brand === 'AMEX' && (
          <div className="absolute inset-0 flex items-center justify-center text-white font-bold text-xs">
            AMEX
          </div>
        )}
      </div>
      {selected && (
        <div className="absolute -top-1 -right-1 w-4 h-4 bg-rose-500 rounded-full border-2 border-white" />
      )}
    </div>
  );
}; 


=== src/components/Promotions/CardTypeIcon.tsx ===
import React from 'react';
import { motion } from 'framer-motion';

interface CardTypeIconProps {
  type: 'debit' | 'credit';
  selected: boolean;
}

export const CardTypeIcon: React.FC<CardTypeIconProps> = ({ type, selected }) => {
  const getCardStyle = () => {
    if (type === 'credit') {
      return 'bg-gradient-to-br from-zinc-900 via-zinc-800 to-zinc-900 before:absolute before:inset-0 before:bg-gradient-to-t before:from-violet-500/20 before:to-transparent before:rounded-xl';
    }
    return 'bg-gradient-to-br from-zinc-900 via-zinc-800 to-zinc-900 before:absolute before:inset-0 before:bg-gradient-to-t before:from-emerald-500/20 before:to-transparent before:rounded-xl';
  };

  return (
    <motion.div
      className={`relative w-[280px] h-[170px] rounded-xl ${getCardStyle()} shadow-2xl 
                  backdrop-blur-xl overflow-hidden group`}
      whileHover={{ 
        scale: 1.02,
        rotateY: 5,
        translateZ: 20
      }}
      initial={{ rotateX: -20, opacity: 0 }}
      animate={{ rotateX: 0, opacity: 1 }}
      transition={{ 
        type: "spring",
        stiffness: 400,
        damping: 30
      }}
    >
      {/* Metallic effect overlay */}
      <div className="absolute inset-0 bg-gradient-to-tr from-white/[0.05] to-transparent opacity-50" />

      {/* Contactless icon */}
      <div className="absolute top-8 right-8">
        <motion.div 
          className="w-8 h-8"
          initial={false}
          animate={{ scale: [1, 1.1, 1] }}
          transition={{ 
            duration: 2,
            repeat: Infinity,
            repeatType: "reverse"
          }}
        >
          {[...Array(3)].map((_, i) => (
            <div 
              key={i}
              className="absolute border-2 border-white/40 rounded-full"
              style={{
                width: `${100 - i * 25}%`,
                height: `${100 - i * 25}%`,
                left: `${i * 12.5}%`,
                top: `${i * 12.5}%`,
              }}
            />
          ))}
        </motion.div>
      </div>

      {/* Card number */}
      <div className="absolute bottom-20 left-8 right-8">
        <div className="flex justify-between">
          {[...Array(4)].map((_, i) => (
            <motion.div
              key={i}
              className="flex gap-1"
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.1 * i }}
            >
              {[...Array(4)].map((_, j) => (
                <motion.div
                  key={j}
                  className="w-1.5 h-1.5 bg-white/60 rounded-full"
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  transition={{ delay: 0.05 * (i * 4 + j) }}
                />
              ))}
            </motion.div>
          ))}
        </div>
      </div>

      {/* Card type and validity */}
      <div className="absolute bottom-8 left-8 right-8 flex justify-between items-end">
        <div>
          <div className="text-white/50 text-xs mb-1">VÁLIDA HASTA</div>
          <div className="text-white/90 font-medium tracking-wider">
            {type === 'credit' ? '12/28' : '08/27'}
          </div>
        </div>
        <div className="text-white/90 font-medium tracking-wider text-right">
          {type === 'credit' ? 'CRÉDITO' : 'DÉBITO'}
        </div>
      </div>

      {/* Selection indicator */}
      {selected && (
        <motion.div
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          className="absolute -top-2 -right-2 w-6 h-6 bg-rose-500 rounded-full border-2 border-white 
                     flex items-center justify-center shadow-lg z-10"
        >
          <div className="w-2 h-2 bg-white rounded-full" />
        </motion.div>
      )}

      {/* Premium shine effect */}
      <motion.div
        className="absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent"
        initial={{ x: '-100%' }}
        animate={{ x: '200%' }}
        transition={{
          repeat: Infinity,
          duration: 3,
          repeatType: 'loop',
          ease: 'linear',
          delay: 1
        }}
      />
    </motion.div>
  );
}; 


=== src/components/Promotions/Promotions.tsx ===
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ArrowLeft, Plus, Calendar, Tag, Filter, Search, X, CheckSquare, Square, FileText, Trash2, Edit, Power } from 'lucide-react';
import { AddPromotionModal } from './AddPromotionModal';

interface PromotionsProps {
  onBack: () => void;
}

interface CardOptions {
  debit: boolean;
  credit: boolean;
  cardBrands: string[];
}

interface PromotionType {
  id: string;
  title: string;
  description: string;
  discount: string;
  imageUrl: string;
  category: 'Bancaria' | 'Especial' | 'Categoría' | 'Producto';
  conditions: string[];
  startDate: string;
  endDate: string;
  isActive: boolean;
  bank?: string;
  cardType?: string;
  selectedBanks: string[];
  cardOptions: CardOptions;
}

// Datos de ejemplo basados en Disco
const currentPromotions: PromotionType[] = [
  {
    id: '1',
    title: 'American Express 25% OFF',
    description: 'Comprá cuando quieras y programá tu entrega los días Jueves.',
    discount: '25%',
    startDate: '2024-01-01',
    endDate: '2024-12-31',
    imageUrl: 'https://images.unsplash.com/photo-1580828343064-fde4fc206bc6?w=500&auto=format&fit=crop&q=60',
    category: 'Bancaria',
    conditions: ['Tope de reintegro $2000', 'Válido solo los jueves'],
    isActive: true,
    bank: 'American Express',
    cardType: 'Todas las tarjetas',
    selectedBanks: ['American Express'],
    cardOptions: {
      debit: true,
      credit: true,
      cardBrands: ['Todas las tarjetas']
    }
  },
  {
    id: '2',
    title: 'Hasta 40% OFF en Especiales de la semana',
    description: 'Descuentos especiales en productos seleccionados',
    discount: 'Hasta 40%',
    startDate: '2024-01-01',
    endDate: '2024-01-07',
    imageUrl: 'https://images.unsplash.com/photo-1607082349566-187342175e2f?w=500&auto=format&fit=crop&q=60',
    category: 'Especial',
    conditions: ['Válido hasta agotar stock', 'En productos seleccionados'],
    isActive: true,
    selectedBanks: [],
    cardOptions: {
      debit: false,
      credit: false,
      cardBrands: []
    }
  },
  {
    id: '3',
    title: 'Tarjeta Cencosud 20% OFF',
    description: 'Realizá tus compras los días Miércoles',
    discount: '20%',
    startDate: '2024-01-01',
    endDate: '2024-12-31',
    imageUrl: 'https://images.unsplash.com/photo-1556742502-ec7c0e9f34b1?w=500&auto=format&fit=crop&q=60',
    category: 'Bancaria',
    conditions: ['Tope de reintegro $1500', 'Válido solo los miércoles'],
    isActive: true,
    bank: 'Cencosud',
    cardType: 'Tarjeta Cencosud',
    selectedBanks: ['Cencosud'],
    cardOptions: {
      debit: true,
      credit: true,
      cardBrands: ['Tarjeta Cencosud']
    }
  },
  {
    id: '4',
    title: '2do al 70% en Almacén, Bebidas y más',
    description: 'En la segunda unidad de productos seleccionados',
    discount: '70%',
    startDate: '2024-01-01',
    endDate: '2024-01-15',
    imageUrl: 'https://images.unsplash.com/photo-1579113800032-c38bd7635818?w=500&auto=format&fit=crop&q=60',
    category: 'Categoría',
    conditions: ['En la segunda unidad', 'Productos seleccionados'],
    isActive: true,
    selectedBanks: [],
    cardOptions: {
      debit: false,
      credit: false,
      cardBrands: []
    }
  },
  // Nuevas promociones de Disco
  {
    id: '5',
    title: 'Hasta 35% y Hasta 12 CSI',
    description: 'Descuentos especiales en productos seleccionados con cuotas sin interés',
    discount: '35%',
    startDate: '2024-01-01',
    endDate: '2024-01-31',
    imageUrl: 'https://images.unsplash.com/photo-1556742044-3c52d6e88c62?w=500&auto=format&fit=crop&q=60',
    category: 'Especial',
    conditions: ['Hasta 12 cuotas sin interés', 'En productos seleccionados'],
    isActive: true,
    selectedBanks: [],
    cardOptions: {
      debit: false,
      credit: false,
      cardBrands: []
    }
  },
  {
    id: '6',
    title: 'Santander 30% OFF',
    description: 'Descuento exclusivo para clientes Santander',
    discount: '30%',
    startDate: '2024-01-01',
    endDate: '2024-12-31',
    imageUrl: 'https://images.unsplash.com/photo-1601597111158-2fceff292cdc?w=500&auto=format&fit=crop&q=60',
    category: 'Bancaria',
    conditions: ['Tope de reintegro $3000', 'Válido todos los días'],
    isActive: true,
    bank: 'Santander',
    cardType: 'Todas las tarjetas',
    selectedBanks: ['Santander'],
    cardOptions: {
      debit: true,
      credit: true,
      cardBrands: ['Todas las tarjetas']
    }
  },
  {
    id: '7',
    title: 'Hasta 40% OFF en Dove',
    description: 'Descuentos especiales en toda la línea Dove',
    discount: '40%',
    startDate: '2024-12-02',
    endDate: '2024-12-08',
    imageUrl: 'https://images.unsplash.com/photo-1619451334792-150fd785ee74?w=500&auto=format&fit=crop&q=60',
    category: 'Producto',
    conditions: ['Válido hasta agotar stock', 'En productos seleccionados de la marca'],
    isActive: true,
    selectedBanks: [],
    cardOptions: {
      debit: false,
      credit: false,
      cardBrands: []
    }
  },
  {
    id: '8',
    title: 'Especial Gaseosas',
    description: 'Descuentos en toda la línea de gaseosas',
    discount: '30%',
    startDate: '2024-12-03',
    endDate: '2024-12-05',
    imageUrl: 'https://images.unsplash.com/photo-1527960471264-932f39eb5846?w=500&auto=format&fit=crop&q=60',
    category: 'Producto',
    conditions: ['Válido para todas las marcas participantes', 'Máximo 6 unidades por compra'],
    isActive: true,
    selectedBanks: [],
    cardOptions: {
      debit: false,
      credit: false,
      cardBrands: []
    }
  },
  {
    id: '9',
    title: 'Cajas Navideñas',
    description: 'Ofertas especiales en cajas navideñas',
    discount: '25%',
    startDate: '2024-12-01',
    endDate: '2024-12-24',
    imageUrl: 'https://images.unsplash.com/photo-1543934638-bd2e138430c4?w=500&auto=format&fit=crop&q=60',
    category: 'Especial',
    conditions: ['Stock limitado', 'No acumulable con otras promociones'],
    isActive: true,
    selectedBanks: [],
    cardOptions: {
      debit: false,
      credit: false,
      cardBrands: []
    }
  },
  {
    id: '10',
    title: 'Cuota Simple - 12 y 9 Cuotas',
    description: 'Comprá con 12 y 9 cuotas con interés en productos seleccionados',
    discount: 'Cuotas',
    startDate: '2024-01-01',
    endDate: '2024-12-31',
    imageUrl: 'https://images.unsplash.com/photo-1563013544-824ae1b704d3?w=500&auto=format&fit=crop&q=60',
    category: 'Bancaria',
    conditions: ['En productos seleccionados', 'Sujeto a aprobación crediticia'],
    isActive: true,
    bank: 'Varios',
    cardType: 'Tarjetas participantes',
    selectedBanks: ['Varios'],
    cardOptions: {
      debit: true,
      credit: true,
      cardBrands: ['Tarjetas participantes']
    }
  }
];

export default function Promotions({ onBack }: PromotionsProps) {
  const [promotions, setPromotions] = useState<PromotionType[]>(currentPromotions);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string>('');
  const [showCategoryFilter, setShowCategoryFilter] = useState(false);
  const [showAddModal, setShowAddModal] = useState(false);
  const [selectedPromotions, setSelectedPromotions] = useState<Set<string>>(new Set());
  const [editingPromotion, setEditingPromotion] = useState<PromotionType | null>(null);

  const categories = ['Todas', 'Bancaria', 'Producto', 'Categoría', 'Especial'];

  const filteredPromotions = promotions.filter(promo => {
    const searchLower = searchTerm.toLowerCase().trim();
    
    // Si no hay término de búsqueda, solo filtramos por categoría
    if (!searchLower) {
      return !selectedCategory || selectedCategory === 'Todas' || 
             promo.category === selectedCategory;
    }

    // Búsqueda en múltiples campos
    const matchesSearch = 
      // Búsqueda en título
      promo.title.toLowerCase().includes(searchLower) ||
      // Búsqueda en descripción
      promo.description.toLowerCase().includes(searchLower) ||
      // Búsqueda en categoría
      promo.category.toLowerCase().includes(searchLower) ||
      // Búsqueda en banco (si existe)
      (promo.bank?.toLowerCase().includes(searchLower) || false) ||
      // Búsqueda en tipo de tarjeta (si existe)
      (promo.cardType?.toLowerCase().includes(searchLower) || false) ||
      // Búsqueda en condiciones
      promo.conditions.some(condition => 
        condition.toLowerCase().includes(searchLower)
      );

    // Aplicar filtro de categoría si está seleccionada
    const matchesCategory = !selectedCategory || selectedCategory === 'Todas' || 
                          promo.category === selectedCategory;

    return matchesSearch && matchesCategory;
  });

  // Función para manejar la selección de promociones
  const handleSelect = (promotionId: string) => {
    setSelectedPromotions(prev => {
      const newSelection = new Set(prev);
      if (newSelection.has(promotionId)) {
        newSelection.delete(promotionId);
      } else {
        newSelection.add(promotionId);
      }
      return newSelection;
    });
  };

  // Función para eliminar promociones seleccionadas
  const handleDeleteSelected = () => {
    if (window.confirm(`¿Estás seguro de que deseas eliminar ${selectedPromotions.size} promociones?`)) {
      setPromotions(prev => 
        prev.filter(promotion => !selectedPromotions.has(promotion.id))
      );
      setSelectedPromotions(new Set());
    }
  };

  // Función para exportar promociones seleccionadas a CSV
  const handleExportCSV = () => {
    const selectedPromotionsData = filteredPromotions.filter(p => selectedPromotions.has(p.id));
    const csv = [
      // Encabezados
      ['ID', 'Título', 'Descripción', 'Descuento', 'Fecha Inicio', 'Fecha Fin', 'Categoría', 'Estado', 'Banco', 'Tipo Tarjeta', 'Condiciones'].join(','),
      // Datos
      ...selectedPromotionsData.map(p => [
        p.id,
        `"${p.title}"`,
        `"${p.description}"`,
        p.discount,
        p.startDate,
        p.endDate,
        p.category,
        p.isActive ? 'Activa' : 'Inactiva',
        p.bank || '',
        p.cardType || '',
        `"${p.conditions.join('; ')}"`
      ].join(','))
    ].join('\n');

    const blob = new Blob(['\ufeff' + csv], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    
    link.setAttribute('href', url);
    link.setAttribute('download', `promociones_${timestamp}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  // Función para activar/desactivar promociones
  const handleToggleActive = (promotionId: string) => {
    setPromotions(prev => prev.map(promo => 
      promo.id === promotionId 
        ? { ...promo, isActive: !promo.isActive }
        : promo
    ));
  };

  // Función para actualizar una promoción
  const handleUpdatePromotion = (updatedPromotion: PromotionType) => {
    setPromotions(prev => prev.map(promo => 
      promo.id === updatedPromotion.id ? updatedPromotion : promo
    ));
    setEditingPromotion(null);
  };

  // Función para seleccionar/deseleccionar todas las promociones
  const handleSelectAll = () => {
    if (selectedPromotions.size === filteredPromotions.length) {
      setSelectedPromotions(new Set());
    } else {
      setSelectedPromotions(new Set(filteredPromotions.map(p => p.id)));
    }
  };

  return (
    <div className="min-h-screen bg-[conic-gradient(at_top_right,_var(--tw-gradient-stops))] from-slate-900 via-rose-900 to-slate-900">
      {/* Header */}
      <div className="bg-white/10 backdrop-blur-lg shadow-sm border-b border-white/20">
        <div className="max-w-7xl mx-auto px-4">
          <div className="flex justify-between items-center h-16 relative">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={onBack}
              className="flex items-center text-white/80 hover:text-white"
            >
              <ArrowLeft className="w-5 h-5 mr-2" />
              <span className="font-medium">Volver al inicio</span>
            </motion.button>

            <span className="absolute left-1/2 -translate-x-1/2 text-white font-light text-2xl tracking-tight">
              Speed<span className="font-medium">+</span>
            </span>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 py-8">
        {/* Toolbar */}
        <div className="flex flex-col md:flex-row justify-between items-stretch md:items-center gap-4 mb-8">
          <div className="flex-1 max-w-md">
            <div className="relative">
              <input
                type="text"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                placeholder="Buscar por nombre, categoría, banco o descripción..."
                className="w-full bg-white/10 border border-white/20 rounded-lg py-2 pl-10 pr-4 
                         text-white placeholder-white/50 focus:outline-none focus:ring-2 
                         focus:ring-rose-500/50 transition-all duration-200"
              />
              <Search className="absolute left-3 top-2.5 w-5 h-5 text-white/50" />
              {searchTerm && (
                <button
                  onClick={() => setSearchTerm('')}
                  className="absolute right-3 top-2.5 text-white/50 hover:text-white"
                >
                  <X className="w-4 h-4" />
                </button>
              )}
              <div className="absolute -bottom-6 left-0 text-xs text-white/40">
                Busca por nombre, categoría, banco, tarjeta o descripción
              </div>
            </div>
          </div>

          <div className="flex gap-4">
            <div className="relative">
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => setShowCategoryFilter(!showCategoryFilter)}
                className="flex items-center gap-2 px-4 py-2 bg-white/10 text-white rounded-lg 
                         hover:bg-white/20 transition-colors duration-200"
              >
                <Filter className="w-5 h-5" />
                <span className="hidden sm:inline">
                  {selectedCategory || 'Filtrar por Categoría'}
                </span>
              </motion.button>

              {/* Dropdown de categorías */}
              {showCategoryFilter && (
                <div className="absolute right-0 mt-2 w-64 bg-white/10 backdrop-blur-lg border 
                              border-white/20 rounded-lg shadow-xl z-50">
                  <div className="p-2">
                    <button
                      onClick={() => {
                        setSelectedCategory('');
                        setShowCategoryFilter(false);
                      }}
                      className="w-full text-left px-4 py-2 text-white hover:bg-white/10 rounded-lg"
                    >
                      Todas las categorías
                    </button>
                    {categories.map((category) => (
                      <button
                        key={category}
                        onClick={() => {
                          setSelectedCategory(category);
                          setShowCategoryFilter(false);
                        }}
                        className="w-full text-left px-4 py-2 text-white hover:bg-white/10 rounded-lg"
                      >
                        {category}
                      </button>
                    ))}
                  </div>
                </div>
              )}
            </div>

            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => setShowAddModal(true)}
              className="flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-rose-500 to-pink-500
                       text-white rounded-lg hover:from-rose-600 hover:to-pink-600 shadow-lg
                       hover:shadow-rose-500/25 transition-all duration-200"
            >
              <Plus className="w-5 h-5" />
              <span>Nueva Promoción</span>
            </motion.button>
          </div>
        </div>

        {/* Contador de resultados y filtro activo */}
        <div className="flex items-center gap-4 mb-6 text-white/60">
          <span>
            {filteredPromotions.length === promotions.length
              ? `${promotions.length} promociones`
              : `${filteredPromotions.length} de ${promotions.length} promociones`}
          </span>
          {selectedCategory && selectedCategory !== 'Todas' && (
            <div className="flex items-center gap-2 px-3 py-1 bg-white/10 rounded-full">
              <span>{selectedCategory}</span>
              <button
                onClick={() => setSelectedCategory('')}
                className="hover:text-white"
              >
                <X className="w-4 h-4" />
              </button>
            </div>
          )}
        </div>

        {/* Acciones de selección múltiple */}
        <div className="flex items-center gap-4 mb-6">
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={handleSelectAll}
            className="flex items-center gap-2 px-4 py-2 bg-white/10 text-white rounded-lg 
                     hover:bg-white/20 transition-colors"
          >
            {selectedPromotions.size === filteredPromotions.length ? (
              <CheckSquare className="w-5 h-5" />
            ) : (
              <Square className="w-5 h-5" />
            )}
            <span className="hidden sm:inline">
              {selectedPromotions.size === 0
                ? 'Seleccionar Todas'
                : selectedPromotions.size === filteredPromotions.length
                ? 'Deseleccionar Todas'
                : `${selectedPromotions.size} seleccionadas`}
            </span>
          </motion.button>

          {selectedPromotions.size > 0 && (
            <div className="flex gap-2">
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={handleExportCSV}
                className="flex items-center gap-2 px-4 py-2 bg-emerald-500/10 text-emerald-400 
                         rounded-lg hover:bg-emerald-500/20"
              >
                <FileText className="w-5 h-5" />
                <span className="hidden sm:inline">Exportar CSV</span>
              </motion.button>
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={handleDeleteSelected}
                className="flex items-center gap-2 px-4 py-2 bg-red-500/10 text-red-400 
                         rounded-lg hover:bg-red-500/20"
              >
                <Trash2 className="w-5 h-5" />
                <span className="hidden sm:inline">Eliminar</span>
              </motion.button>
            </div>
          )}
        </div>

        {/* Promotions Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredPromotions.map((promotion) => (
            <motion.div
              key={promotion.id}
              layout
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className={`bg-white/10 backdrop-blur-md rounded-lg border 
                        overflow-hidden group relative
                        ${selectedPromotions.has(promotion.id) 
                          ? 'border-rose-500' 
                          : 'border-white/20'}`}
            >
              {/* Checkbox de selección */}
              <div className="absolute top-2 right-2 z-10 flex gap-2">
                <button
                  onClick={() => handleSelect(promotion.id)}
                  className="p-1 bg-black/50 rounded-lg backdrop-blur-sm"
                >
                  {selectedPromotions.has(promotion.id) ? (
                    <CheckSquare className="w-5 h-5 text-rose-400" />
                  ) : (
                    <Square className="w-5 h-5 text-white/60" />
                  )}
                </button>
                <button
                  onClick={() => handleToggleActive(promotion.id)}
                  className={`p-1 rounded-lg backdrop-blur-sm ${
                    promotion.isActive 
                      ? 'bg-emerald-500/50 hover:bg-emerald-500/70' 
                      : 'bg-red-500/50 hover:bg-red-500/70'
                  }`}
                  title={promotion.isActive ? 'Desactivar promoción' : 'Activar promoción'}
                >
                  <Power className="w-5 h-5 text-white" />
                </button>
                <button
                  onClick={() => setEditingPromotion(promotion)}
                  className="p-1 bg-black/50 rounded-lg backdrop-blur-sm hover:bg-white/10"
                  title="Editar promoción"
                >
                  <Edit className="w-5 h-5 text-white/60 hover:text-white" />
                </button>
              </div>

              <div className="aspect-video relative overflow-hidden">
                <img
                  src={promotion.imageUrl}
                  alt={promotion.title}
                  className="w-full h-full object-cover"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent" />
                <div className="absolute bottom-4 left-4 right-4">
                  <span className="px-2 py-1 bg-rose-500 text-white text-sm rounded-full">
                    {promotion.discount} OFF
                  </span>
                </div>
              </div>

              <div className="p-4">
                <div className="flex justify-between items-start mb-2">
                  <h3 className="text-lg font-medium text-white">{promotion.title}</h3>
                  <span className={`px-2 py-1 rounded-full text-xs ${
                    promotion.isActive ? 'bg-emerald-500/20 text-emerald-300' : 'bg-red-500/20 text-red-300'
                  }`}>
                    {promotion.isActive ? 'Activa' : 'Inactiva'}
                  </span>
                </div>

                <p className="text-white/60 text-sm mb-4">{promotion.description}</p>

                <div className="space-y-2">
                  <div className="flex items-center gap-2 text-white/60 text-sm">
                    <Calendar className="w-4 h-4" />
                    <span>Hasta: {new Date(promotion.endDate).toLocaleDateString()}</span>
                  </div>
                  <div className="flex items-center gap-2 text-white/60 text-sm">
                    <Tag className="w-4 h-4" />
                    <span>{promotion.category}</span>
                  </div>
                </div>

                {promotion.conditions.length > 0 && (
                  <div className="mt-4 pt-4 border-t border-white/10">
                    <h4 className="text-sm font-medium text-white/80 mb-2">Condiciones:</h4>
                    <ul className="text-sm text-white/60 space-y-1">
                      {promotion.conditions.map((condition, index) => (
                        <li key={index} className="flex items-center gap-2">
                          <span className="w-1 h-1 bg-white/60 rounded-full" />
                          {condition}
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            </motion.div>
          ))}
        </div>
      </div>

      {/* Modal de nueva promoción */}
      <AddPromotionModal
        isOpen={showAddModal}
        onClose={() => setShowAddModal(false)}
        onAdd={(newPromotion) => {
          setPromotions(prev => [...prev, newPromotion]);
          setShowAddModal(false);
        }}
      />

      <AddPromotionModal
        isOpen={!!editingPromotion}
        onClose={() => setEditingPromotion(null)}
        onAdd={handleUpdatePromotion}
        editingPromotion={editingPromotion}
      />
    </div>
  );
} 


=== src/components/Promotions/index.ts ===
export { default } from './Promotions'; 


=== src/components/RecentTemplates.tsx ===
import React from 'react';
import { FileText, Clock } from 'lucide-react';

const recentTemplates = [
  { id: 1, name: 'Summer Sale Banner', type: 'Promotion', date: '2h ago' },
  { id: 2, name: 'Product Showcase', type: 'Product Info', date: '4h ago' },
  { id: 3, name: 'Store Directory', type: 'Directional', date: '1d ago' },
  { id: 4, name: 'Weekly Deals', type: 'Promotion', date: '2d ago' },
];

export default function RecentTemplates() {
  return (
    <div className="bg-white rounded-xl shadow-sm p-6">
      <h2 className="text-lg font-semibold text-gray-900 mb-4">Recent Templates</h2>
      <div className="space-y-4">
        {recentTemplates.map((template) => (
          <div key={template.id} className="flex items-center p-3 hover:bg-gray-50 rounded-lg transition-colors">
            <div className="bg-indigo-100 p-2 rounded-lg">
              <FileText className="h-5 w-5 text-indigo-600" />
            </div>
            <div className="ml-4 flex-1">
              <p className="text-sm font-medium text-gray-900">{template.name}</p>
              <p className="text-sm text-gray-500">{template.type}</p>
            </div>
            <div className="flex items-center text-sm text-gray-500">
              <Clock className="h-4 w-4 mr-1" />
              {template.date}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}


=== src/components/Settings/ConfigurationPortal.tsx ===
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Users, Shield, X, UserPlus, Settings, Plus } from 'lucide-react';
import { UsersTable } from './UsersTable';
import { RolesTable } from './RolesTable';

interface ConfigurationPortalProps {
  isOpen: boolean;
  onClose: () => void;
}

const mockUsers = [
  {
    id: '1',
    name: 'Admin Usuario',
    email: 'admin@ejemplo.com',
    role: 'Administrador',
    status: 'active' as const,
    lastLogin: 'Hace 2 horas'
  },
  {
    id: '2',
    name: 'Usuario Normal',
    email: 'usuario@ejemplo.com',
    role: 'Usuario',
    status: 'active' as const,
    lastLogin: 'Hace 1 día'
  }
];

const mockRoles = [
  {
    id: '1',
    name: 'Administrador',
    description: 'Control total del sistema',
    permissions: [
      { id: '1', name: 'Usuarios', description: 'Gestión de usuarios' },
      { id: '2', name: 'Roles', description: 'Gestión de roles' },
      { id: '3', name: 'Productos', description: 'Gestión de productos' }
    ],
    usersCount: 2
  },
  {
    id: '2',
    name: 'Usuario',
    description: 'Acceso básico al sistema',
    permissions: [
      { id: '3', name: 'Productos', description: 'Gestión de productos' }
    ],
    usersCount: 5
  }
];

export function ConfigurationPortal({ isOpen, onClose }: ConfigurationPortalProps) {
  const [activeTab, setActiveTab] = useState<'users' | 'roles' | 'general'>('users');

  const handleEditUser = (user: any) => {
    console.log('Editar usuario:', user);
  };

  const handleDeleteUser = (userId: string) => {
    console.log('Eliminar usuario:', userId);
  };

  const handleStatusChange = (userId: string, newStatus: 'active' | 'inactive') => {
    console.log('Cambiar estado:', userId, newStatus);
  };

  const handleEditRole = (role: any) => {
    console.log('Editar rol:', role);
  };

  const handleDeleteRole = (roleId: string) => {
    console.log('Eliminar rol:', roleId);
  };

  if (!isOpen) return null;

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center"
    >
      <motion.div
        initial={{ scale: 0.95 }}
        animate={{ scale: 1 }}
        className="bg-white rounded-2xl shadow-xl w-full max-w-6xl max-h-[80vh] overflow-hidden"
      >
        <div className="border-b border-gray-200 p-6 flex justify-between items-center">
          <h2 className="text-2xl font-semibold text-gray-900">Configuración del Sistema</h2>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-full transition-colors"
          >
            <X className="w-5 h-5 text-gray-500" />
          </button>
        </div>

        <div className="border-b border-gray-200">
          <nav className="flex gap-4 p-4">
            <button
              onClick={() => setActiveTab('users')}
              className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors
                ${activeTab === 'users' ? 'bg-violet-100 text-violet-600' : 'text-gray-600 hover:bg-gray-100'}`}
            >
              <Users className="w-4 h-4" />
              Usuarios
            </button>
            <button
              onClick={() => setActiveTab('roles')}
              className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors
                ${activeTab === 'roles' ? 'bg-violet-100 text-violet-600' : 'text-gray-600 hover:bg-gray-100'}`}
            >
              <Shield className="w-4 h-4" />
              Roles y Permisos
            </button>
            <button
              onClick={() => setActiveTab('general')}
              className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors
                ${activeTab === 'general' ? 'bg-violet-100 text-violet-600' : 'text-gray-600 hover:bg-gray-100'}`}
            >
              <Settings className="w-4 h-4" />
              General
            </button>
          </nav>
        </div>

        <div className="p-6 overflow-y-auto max-h-[calc(80vh-140px)]">
          {activeTab === 'users' && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h3 className="text-lg font-medium text-gray-900">Gestión de Usuarios</h3>
                <button className="flex items-center gap-2 px-4 py-2 bg-violet-600 text-white rounded-lg hover:bg-violet-700 transition-colors">
                  <UserPlus className="w-4 h-4" />
                  Nuevo Usuario
                </button>
              </div>
              <UsersTable
                users={mockUsers}
                onEdit={handleEditUser}
                onDelete={handleDeleteUser}
                onStatusChange={handleStatusChange}
              />
            </div>
          )}
          
          {activeTab === 'roles' && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h3 className="text-lg font-medium text-gray-900">Gestión de Roles</h3>
                <button className="flex items-center gap-2 px-4 py-2 bg-violet-600 text-white rounded-lg hover:bg-violet-700 transition-colors">
                  <Plus className="w-4 h-4" />
                  Nuevo Rol
                </button>
              </div>
              <RolesTable
                roles={mockRoles}
                onEdit={handleEditRole}
                onDelete={handleDeleteRole}
              />
            </div>
          )}
          
          {activeTab === 'general' && (
            <div>
              <h3 className="text-lg font-medium text-gray-900 mb-4">Configuración General</h3>
              {/* Aquí puedes agregar la configuración general */}
            </div>
          )}
        </div>
      </motion.div>
    </motion.div>
  );
} 


=== src/components/Settings/RolesTable.tsx ===
import React from 'react';
import { Edit2, Trash2, Shield } from 'lucide-react';

interface Permission {
  id: string;
  name: string;
  description: string;
}

interface Role {
  id: string;
  name: string;
  description: string;
  permissions: Permission[];
  usersCount: number;
}

interface RolesTableProps {
  roles: Role[];
  onEdit: (role: Role) => void;
  onDelete: (roleId: string) => void;
}

export function RolesTable({ roles, onEdit, onDelete }: RolesTableProps) {
  return (
    <div className="overflow-x-auto">
      <table className="w-full text-sm text-left">
        <thead className="text-xs uppercase bg-gray-50">
          <tr>
            <th className="px-6 py-3">Rol</th>
            <th className="px-6 py-3">Descripción</th>
            <th className="px-6 py-3">Permisos</th>
            <th className="px-6 py-3">Usuarios</th>
            <th className="px-6 py-3">Acciones</th>
          </tr>
        </thead>
        <tbody>
          {roles.map((role) => (
            <tr key={role.id} className="bg-white border-b hover:bg-gray-50">
              <td className="px-6 py-4 font-medium text-gray-900">
                <div className="flex items-center gap-2">
                  <Shield className="w-4 h-4 text-violet-500" />
                  {role.name}
                </div>
              </td>
              <td className="px-6 py-4">{role.description}</td>
              <td className="px-6 py-4">
                <div className="flex flex-wrap gap-1">
                  {role.permissions.map((permission) => (
                    <span
                      key={permission.id}
                      className="px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
                    >
                      {permission.name}
                    </span>
                  ))}
                </div>
              </td>
              <td className="px-6 py-4">
                <span className="px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                  {role.usersCount} usuarios
                </span>
              </td>
              <td className="px-6 py-4">
                <div className="flex items-center gap-2">
                  <button
                    onClick={() => onEdit(role)}
                    className="p-1 hover:bg-violet-100 rounded-lg transition-colors text-violet-600"
                  >
                    <Edit2 className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() => onDelete(role.id)}
                    className="p-1 hover:bg-red-100 rounded-lg transition-colors text-red-600"
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
} 


=== src/components/Settings/UsersTable.tsx ===
import React from 'react';
import { Edit2, Trash2, CheckCircle, XCircle } from 'lucide-react';

interface User {
  id: string;
  name: string;
  email: string;
  role: string;
  status: 'active' | 'inactive';
  lastLogin?: string;
}

interface UsersTableProps {
  users: User[];
  onEdit: (user: User) => void;
  onDelete: (userId: string) => void;
  onStatusChange: (userId: string, newStatus: 'active' | 'inactive') => void;
}

export function UsersTable({ users, onEdit, onDelete, onStatusChange }: UsersTableProps) {
  return (
    <div className="overflow-x-auto">
      <table className="w-full text-sm text-left">
        <thead className="text-xs uppercase bg-gray-50">
          <tr>
            <th className="px-6 py-3">Usuario</th>
            <th className="px-6 py-3">Email</th>
            <th className="px-6 py-3">Rol</th>
            <th className="px-6 py-3">Estado</th>
            <th className="px-6 py-3">Último acceso</th>
            <th className="px-6 py-3">Acciones</th>
          </tr>
        </thead>
        <tbody>
          {users.map((user) => (
            <tr key={user.id} className="bg-white border-b hover:bg-gray-50">
              <td className="px-6 py-4 font-medium text-gray-900">{user.name}</td>
              <td className="px-6 py-4">{user.email}</td>
              <td className="px-6 py-4">
                <span className="px-2 py-1 rounded-full text-xs font-medium bg-violet-100 text-violet-800">
                  {user.role}
                </span>
              </td>
              <td className="px-6 py-4">
                <button
                  onClick={() => onStatusChange(user.id, user.status === 'active' ? 'inactive' : 'active')}
                  className={`flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium
                    ${user.status === 'active' 
                      ? 'bg-green-100 text-green-800' 
                      : 'bg-red-100 text-red-800'}`}
                >
                  {user.status === 'active' ? <CheckCircle className="w-3 h-3" /> : <XCircle className="w-3 h-3" />}
                  {user.status === 'active' ? 'Activo' : 'Inactivo'}
                </button>
              </td>
              <td className="px-6 py-4 text-gray-500">{user.lastLogin || 'Nunca'}</td>
              <td className="px-6 py-4">
                <div className="flex items-center gap-2">
                  <button
                    onClick={() => onEdit(user)}
                    className="p-1 hover:bg-violet-100 rounded-lg transition-colors text-violet-600"
                  >
                    <Edit2 className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() => onDelete(user.id)}
                    className="p-1 hover:bg-red-100 rounded-lg transition-colors text-red-600"
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
} 


=== src/components/effects/BlockParticles.tsx ===
import { useCallback } from "react";
import Particles from "react-particles";
import type { Container, Engine } from "tsparticles-engine";
import { loadFull } from "tsparticles";

export default function BlockParticles() {
  const particlesInit = useCallback(async (engine: Engine) => {
    await loadFull(engine);
  }, []);

  const particlesLoaded = useCallback(async (container: Container | undefined) => {
    console.log(container);
  }, []);

  return (
    <Particles
      id="tsparticles"
      init={particlesInit}
      loaded={particlesLoaded}
      options={{
        background: {
          opacity: 0
        },
        fpsLimit: 120,
        particles: {
          color: {
            value: "#6366f1"
          },
          links: {
            enable: false
          },
          move: {
            direction: "none",
            enable: true,
            outModes: {
              default: "bounce"
            },
            random: false,
            speed: 2,
            straight: false
          },
          number: {
            density: {
              enable: true,
              area: 800
            },
            value: 80
          },
          opacity: {
            value: 0.5
          },
          shape: {
            type: "circle"
          },
          size: {
            value: { min: 1, max: 3 }
          }
        },
        detectRetina: true
      }}
    />
  );
} 


=== src/components/shared/Header.tsx ===
import React from 'react';
import { ArrowLeft, LogOut, Settings } from 'lucide-react';
import { motion } from 'framer-motion';

interface HeaderProps {
  onBack?: () => void;
  onLogout: () => void;
  onSettings: () => void;
}

export function Header({ onBack, onLogout, onSettings }: HeaderProps) {
  const handleSettingsClick = () => {
    console.log('Settings button clicked in Header');
    onSettings();
  };

  return (
    <div className="bg-gradient-to-br from-slate-900 via-blue-900 to-violet-900 border-b border-white/10 shadow-lg">
      <div className="max-w-7xl mx-auto px-4">
        <div className="flex justify-between items-center h-16 relative">
          {onBack && (
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={onBack}
              className="flex items-center text-white/80 hover:text-white"
            >
              <ArrowLeft className="w-5 h-5 mr-2" />
              <span className="font-medium">Volver al inicio</span>
            </motion.button>
          )}

          <span className="absolute left-1/2 -translate-x-1/2 text-white font-light text-2xl tracking-tight">
            Speed<span className="text-violet-400">+</span>
          </span>

          <div className="flex items-center gap-4">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={handleSettingsClick}
              className="p-2 rounded-lg bg-white/10 hover:bg-white/20 text-white/80 hover:text-white transition-colors flex items-center gap-2"
            >
              <Settings className="w-5 h-5" />
              <span className="text-sm">Configuración</span>
            </motion.button>

            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={onLogout}
              className="p-2 rounded-lg bg-white/10 hover:bg-white/20 text-white/80 hover:text-white transition-colors"
            >
              <LogOut className="w-5 h-5" />
            </motion.button>
          </div>
        </div>
      </div>
    </div>
  );
} 


=== src/components/ui/button.tsx ===
import { ButtonHTMLAttributes, forwardRef } from 'react';
import { cn } from '../../utils/cn';

export interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'default' | 'destructive' | 'outline' | 'ghost';
  size?: 'default' | 'sm' | 'lg';
}

const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant = 'default', size = 'default', ...props }, ref) => {
    return (
      <button
        className={cn(
          'inline-flex items-center justify-center rounded-md font-medium transition-colors',
          'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2',
          'disabled:opacity-50 disabled:pointer-events-none',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);

Button.displayName = 'Button';

export { Button }; 


=== src/components/ui/input.tsx ===
import { InputHTMLAttributes, forwardRef } from 'react';
import { cn } from '../../utils/cn';

export interface InputProps extends InputHTMLAttributes<HTMLInputElement> {}

const Input = forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2',
          'text-sm ring-offset-background file:border-0 file:bg-transparent',
          'file:text-sm file:font-medium placeholder:text-muted-foreground',
          'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring',
          'focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);

Input.displayName = 'Input';

export { Input }; 


=== src/components/ui/use-toast.ts ===
import { useState } from 'react';

interface Toast {
  variant: 'default' | 'destructive';
  title: string;
  description?: string;
}

export function useToast() {
  const [toasts, setToasts] = useState<Toast[]>([]);

  const toast = (toast: Toast) => {
    setToasts((prev) => [...prev, toast]);
    
    // Auto dismiss after 5 seconds
    setTimeout(() => {
      setToasts((prev) => prev.filter((t) => t !== toast));
    }, 5000);
  };

  return { toast, toasts };
} 


=== src/config/mapbox.ts ===
export const MAPBOX_TOKEN = 'pk.eyJ1IjoiZ2RlcHJhdGkiLCJhIjoiY2xwdnB2ZWR4MDJrYTJqbXVqZzVxbGV0ZiJ9.vVBOqMgih-GqWZxBXGJBXA'; 


=== src/data/banks.ts ===
export interface Bank {
  id: string;
  name: string;
  logoUrl: string;
}

export const banks: Bank[] = [
  {
    id: 'santander',
    name: 'Santander',
    logoUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/b/b8/Banco_Santander_Logotipo.svg/2560px-Banco_Santander_Logotipo.svg.png'
  },
  {
    id: 'galicia',
    name: 'Banco Galicia',
    logoUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Logo_Banco_Galicia.svg/2560px-Logo_Banco_Galicia.svg.png'
  },
  {
    id: 'bbva',
    name: 'BBVA',
    logoUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/0/05/BBVA_2019.svg/2560px-BBVA_2019.svg.png'
  },
  {
    id: 'macro',
    name: 'Banco Macro',
    logoUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/0/0a/Banco_Macro_Logo.svg/2560px-Banco_Macro_Logo.svg.png'
  },
  {
    id: 'hsbc',
    name: 'HSBC',
    logoUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/aa/HSBC_logo_%282018%29.svg/2560px-HSBC_logo_%282018%29.svg.png'
  },
  {
    id: 'icbc',
    name: 'ICBC',
    logoUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/3/36/ICBC_logo.svg/2560px-ICBC_logo.svg.png'
  },
  {
    id: 'ciudad',
    name: 'Banco Ciudad',
    logoUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Banco_Ciudad_logo.svg/2560px-Banco_Ciudad_logo.svg.png'
  },
  {
    id: 'provincia',
    name: 'Banco Provincia',
    logoUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d8/Banco_Provincia_logo.svg/2560px-Banco_Provincia_logo.svg.png'
  },
  {
    id: 'nacion',
    name: 'Banco Nación',
    logoUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/4/4f/Banco_de_la_Nacion_Argentina_logo.svg/2560px-Banco_de_la_Nacion_Argentina_logo.svg.png'
  },
  {
    id: 'supervielle',
    name: 'Banco Supervielle',
    logoUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/2/2f/Banco_Supervielle_Logo.svg/2560px-Banco_Supervielle_Logo.svg.png'
  },
  {
    id: 'patagonia',
    name: 'Banco Patagonia',
    logoUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/8/83/Banco_Patagonia_logo.svg/2560px-Banco_Patagonia_logo.svg.png'
  },
  {
    id: 'comafi',
    name: 'Banco Comafi',
    logoUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/1/1a/Banco_Comafi_logo.svg/2560px-Banco_Comafi_logo.svg.png'
  }
]; 


=== src/data/companies.ts ===
export interface Company {
  id: string;
  name: string;
  logo: string;
}

export const COMPANIES: Company[] = [
  { 
    id: 'no-logo', 
    name: 'TODAS',
    logo: 'https://upload.wikimedia.org/wikipedia/commons/thumb/d/dc/Cencosud_logo.svg/1200px-Cencosud_logo.svg.png'
  },
  { 
    id: 'jumbo', 
    name: 'Jumbo', 
    logo: 'https://upload.wikimedia.org/wikipedia/commons/d/d3/Logo_Jumbo_Cencosud.png'
  },
  { 
    id: 'disco', 
    name: 'Disco', 
    logo: 'https://upload.wikimedia.org/wikipedia/commons/thumb/0/07/Disco-Supermarket-Logo.svg/2048px-Disco-Supermarket-Logo.svg.png'
  },
  { 
    id: 'vea', 
    name: 'Vea', 
    logo: 'https://upload.wikimedia.org/wikipedia/commons/9/94/Logo-VEA-Supermercados.png'
  },
  { 
    id: 'easy-mdh', 
    name: 'Easy (MDH)', 
    logo: 'https://upload.wikimedia.org/wikipedia/commons/thumb/7/7c/Easy-Logo.svg/2048px-Easy-Logo.svg.png'
  }
]; 


=== src/data/locations.ts ===
export const REGIONS = [
  { id: 'todos', name: 'Todas las Regiones' },
  { id: 'centro', name: 'Buenos Aires Centro' },
  { id: 'norte', name: 'Buenos Aires Norte' },
  { id: 'sur', name: 'Buenos Aires Sur' }
];

export const LOCATIONS = [
  // Jumbo
  { 
    id: 'jumbo-once', 
    name: 'Jumbo Once', 
    region: 'centro',
    coordinates: [-58.4055, -34.6087] as [number, number],
    address: 'Av. Rivadavia 3050, CABA'
  },
  { 
    id: 'jumbo-palermo', 
    name: 'Jumbo Palermo', 
    region: 'centro',
    coordinates: [-58.4272, -34.5866] as [number, number],
    address: 'Av. Bullrich 345, CABA'
  },
  { 
    id: 'jumbo-almagro', 
    name: 'Jumbo Almagro', 
    region: 'centro',
    coordinates: [-58.4201, -34.6103] as [number, number],
    address: 'Av. Díaz Vélez 4580, CABA'
  },
  { 
    id: 'jumbo-flores', 
    name: 'Jumbo Flores', 
    region: 'centro',
    coordinates: [-58.4634, -34.6278] as [number, number],
    address: 'Av. Rivadavia 6900, CABA'
  },
  { 
    id: 'jumbo-devoto', 
    name: 'Jumbo Villa Devoto', 
    region: 'centro',
    coordinates: [-58.5134, -34.5989] as [number, number],
    address: 'Av. Francisco Beiró 5150, CABA'
  },

  // Disco
  { 
    id: 'disco-caballito', 
    name: 'Disco Caballito', 
    region: 'centro',
    coordinates: [-58.4401, -34.6190] as [number, number],
    address: 'Av. Rivadavia 4800, CABA'
  },
  { 
    id: 'disco-belgrano', 
    name: 'Disco Belgrano', 
    region: 'centro',
    coordinates: [-58.4566, -34.5579] as [number, number],
    address: 'Av. Cabildo 2280, CABA'
  },
  { 
    id: 'disco-nunez', 
    name: 'Disco Núñez', 
    region: 'centro',
    coordinates: [-58.4566, -34.5450] as [number, number],
    address: 'Av. Cabildo 3600, CABA'
  },
  { 
    id: 'disco-recoleta', 
    name: 'Disco Recoleta', 
    region: 'centro',
    coordinates: [-58.3876, -34.5875] as [number, number],
    address: 'Av. Santa Fe 1600, CABA'
  },
  { 
    id: 'disco-palermo', 
    name: 'Disco Palermo', 
    region: 'centro',
    coordinates: [-58.4302, -34.5876] as [number, number],
    address: 'Av. Santa Fe 3700, CABA'
  },

  // Vea
  { 
    id: 'vea-flores', 
    name: 'Vea Flores', 
    region: 'centro',
    coordinates: [-58.4634, -34.6278] as [number, number],
    address: 'Av. Rivadavia 7000, CABA'
  },
  { 
    id: 'vea-liniers', 
    name: 'Vea Liniers', 
    region: 'centro',
    coordinates: [-58.5234, -34.6378] as [number, number],
    address: 'Av. Rivadavia 11500, CABA'
  },
  { 
    id: 'vea-mataderos', 
    name: 'Vea Mataderos', 
    region: 'centro',
    coordinates: [-58.5034, -34.6578] as [number, number],
    address: 'Av. Eva Perón 5500, CABA'
  },
  { 
    id: 'vea-pompeya', 
    name: 'Vea Nueva Pompeya', 
    region: 'centro',
    coordinates: [-58.4134, -34.6478] as [number, number],
    address: 'Av. Sáenz 1200, CABA'
  },
  { 
    id: 'vea-soldati', 
    name: 'Vea Villa Soldati', 
    region: 'centro',
    coordinates: [-58.4334, -34.6678] as [number, number],
    address: 'Av. Roca 3000, CABA'
  },

  // Zona Norte
  { 
    id: 'jumbo-san-isidro', 
    name: 'Jumbo San Isidro', 
    region: 'norte',
    coordinates: [-58.5274, -34.4707] as [number, number],
    address: 'Paraná 3745, San Isidro'
  },
  { 
    id: 'jumbo-unicenter', 
    name: 'Jumbo Unicenter', 
    region: 'norte',
    coordinates: [-58.5274, -34.5107] as [number, number],
    address: 'Paraná 3600, Martínez'
  },
  { 
    id: 'jumbo-tigre', 
    name: 'Jumbo Tigre', 
    region: 'norte',
    coordinates: [-58.5796, -34.4265] as [number, number],
    address: 'Av. Cazón 1250, Tigre'
  },
  { 
    id: 'jumbo-pilar', 
    name: 'Jumbo Pilar', 
    region: 'norte',
    coordinates: [-58.9137, -34.4585] as [number, number],
    address: 'Au. Panamericana Km 50, Pilar'
  },
  { 
    id: 'jumbo-nordelta', 
    name: 'Jumbo Nordelta', 
    region: 'norte',
    coordinates: [-58.6396, -34.4065] as [number, number],
    address: 'Av. de los Lagos 7000, Nordelta'
  },

  // Zona Sur
  { 
    id: 'vea-lomas', 
    name: 'Vea Lomas de Zamora', 
    region: 'sur',
    coordinates: [-58.4066, -34.7611] as [number, number],
    address: 'Av. Hipólito Yrigoyen 8230, Lomas de Zamora'
  },
  { 
    id: 'jumbo-avellaneda', 
    name: 'Jumbo Avellaneda', 
    region: 'sur',
    coordinates: [-58.3669, -34.6606] as [number, number],
    address: 'Av. Mitre 639, Avellaneda'
  },
  { 
    id: 'disco-quilmes', 
    name: 'Disco Quilmes', 
    region: 'sur',
    coordinates: [-58.2529, -34.7207] as [number, number],
    address: 'Av. Calchaquí 3950, Quilmes'
  },
  { 
    id: 'vea-laplata', 
    name: 'Vea La Plata', 
    region: 'sur',
    coordinates: [-57.9544, -34.9214] as [number, number],
    address: 'Calle 13 entre 34 y 35, La Plata'
  },
  { 
    id: 'jumbo-laplata', 
    name: 'Jumbo La Plata', 
    region: 'sur',
    coordinates: [-57.9644, -34.9114] as [number, number],
    address: 'Av. 19 850, La Plata'
  },

  // Easy - Buenos Aires Centro
  { 
    id: 'easy-mdh-rivadavia', 
    name: 'Easy Rivadavia', 
    region: 'centro',
    coordinates: [-58.4198, -34.6152] as [number, number],
    address: 'Av. Rivadavia 3666, Buenos Aires'
  },
  { 
    id: 'easy-mdh-palermo', 
    name: 'Easy Palermo', 
    region: 'centro',
    coordinates: [-58.4272, -34.5866] as [number, number],
    address: 'Av. Bullrich 345, Buenos Aires'
  },
  { 
    id: 'easy-mdh-floresta', 
    name: 'Easy Floresta', 
    region: 'centro',
    coordinates: [-58.4689, -34.6289] as [number, number],
    address: 'Av. Rivadavia 5751, Floresta'
  },

  // Easy - Buenos Aires Norte
  { 
    id: 'easy-mdh-san-martin', 
    name: 'Easy San Martín', 
    region: 'norte',
    coordinates: [-58.5128, -34.5705] as [number, number],
    address: 'Av. de los Constituyentes 6020, San Martín'
  },
  { 
    id: 'easy-mdh-vicente-lopez', 
    name: 'Easy Vicente López', 
    region: 'norte',
    coordinates: [-58.4729, -34.5305] as [number, number],
    address: 'Av. Libertador 1201, Vicente López'
  },
  { 
    id: 'easy-mdh-unicenter', 
    name: 'Easy Unicenter', 
    region: 'norte',
    coordinates: [-58.5274, -34.5107] as [number, number],
    address: 'Paraná 3745, Martínez'
  },
  { 
    id: 'easy-mdh-pilar', 
    name: 'Easy Pilar', 
    region: 'norte',
    coordinates: [-58.9137, -34.4585] as [number, number],
    address: 'Au. Panamericana Km 50, Pilar'
  },

  // Easy - Buenos Aires Sur
  { 
    id: 'easy-mdh-fiorito', 
    name: 'Easy Fiorito', 
    region: 'sur',
    coordinates: [-58.4498, -34.6789] as [number, number],
    address: 'Av. Fernandez de la Cruz 4602, Fiorito'
  },
  { 
    id: 'easy-mdh-avellaneda', 
    name: 'Easy Avellaneda', 
    region: 'sur',
    coordinates: [-58.3669, -34.6606] as [number, number],
    address: 'Av. Mitre 639, Avellaneda'
  },
  { 
    id: 'easy-mdh-quilmes', 
    name: 'Easy Quilmes', 
    region: 'sur',
    coordinates: [-58.2529, -34.7207] as [number, number],
    address: 'Av. Calchaquí 3950, Quilmes'
  },

  // Jumbo - Buenos Aires Centro
  { 
    id: 'jumbo-caballito', 
    name: 'Jumbo Caballito', 
    region: 'centro',
    coordinates: [-58.4401, -34.6190] as [number, number],
    address: 'Av. Rivadavia 5108, Caballito, CABA'
  },
  { 
    id: 'jumbo-madero', 
    name: 'Jumbo Puerto Madero', 
    region: 'centro',
    coordinates: [-58.3636, -34.6161] as [number, number],
    address: 'Av. Alicia Moreau de Justo 1190, Puerto Madero, CABA'
  },

  // Jumbo - Zona Norte
  { 
    id: 'jumbo-san-fernando', 
    name: 'Jumbo San Fernando', 
    region: 'norte',
    coordinates: [-58.5563, -34.4441] as [number, number],
    address: 'Av. Presidente Perón 1950, San Fernando'
  },
  { 
    id: 'jumbo-pacheco', 
    name: 'Jumbo Pacheco', 
    region: 'norte',
    coordinates: [-58.6396, -34.4532] as [number, number],
    address: 'Av. Hipólito Yrigoyen 3636, General Pacheco'
  },
  { 
    id: 'jumbo-escobar', 
    name: 'Jumbo Escobar', 
    region: 'norte',
    coordinates: [-58.7921, -34.3485] as [number, number],
    address: 'Ruta 9 Km 45, Belén de Escobar'
  },

  // Jumbo - Zona Sur
  { 
    id: 'jumbo-lomas', 
    name: 'Jumbo Lomas de Zamora', 
    region: 'sur',
    coordinates: [-58.4066, -34.7611] as [number, number],
    address: 'Av. Antártida Argentina 1111, Lomas de Zamora'
  },
  { 
    id: 'jumbo-banfield', 
    name: 'Jumbo Banfield', 
    region: 'sur',
    coordinates: [-58.4027, -34.7428] as [number, number],
    address: 'Av. Hipólito Yrigoyen 7618, Banfield'
  },

  // Disco - Buenos Aires Centro (adicionales)
  { 
    id: 'disco-flores', 
    name: 'Disco Flores', 
    region: 'centro',
    coordinates: [-58.4634, -34.6278] as [number, number],
    address: 'Av. Rivadavia 6800, Flores, CABA'
  },
  { 
    id: 'disco-villa-crespo', 
    name: 'Disco Villa Crespo', 
    region: 'centro',
    coordinates: [-58.4401, -34.5990] as [number, number],
    address: 'Av. Corrientes 5200, Villa Crespo, CABA'
  },
  { 
    id: 'disco-almagro', 
    name: 'Disco Almagro', 
    region: 'centro',
    coordinates: [-58.4201, -34.6103] as [number, number],
    address: 'Av. Rivadavia 3800, Almagro, CABA'
  },

  // Disco - Zona Norte
  { 
    id: 'disco-vicente-lopez', 
    name: 'Disco Vicente López', 
    region: 'norte',
    coordinates: [-58.4729, -34.5305] as [number, number],
    address: 'Av. Maipú 1200, Vicente López'
  },
  { 
    id: 'disco-martinez', 
    name: 'Disco Martínez', 
    region: 'norte',
    coordinates: [-58.5274, -34.5107] as [number, number],
    address: 'Av. Santa Fe 2000, Martínez'
  },
  { 
    id: 'disco-san-isidro', 
    name: 'Disco San Isidro', 
    region: 'norte',
    coordinates: [-58.5274, -34.4707] as [number, number],
    address: 'Av. del Libertador 16.200, San Isidro'
  },

  // Disco - Zona Sur
  { 
    id: 'disco-lomas', 
    name: 'Disco Lomas de Zamora', 
    region: 'sur',
    coordinates: [-58.4066, -34.7611] as [number, number],
    address: 'Av. Hipólito Yrigoyen 8400, Lomas de Zamora'
  },
  { 
    id: 'disco-avellaneda', 
    name: 'Disco Avellaneda', 
    region: 'sur',
    coordinates: [-58.3669, -34.6606] as [number, number],
    address: 'Av. Mitre 500, Avellaneda'
  },
  { 
    id: 'disco-banfield', 
    name: 'Disco Banfield', 
    region: 'sur',
    coordinates: [-58.4027, -34.7428] as [number, number],
    address: 'Av. Hipólito Yrigoyen 7500, Banfield'
  }
]; 


=== src/data/products.ts ===
interface Product {
  id: string;
  name: string;
  category: string;
  price: number;
  // Campos comunes obligatorios
  sku?: string;
  description?: string;
  imageUrl?: string;
  // Nuevos campos opcionales
  subCategory?: string;
  brand?: string;
  image?: string;
  packageType?: string;
  volume?: string;
}

export const products: Product[] = [
  // Productos MDH (Easy) existentes
  {
    id: 'MDH-001',
    sku: 'MDH-001',
    name: 'Aire Acondicionado Split Surrey 3000FC',
    price: 449999.99,
    imageUrl: 'https://images.unsplash.com/photo-1631385309847-960f92ec3585',
    category: 'MDH',
    description: 'Split Inverter Frío/Calor 3000 Frigorías'
  },
  {
    id: 'MDH-002',
    sku: 'MDH-002',
    name: 'Heladera Whirlpool No Frost 375L',
    price: 699999.99,
    imageUrl: 'https://images.unsplash.com/photo-1584568694244-14fbdf83bd30',
    category: 'MDH',
    description: 'Heladera No Frost con freezer superior'
  },
  {
    id: 'MDH-003',
    sku: 'MDH-003',
    name: 'Lavarropas Drean Next 8.14',
    price: 259999.99,
    imageUrl: 'https://images.unsplash.com/photo-1626806787461-102c1bfaaea1',
    category: 'MDH',
    description: 'Lavarropas automático de 8kg con 1400RPM'
  },
  {
    id: 'MDH-004',
    sku: 'MDH-004',
    name: 'Smart TV Samsung 55" 4K',
    price: 349999.99,
    imageUrl: 'https://images.unsplash.com/photo-1593359677879-a4bb92f829d1',
    category: 'MDH',
    description: 'Smart TV LED 55" UHD 4K'
  },
  {
    id: 'MDH-005',
    sku: 'MDH-005',
    name: 'Microondas BGH 28L',
    price: 89999.99,
    imageUrl: 'https://images.unsplash.com/photo-1585659722983-3a675dabf23d',
    category: 'MDH',
    description: 'Microondas digital 28L con grill'
  },
  {
    id: 'MDH-006',
    sku: 'MDH-006',
    name: 'Aspiradora Robot Gadnic',
    price: 79999.99,
    imageUrl: 'https://images.unsplash.com/photo-1563874257547-d19fbb71b46c',
    category: 'MDH',
    description: 'Aspiradora Robot con control remoto'
  },
  {
    id: 'MDH-007',
    sku: 'MDH-007',
    name: 'Ventilador de Pie Liliana',
    price: 29999.99,
    imageUrl: 'https://images.unsplash.com/photo-1575435349939-0ffbdad70905',
    category: 'MDH',
    description: 'Ventilador de pie 20" con control remoto'
  },
  {
    id: 'MDH-008',
    sku: 'MDH-008',
    name: 'Cafetera Oster',
    price: 49999.99,
    imageUrl: 'https://images.unsplash.com/photo-1585515320310-259814833e62',
    category: 'MDH',
    description: 'Cafetera automática con molinillo'
  },
  {
    id: 'TEC-001',
    sku: 'TEC-001',
    name: 'MacBook Pro M3 Pro 14"',
    price: 1299999.99,
    imageUrl: 'https://images.unsplash.com/photo-1517336714731-489689fd1ca8',
    category: 'Tecnología',
    description: 'Laptop Apple M3 Pro 14 pulgadas'
  },
  {
    id: 'TEC-002',
    sku: 'TEC-002',
    name: 'iPad Pro 12.9"',
    price: 799999.99,
    imageUrl: 'https://images.unsplash.com/photo-1544244015-0df4b3ffc6b0',
    category: 'Tecnología',
    description: 'iPad Pro 12.9" M2 256GB'
  },
  {
    id: 'TEC-003',
    sku: 'TEC-003',
    name: 'iPhone 15 Pro Max',
    price: 999999.99,
    imageUrl: 'https://images.unsplash.com/photo-1510557880182-3d4d3cba35a5',
    category: 'Tecnología',
    description: 'iPhone 15 Pro Max 256GB'
  },
  {
    id: 'TEC-004',
    sku: 'TEC-004',
    name: 'AirPods Pro 2',
    price: 199999.99,
    imageUrl: 'https://images.unsplash.com/photo-1588423771073-b8903fbb85b5',
    category: 'Tecnología',
    description: 'AirPods Pro 2nd Generation'
  },
  {
    id: 'TEC-005',
    sku: 'TEC-005',
    name: 'Apple Watch Series 9',
    price: 299999.99,
    imageUrl: 'https://images.unsplash.com/photo-1434493789847-2f02dc6ca35d',
    category: 'Tecnología',
    description: 'Apple Watch Series 9 GPS 45mm'
  },
  {
    id: 'TEC-006',
    sku: 'TEC-006',
    name: 'Samsung Galaxy S23 Ultra',
    price: 899999.99,
    imageUrl: 'https://images.unsplash.com/photo-1610945265064-0e34e5519bbf',
    category: 'Tecnología',
    description: 'Smartphone Samsung 256GB'
  },
  {
    id: 'TEC-007',
    sku: 'TEC-007',
    name: 'Notebook HP Pavilion',
    price: 699999.99,
    imageUrl: 'https://images.unsplash.com/photo-1588872657578-7efd1f1555ed',
    category: 'Tecnología',
    description: 'Laptop HP 15" Ryzen 7'
  },
  {
    id: 'BEB-001',
    sku: 'BEB-001',
    name: 'Coca Cola Pack x6',
    price: 4999.99,
    imageUrl: 'https://images.unsplash.com/photo-1554866585-cd94860890b7',
    category: 'Bebidas',
    description: 'Pack x6 botellas de 2.25L'
  },
  {
    id: 'BEB-002',
    sku: 'BEB-002',
    name: 'Pepsi Pack x6',
    price: 4799.99,
    imageUrl: 'https://images.unsplash.com/photo-1629203851122-3726ecdf080e',
    category: 'Bebidas',
    description: 'Pack x6 botellas de 2.25L'
  },
  {
    id: 'BEB-003',
    sku: 'BEB-003',
    name: 'Sprite Pack x6',
    price: 4599.99,
    imageUrl: 'https://images.unsplash.com/photo-1625772299848-391b6a87d7b3',
    category: 'Bebidas',
    description: 'Pack x6 botellas de 2.25L'
  },
  {
    id: 'BEB-004',
    sku: 'BEB-004',
    name: 'Fanta Pack x6',
    price: 4599.99,
    imageUrl: 'https://images.unsplash.com/photo-1624517452488-04869289c4ca',
    category: 'Bebidas',
    description: 'Pack x6 botellas de 2.25L'
  },
  {
    id: 'BEB-005',
    sku: 'BEB-005',
    name: 'Cerveza Quilmes Pack x6',
    price: 3999.99,
    imageUrl: 'https://images.unsplash.com/photo-1608270586620-248524c67de9',
    category: 'Bebidas',
    description: 'Pack x6 latas de 473ml'
  },
  {
    id: 'BEB-006',
    sku: 'BEB-006',
    name: 'Coca-cola Zero',
    price: 1299.99,
    imageUrl: 'https://images.unsplash.com/photo-1622483767028-3f66f32aef97',
    category: 'Bebidas',
    subCategory: 'Gaseosas',
    brand: 'COCA COLA',
    packageType: 'Botella de Plástico',
    volume: '2.25 L',
    description: 'Gaseosa cola zero sin azúcar'
  },
  {
    id: 'BEB-007',
    sku: 'BEB-007',
    name: 'Coca-cola Zero',
    price: 899.99,
    imageUrl: 'https://images.unsplash.com/photo-1622483767028-3f66f32aef97',
    category: 'Bebidas',
    subCategory: 'Gaseosas',
    brand: 'COCA COLA',
    packageType: 'Botella de Plástico',
    volume: '500 Ml',
    description: 'Gaseosa cola zero sin azúcar'
  },
  {
    id: 'BEB-008',
    sku: 'BEB-008',
    name: 'Coca-cola Sabor Liviano',
    price: 1199.99,
    imageUrl: 'https://images.unsplash.com/photo-1622483767028-3f66f32aef97',
    category: 'Bebidas',
    subCategory: 'Gaseosas',
    brand: 'COCA COLA',
    packageType: 'Botella de Plástico',
    volume: '1.75 L',
    description: 'Gaseosa cola sabor liviano'
  },
  {
    id: 'BEB-009',
    sku: 'BEB-009',
    name: 'Coca-cola Sabor Liviano',
    price: 1299.99,
    imageUrl: 'https://images.unsplash.com/photo-1622483767028-3f66f32aef97',
    category: 'Bebidas',
    subCategory: 'Gaseosas',
    brand: 'COCA COLA',
    packageType: 'Botella de Plástico',
    volume: '2.25 L',
    description: 'Gaseosa cola sabor liviano'
  },
  {
    id: 'BEB-010',
    sku: 'BEB-010',
    name: 'Coca-cola Zero',
    price: 699.99,
    imageUrl: 'https://images.unsplash.com/photo-1622483767028-3f66f32aef97',
    category: 'Bebidas',
    subCategory: 'Gaseosas',
    brand: 'COCA COLA',
    packageType: 'Lata',
    volume: '354 Ml',
    description: 'Gaseosa cola zero sin azúcar'
  },
  {
    id: 'BEB-011',
    sku: 'BEB-011',
    name: 'Coca-cola Sabor Liviano',
    price: 899.99,
    imageUrl: 'https://images.unsplash.com/photo-1622483767028-3f66f32aef97',
    category: 'Bebidas',
    subCategory: 'Gaseosas',
    brand: 'COCA COLA',
    packageType: 'Botella de Plástico',
    volume: '500 Ml',
    description: 'Gaseosa cola sabor liviano'
  },
  {
    id: 'BEB-012',
    sku: 'BEB-012',
    name: 'Coca-cola Sabor Original',
    price: 1099.99,
    imageUrl: 'https://images.unsplash.com/photo-1622483767028-3f66f32aef97',
    category: 'Bebidas',
    subCategory: 'Gaseosas',
    brand: 'COCA COLA',
    packageType: 'Botella de Plástico',
    volume: '1.25 L',
    description: 'Gaseosa cola sabor original'
  },
  {
    id: 'BEB-013',
    sku: 'BEB-013',
    name: 'Coca-cola Sabor Original',
    price: 599.99,
    imageUrl: 'https://images.unsplash.com/photo-1622483767028-3f66f32aef97',
    category: 'Bebidas',
    subCategory: 'Gaseosas',
    brand: 'COCA COLA',
    packageType: 'Botella de Vidrio',
    volume: '237 Ml',
    description: 'Gaseosa cola sabor original retornable'
  },
  // Nuevos productos de Aceites
  {
    id: 'aceite-natura-1.5',
    name: 'Aceite De Girasol Natura',
    category: 'Almacén',
    subCategory: 'Aceites Comunes',
    brand: 'NATURA',
    price: 1599.99,
    image: '/products/aceite-natura.jpg',
    imageUrl: '/products/aceite-natura.jpg',
    packageType: 'Botella de Plástico',
    volume: '1.5 L',
    description: 'Aceite de girasol 1.5L'
  },
  {
    id: 'aceite-canuelas-1.5',
    name: 'Aceite Cañuelas De Girasol',
    category: 'Almacén',
    subCategory: 'Aceites Comunes',
    brand: 'CAÑUELAS',
    price: 1499.99,
    image: '/products/aceite-canuelas.jpg',
    imageUrl: '/products/aceite-canuelas.jpg',
    packageType: 'Botella de Plástico',
    volume: '1.5 L',
    description: 'Aceite de girasol 1.5L'
  },
  {
    id: 'aceite-cocinero-1.5',
    name: 'Aceite De Girasol Cocinero',
    category: 'Almacén',
    subCategory: 'Aceites Comunes',
    brand: 'COCINERO',
    price: 1699.99,
    image: '/products/aceite-cocinero.jpg',
    imageUrl: '/products/aceite-cocinero.jpg',
    packageType: 'Botella de Plástico',
    volume: '1.5 L',
    description: 'Aceite de girasol 1.5L'
  },
  {
    id: 'aceite-oliva-cocinero-500',
    name: 'Aceite Oliva Extra Virgen Intenso Cocinero',
    category: 'Almacén',
    subCategory: 'Aceites Especiales',
    brand: 'COCINERO',
    price: 2499.99,
    image: '/products/aceite-oliva-cocinero.jpg',
    imageUrl: '/products/aceite-oliva-cocinero.jpg',
    packageType: 'Botella de Vidrio',
    volume: '500 Ml',
    description: 'Aceite de oliva extra virgen 500ml'
  },
  {
    id: 'aceite-oliva-nucete-2000',
    name: 'Aceite De Oliva Extra Virgen Nucete',
    category: 'Almacén',
    subCategory: 'Aceites Especiales',
    brand: 'NUCETE',
    price: 8999.99,
    image: '/products/aceite-oliva-nucete.jpg',
    imageUrl: '/products/aceite-oliva-nucete.jpg',
    packageType: 'Botella de Vidrio',
    volume: '2000 Ml',
    description: 'Aceite de oliva extra virgen 2L'
  }
];

export const categories = [
  'MDH',
  'Tecnología',
  'Electrodomésticos',
  'Bebidas',
  'Alimentos',
  'Bazar',
  'Almacén'
];

export const productCategories = [
  'Aceites Comunes',
  'Aceites Especiales',
  'Acetos',
  'Jugos de Limón',
  'Vinagres',
  'Gaseosas'
];

export const packageTypes = [
  'Aerosol',
  'Botella',
  'Botella de Plástico',
  'Botella de Vidrio',
  'Lata',
  'Pote',
  'Spray'
];

export const brands = [
  'ALCAZAR',
  'BEEPURE',
  'CASALTA',
  'CAÑUELAS',
  'CHIA GRAAL',
  'COCINERO',
  'COWS PURE',
  'CUISINE & CO NBE MP',
  'DICOMERE',
  'DOS ANCLAS',
  'NATURA',
  'NUCETE',
  'Samsung',
  'Apple',
  'HP',
  'Whirlpool',
  'BGH',
  'Drean',
  'Liliana',
  'Oster',
  'Gadnic',
  'Surrey',
  'COCA COLA'
]; 


=== src/hooks/index.ts ===
export * from './useCollisionDetection';
export * from './useKeyboardShortcuts';
export * from './useSmartGuides';
export * from './useSnapToGrid'; 


=== src/hooks/useBlockHistory.ts ===
import { useState } from 'react';
import { Block } from '../types/builder';

interface HistoryEntry {
  blocks: Block[];
  timestamp: number;
  description: string;
}

export function useBlockHistory(initialBlocks: Block[]) {
  const [history, setHistory] = useState<HistoryEntry[]>([
    { blocks: initialBlocks, timestamp: Date.now(), description: 'Estado inicial' }
  ]);
  const [currentIndex, setCurrentIndex] = useState(0);

  const addToHistory = (blocks: Block[], description: string) => {
    const newEntry = {
      blocks,
      timestamp: Date.now(),
      description
    };

    // Eliminar entradas futuras si estamos en medio del historial
    const newHistory = history.slice(0, currentIndex + 1);
    setHistory([...newHistory, newEntry]);
    setCurrentIndex(newHistory.length);
  };

  const undo = () => {
    if (currentIndex > 0) {
      setCurrentIndex(currentIndex - 1);
      return history[currentIndex - 1].blocks;
    }
    return history[currentIndex].blocks;
  };

  const redo = () => {
    if (currentIndex < history.length - 1) {
      setCurrentIndex(currentIndex + 1);
      return history[currentIndex + 1].blocks;
    }
    return history[currentIndex].blocks;
  };

  const getHistory = () => history;
  const canUndo = currentIndex > 0;
  const canRedo = currentIndex < history.length - 1;

  return {
    addToHistory,
    undo,
    redo,
    getHistory,
    canUndo,
    canRedo,
    currentEntry: history[currentIndex]
  };
} 


=== src/hooks/useCollisionDetection.ts ===
import { useState, useEffect } from 'react';
import { Block } from '../types/builder';

interface CollisionState {
  isColliding: boolean;
  collidingWith: string[];
  repulsionForce: { x: number; y: number };
}

export function useCollisionDetection(blocks: Block[], activeBlockId: string | null) {
  const [collisionState, setCollisionState] = useState<CollisionState>({
    isColliding: false,
    collidingWith: [],
    repulsionForce: { x: 0, y: 0 }
  });

  const calculateRepulsionForce = (block1: Block, block2: Block) => {
    const centerX1 = block1.position.x + (block1.size?.width || 200) / 2;
    const centerY1 = block1.position.y + (block1.size?.height || 100) / 2;
    const centerX2 = block2.position.x + (block2.size?.width || 200) / 2;
    const centerY2 = block2.position.y + (block2.size?.height || 100) / 2;

    const dx = centerX1 - centerX2;
    const dy = centerY1 - centerY2;
    const distance = Math.sqrt(dx * dx + dy * dy);
    const minDistance = 100; // Distancia mínima de repulsión

    if (distance < minDistance) {
      const force = (minDistance - distance) / minDistance;
      return {
        x: (dx / distance) * force * 10,
        y: (dy / distance) * force * 10
      };
    }

    return { x: 0, y: 0 };
  };

  useEffect(() => {
    if (!activeBlockId) {
      setCollisionState({
        isColliding: false,
        collidingWith: [],
        repulsionForce: { x: 0, y: 0 }
      });
      return;
    }

    const activeBlock = blocks.find(b => b.id === activeBlockId);
    if (!activeBlock) return;

    const collidingBlocks: string[] = [];
    let totalForceX = 0;
    let totalForceY = 0;

    blocks.forEach(block => {
      if (block.id === activeBlockId) return;

      const isColliding = checkCollision(activeBlock, block);
      if (isColliding) {
        collidingBlocks.push(block.id);
        const force = calculateRepulsionForce(activeBlock, block);
        totalForceX += force.x;
        totalForceY += force.y;
      }
    });

    setCollisionState({
      isColliding: collidingBlocks.length > 0,
      collidingWith: collidingBlocks,
      repulsionForce: { x: totalForceX, y: totalForceY }
    });
  }, [blocks, activeBlockId]);

  return collisionState;
}

export function checkCollision(block1: Block, block2: Block): boolean {
  const rect1 = {
    left: block1.position.x,
    right: block1.position.x + (block1.size?.width || 200),
    top: block1.position.y,
    bottom: block1.position.y + (block1.size?.height || 100)
  };

  const rect2 = {
    left: block2.position.x,
    right: block2.position.x + (block2.size?.width || 200),
    top: block2.position.y,
    bottom: block2.position.y + (block2.size?.height || 100)
  };

  return !(rect1.right < rect2.left || 
           rect1.left > rect2.right || 
           rect1.bottom < rect2.top || 
           rect1.top > rect2.bottom);
} 


=== src/hooks/useHistory.ts ===
import { useState, useCallback } from 'react';
import { Block } from '../types/builder';

interface HistoryState {
  past: Block[][];
  present: Block[];
  future: Block[][];
}

export function useHistory(initialPresent: Block[]) {
  const [state, setState] = useState<HistoryState>({
    past: [],
    present: initialPresent,
    future: [],
  });

  const canUndo = state.past.length > 0;
  const canRedo = state.future.length > 0;

  const undo = useCallback(() => {
    setState((currentState) => {
      if (!canUndo) return currentState;

      const previous = currentState.past[currentState.past.length - 1];
      const newPast = currentState.past.slice(0, -1);

      return {
        past: newPast,
        present: previous,
        future: [currentState.present, ...currentState.future],
      };
    });
  }, [canUndo]);

  const redo = useCallback(() => {
    setState((currentState) => {
      if (!canRedo) return currentState;

      const next = currentState.future[0];
      const newFuture = currentState.future.slice(1);

      return {
        past: [...currentState.past, currentState.present],
        present: next,
        future: newFuture,
      };
    });
  }, [canRedo]);

  const update = useCallback((newPresent: Block[]) => {
    setState((currentState) => ({
      past: [...currentState.past, currentState.present],
      present: newPresent,
      future: [],
    }));
  }, []);

  return {
    blocks: state.present,
    update,
    undo,
    redo,
    canUndo,
    canRedo,
  };
} 


=== src/hooks/useKeyboardShortcuts.ts ===
import { useHotkeys } from 'react-hotkeys-hook';
import { Block } from '../types/builder';

export function useKeyboardShortcuts(
  blocks: Block[],
  setBlocks: (blocks: Block[]) => void,
  selectedBlock: string | null,
  onSave: () => void,
  onPreview: () => void
) {
  // Guardar
  useHotkeys('ctrl+s, cmd+s', (e) => {
    e.preventDefault();
    onSave();
  });

  // Previsualizar
  useHotkeys('ctrl+p, cmd+p', (e) => {
    e.preventDefault();
    onPreview();
  });

  // Eliminar bloque seleccionado
  useHotkeys('delete, backspace', () => {
    if (selectedBlock) {
      setBlocks(blocks.filter(block => block.id !== selectedBlock));
    }
  });

  // Duplicar bloque
  useHotkeys('ctrl+d, cmd+d', (e) => {
    e.preventDefault();
    if (selectedBlock) {
      const block = blocks.find(b => b.id === selectedBlock);
      if (block) {
        const newBlock = {
          ...block,
          id: `${block.type}-${Date.now()}`,
          position: {
            x: block.position.x + 20,
            y: block.position.y + 20
          }
        };
        setBlocks([...blocks, newBlock]);
      }
    }
  });

  // Mover bloque con flechas
  useHotkeys('up', () => {
    if (selectedBlock) {
      setBlocks(blocks.map(block =>
        block.id === selectedBlock
          ? { ...block, position: { ...block.position, y: block.position.y - 10 } }
          : block
      ));
    }
  });

  useHotkeys('down', () => {
    if (selectedBlock) {
      setBlocks(blocks.map(block =>
        block.id === selectedBlock
          ? { ...block, position: { ...block.position, y: block.position.y + 10 } }
          : block
      ));
    }
  });

  useHotkeys('left', () => {
    if (selectedBlock) {
      setBlocks(blocks.map(block =>
        block.id === selectedBlock
          ? { ...block, position: { ...block.position, x: block.position.x - 10 } }
          : block
      ));
    }
  });

  useHotkeys('right', () => {
    if (selectedBlock) {
      setBlocks(blocks.map(block =>
        block.id === selectedBlock
          ? { ...block, position: { ...block.position, x: block.position.x + 10 } }
          : block
      ));
    }
  });
} 


=== src/hooks/useResizeShortcuts.ts ===
import { useHotkeys } from 'react-hotkeys-hook';
import { Block } from '../types/builder';

const RESIZE_STEP = 10; // Píxeles por cada ajuste
const FINE_RESIZE_STEP = 1; // Para ajuste fino

export function useResizeShortcuts(
  blocks: Block[],
  setBlocks: (blocks: Block[]) => void,
  selectedBlock: string | null
) {
  // Redimensionar con flechas + Alt
  useHotkeys('alt+up', () => {
    if (!selectedBlock) return;
    setBlocks(blocks.map(block =>
      block.id === selectedBlock
        ? {
            ...block,
            size: {
              ...block.size,
              height: (block.size?.height || 100) - RESIZE_STEP
            }
          }
        : block
    ));
  });

  useHotkeys('alt+down', () => {
    if (!selectedBlock) return;
    setBlocks(blocks.map(block =>
      block.id === selectedBlock
        ? {
            ...block,
            size: {
              ...block.size,
              height: (block.size?.height || 100) + RESIZE_STEP
            }
          }
        : block
    ));
  });

  useHotkeys('alt+left', () => {
    if (!selectedBlock) return;
    setBlocks(blocks.map(block =>
      block.id === selectedBlock
        ? {
            ...block,
            size: {
              ...block.size,
              width: (block.size?.width || 200) - RESIZE_STEP
            }
          }
        : block
    ));
  });

  useHotkeys('alt+right', () => {
    if (!selectedBlock) return;
    setBlocks(blocks.map(block =>
      block.id === selectedBlock
        ? {
            ...block,
            size: {
              ...block.size,
              width: (block.size?.width || 200) + RESIZE_STEP
            }
          }
        : block
    ));
  });

  // Ajuste fino con Shift + Alt + flechas
  useHotkeys('shift+alt+up', () => {
    if (!selectedBlock) return;
    setBlocks(blocks.map(block =>
      block.id === selectedBlock
        ? {
            ...block,
            size: {
              ...block.size,
              height: (block.size?.height || 100) - FINE_RESIZE_STEP
            }
          }
        : block
    ));
  });

  // ... similar para otras direcciones con ajuste fino ...

  // Presets con números
  useHotkeys('alt+1', () => {
    if (!selectedBlock) return;
    setBlocks(blocks.map(block =>
      block.id === selectedBlock
        ? {
            ...block,
            size: getPresetSize(block.type, 'small')
          }
        : block
    ));
  });

  useHotkeys('alt+2', () => {
    if (!selectedBlock) return;
    setBlocks(blocks.map(block =>
      block.id === selectedBlock
        ? {
            ...block,
            size: getPresetSize(block.type, 'medium')
          }
        : block
    ));
  });

  useHotkeys('alt+3', () => {
    if (!selectedBlock) return;
    setBlocks(blocks.map(block =>
      block.id === selectedBlock
        ? {
            ...block,
            size: getPresetSize(block.type, 'large')
          }
        : block
    ));
  });
}

function getPresetSize(blockType: string, size: 'small' | 'medium' | 'large') {
  const presets = {
    header: {
      small: { width: 600, height: 80 },
      medium: { width: 800, height: 100 },
      large: { width: 1000, height: 120 }
    },
    footer: {
      small: { width: 600, height: 60 },
      medium: { width: 800, height: 80 },
      large: { width: 1000, height: 100 }
    },
    image: {
      small: { width: 200, height: 150 },
      medium: { width: 400, height: 300 },
      large: { width: 600, height: 450 }
    },
    // ... otros presets para diferentes tipos de bloques ...
  };

  return presets[blockType]?.[size] || { width: 200, height: 100 };
} 


=== src/hooks/useSmartGuides.ts ===
import { useState, useEffect } from 'react';
import { Block } from '../types/builder';

interface Guide {
  position: number;
  type: 'vertical' | 'horizontal';
  strength: number;
}

export function useSmartGuides(blocks: Block[], selectedBlock: string | null) {
  const [guides, setGuides] = useState<Guide[]>([]);

  useEffect(() => {
    if (!selectedBlock) {
      setGuides([]);
      return;
    }

    const activeBlock = blocks.find(b => b.id === selectedBlock);
    if (!activeBlock) return;

    const newGuides: Guide[] = [];

    blocks.forEach(block => {
      if (block.id === selectedBlock) return;

      // Alineación central
      const blockCenterX = block.position.x + (block.size?.width || 0) / 2;
      const activeCenterX = activeBlock.position.x + (activeBlock.size?.width || 0) / 2;
      
      if (Math.abs(blockCenterX - activeCenterX) < 10) {
        newGuides.push({
          position: blockCenterX,
          type: 'vertical',
          strength: 1 - Math.abs(blockCenterX - activeCenterX) / 10
        });
      }

      // Alineación de bordes
      // ... similar lógica para bordes y alineación horizontal
    });

    setGuides(newGuides);
  }, [blocks, selectedBlock]);

  return guides;
} 


=== src/hooks/useSnapToGrid.ts ===
export function useSnapToGrid(value: number, gridSize: number = 10): number {
  return Math.round(value / gridSize) * gridSize;
} 


=== src/hooks/useTheme.ts ===
import { useState, useEffect } from 'react';

type Theme = 'light' | 'dark';

export const useTheme = (forceDark?: boolean) => {
  const [theme, setTheme] = useState<Theme>(() => {
    if (forceDark) return 'dark';
    // Verificar si hay una preferencia guardada
    const savedTheme = localStorage.getItem('theme') as Theme;
    if (savedTheme) return savedTheme;

    // Si no hay preferencia guardada, usar la preferencia del sistema
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }

    return 'light';
  });

  useEffect(() => {
    // Actualizar la clase en el documento
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
    
    // Guardar la preferencia
    localStorage.setItem('theme', theme);
  }, [theme]);

  const toggleTheme = () => {
    setTheme(prevTheme => prevTheme === 'dark' ? 'light' : 'dark');
  };

  return { theme, toggleTheme };
}; 


=== src/index.css ===
@tailwind base;
@tailwind components;
@tailwind utilities;

html {
  scroll-behavior: smooth;
}

.smooth-scroll {
  @apply transition-all duration-300 ease-in-out;
}

.poster-editor {
  @apply bg-black;
}


=== src/main.tsx ===
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)



=== src/pages/Login.tsx ===
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "../components/ui/button";
import { Input } from "../components/ui/input";
import { useToast } from "../components/ui/use-toast";

function Login() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const navigate = useNavigate();
  const { toast } = useToast();

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (email === "admin@admin.com" && password === "admin") {
      navigate("/dashboard");
    } else {
      toast({
        variant: "destructive",
        title: "Error de autenticación",
        description: "Credenciales inválidas",
      });
    }
  };

  return (
    <div 
      className="min-h-screen flex items-center justify-center p-4"
      style={{
        background: 'linear-gradient(135deg, #2563eb, #1d4ed8, #1e40af) !important',
        backgroundSize: '200% 200%',
        position: 'relative',
        zIndex: 0
      }}
    >
      <div 
        className="absolute inset-0 z-[-1]" 
        style={{
          backgroundColor: '#1e40af',
          background: 'linear-gradient(135deg, #2563eb, #1d4ed8, #1e40af)',
        }}
      />
      <div className="w-full max-w-sm space-y-8 bg-white/10 backdrop-blur-sm p-8 rounded-xl border border-white/20">
        <div className="text-center">
          <div className="mb-8">
            <div className="h-16 w-16 mx-auto bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm">
              <svg className="h-8 w-8 text-white" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 16l-4-4m0 0l4-4m-4 4h14" />
              </svg>
            </div>
          </div>
          <h2 className="mt-6 text-3xl font-bold tracking-tight text-white">
            Speed+
          </h2>
          <p className="mt-2 text-sm text-white/80">
            Inicia sesión en tu cuenta
          </p>
        </div>

        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="space-y-4">
            <Input
              type="email"
              value={email}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setEmail(e.target.value)}
              placeholder="Email"
              className="bg-white/10 border-white/20 text-white placeholder:text-white/50 focus:border-white/30"
              required
            />
            <Input
              type="password"
              value={password}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPassword(e.target.value)}
              placeholder="Contraseña"
              className="bg-white/10 border-white/20 text-white placeholder:text-white/50 focus:border-white/30"
              required
            />
          </div>

          <Button
            type="submit"
            className="w-full bg-white/20 hover:bg-white/30 text-white backdrop-blur-sm transition-colors"
          >
            Iniciar Sesión
          </Button>
        </form>
      </div>
    </div>
  );
}

export default Login; 


=== src/pages/PosterPreview.tsx ===
import React from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { PosterPreview as Poster } from '../components/Posters/PosterPreview';
import { ArrowLeft } from 'lucide-react';

export const PosterPreviewPage = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { product, promotion, company, showLogo } = location.state || {};

  return (
    <div className="min-h-screen bg-slate-900 p-8">
      <div className="max-w-7xl mx-auto">
        <button
          onClick={() => navigate(-1)}
          className="flex items-center text-white/80 hover:text-white mb-8"
        >
          <ArrowLeft className="w-5 h-5 mr-2" />
          <span className="font-medium">Volver al editor</span>
        </button>

        {product && (
          <Poster
            product={product}
            promotion={promotion}
            company={company}
            showTopLogo={showLogo}
            pricePerUnit={`${product.price * 2}`}
            points="49"
            origin="ARGENTINA"
            barcode="7790895000782"
          />
        )}
      </div>
    </div>
  );
}; 


=== src/styles/fonts.css ===
@font-face {
  font-family: 'VAG Rounded BT';
  src: url('/fonts/VAGRoundedBT-Bold.woff2') format('woff2'),
       url('/fonts/VAGRoundedBT-Bold.woff') format('woff');
  font-weight: bold;
  font-style: normal;
  font-display: swap;
} 


=== src/styles/map.css ===
.mapboxgl-map {
  width: 100%;
  height: 100%;
}

.custom-popup .mapboxgl-popup-content {
  padding: 12px;
  border-radius: 8px;
  background: white;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.mapboxgl-marker {
  animation: bounce 0.5s ease-in-out;
}

@keyframes bounce {
  0% { transform: translateY(-20px); opacity: 0; }
  50% { transform: translateY(10px); }
  100% { transform: translateY(0); opacity: 1; }
} 


=== src/types/builder.ts ===
export type BlockType = 
  | 'header'
  | 'footer'
  | 'sku'
  | 'image'
  | 'price'
  | 'discount'
  | 'promotion'
  | 'logo';

export interface BlockContent {
  text?: string;
  imageUrl?: string;
}

export interface Block {
  id: string;
  type: BlockType;
  content: BlockContent;
  position: {
    x: number;
    y: number;
  };
  size: {
    width: number;
    height: number;
  };
}

export interface PresetSize {
  width: number;
  height: number;
}

export interface BlockPresets {
  [key in BlockType]?: {
    small: PresetSize;
    medium: PresetSize;
    large: PresetSize;
  };
} 


=== src/types/product.ts ===
export interface Product {
  id: string;
  sku: string;
  name: string;
  description: string;
  price: number;
  imageUrl: string;
  category: string;
} 


=== src/types/promotion.ts ===
export interface Promotion {
  id: string;
  title: string;
  description: string;
  discount: string;
  startDate: string;
  endDate: string;
  imageUrl: string;
  category: 'Bancaria' | 'Producto' | 'Categoría' | 'Especial';
  conditions: string[];
  isActive: boolean;
  bank?: string;
  cardType?: string;
  selectedBanks: string[];
  cardOptions: {
    debit: boolean;
    credit: boolean;
    cardBrands: string[];
  };
} 


=== src/types.d.ts ===
/// <reference types="react" />
/// <reference types="react-dom" />
/// <reference types="html2canvas" />

declare module 'lucide-react';
declare module '*.css';
declare module '@dnd-kit/core';
declare module '@dnd-kit/modifiers';
declare module '@dnd-kit/sortable';
declare module 'react-particles';
declare module 'tsparticles';
  


=== src/utils/blockRenderer.tsx ===
import React, { useRef } from 'react';
import { Block } from '../types/builder';
import { Upload, Image as ImageIcon } from 'lucide-react';

interface RenderBlockContentProps {
  block: Block;
  onImageUpload: (file: File) => void;
}

export function renderBlockContent({ block, onImageUpload }: RenderBlockContentProps): React.ReactNode {
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleImageClick = () => {
    fileInputRef.current?.click();
  };

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    if (!file.type.startsWith('image/')) {
      alert('Por favor, selecciona un archivo de imagen válido');
      return;
    }

    if (file.size > 5 * 1024 * 1024) {
      alert('La imagen es demasiado grande. El tamaño máximo es 5MB');
      return;
    }

    onImageUpload(file);
  };

  // Renderizar bloques que permiten imágenes
  if (['header', 'footer', 'image', 'logo'].includes(block.type)) {
    return (
      <div className="w-full h-full min-h-[100px] relative group">
        {block.content?.imageUrl ? (
          // Si hay una imagen cargada
          <div className="relative w-full h-full">
            <img 
              src={block.content.imageUrl} 
              alt={block.type}
              className="w-full h-full object-contain hover:object-cover transition-all duration-300"
              style={{
                maxWidth: '100%',
                maxHeight: '100%',
                objectFit: block.type === 'logo' ? 'contain' : 'cover'
              }}
            />
            <div className="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 
                          transition-opacity flex items-center justify-center gap-2">
              <button
                onClick={handleImageClick}
                className="bg-white text-gray-800 px-4 py-2 rounded-lg hover:bg-gray-100 
                         transition-colors text-sm font-medium flex items-center gap-2"
              >
                <Upload className="w-4 h-4" />
                Cambiar imagen
              </button>
              <div className="flex gap-2">
                <button
                  onClick={() => {
                    const img = document.querySelector(`[data-block-id="${block.id}"] img`) as HTMLImageElement;
                    if (img) {
                      img.style.objectFit = 'contain';
                    }
                  }}
                  className="bg-white text-gray-800 px-3 py-1 rounded-lg hover:bg-gray-100 text-sm"
                >
                  Ajustar
                </button>
                <button
                  onClick={() => {
                    const img = document.querySelector(`[data-block-id="${block.id}"] img`) as HTMLImageElement;
                    if (img) {
                      img.style.objectFit = 'cover';
                    }
                  }}
                  className="bg-white text-gray-800 px-3 py-1 rounded-lg hover:bg-gray-100 text-sm"
                >
                  Llenar
                </button>
              </div>
            </div>
          </div>
        ) : (
          // Si no hay imagen
          <button 
            onClick={handleImageClick}
            className="w-full h-full bg-gray-50 rounded-lg flex flex-col items-center justify-center 
                     cursor-pointer hover:bg-gray-100 transition-colors border-2 border-dashed 
                     border-gray-300 hover:border-indigo-500 group"
          >
            <div className="transform group-hover:scale-110 transition-transform">
              <ImageIcon className="w-8 h-8 text-gray-400 mb-2" />
              <span className="text-gray-500 text-sm font-medium">
                {block.type === 'header' ? 'Subir encabezado' :
                 block.type === 'footer' ? 'Subir pie de página' :
                 block.type === 'logo' ? 'Subir logo' : 'Subir imagen'}
              </span>
              <span className="text-gray-400 text-xs mt-1 block">
                Click para seleccionar
              </span>
            </div>
          </button>
        )}
        <input
          ref={fileInputRef}
          type="file"
          accept="image/*"
          className="hidden"
          onChange={handleImageChange}
        />
      </div>
    );
  }

  // Renderizar otros tipos de bloques
  return (
    <div className="w-full h-full flex items-center justify-center">
      {block.content.text || `Bloque ${block.type}`}
    </div>
  );
} 


=== src/utils/cn.ts ===
import { clsx, type ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
} 


=== src/utils/paperSizes.ts ===
export const PAPER_SIZES = {
  A4: {
    width: 210, // mm
    height: 297, // mm
    name: 'A4'
  },
  A3: {
    width: 297, // mm
    height: 420, // mm
    name: 'A3'
  },
  LETTER: {
    width: 216, // mm
    height: 279, // mm
    name: 'Carta'
  }
};

// Factor de conversión de mm a píxeles (96 DPI)
export const MM_TO_PX = 3.7795275591;

export const getPaperSizeInPixels = (paperSize: keyof typeof PAPER_SIZES) => {
  const size = PAPER_SIZES[paperSize];
  return {
    width: Math.round(size.width * MM_TO_PX),
    height: Math.round(size.height * MM_TO_PX),
    name: size.name
  };
}; 


=== src/vite-env.d.ts ===
/// <reference types="vite/client" />



=== tailwind.config.js ===
/** @type {import('tailwindcss').Config} */
export default {
  darkMode: 'class',
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      animation: {
        'gradient-xy': 'gradient-xy 15s ease infinite',
      },
      keyframes: {
        'gradient-xy': {
          '0%, 100%': {
            'background-size': '400% 400%',
            'background-position': 'left center'
          },
          '50%': {
            'background-size': '200% 200%',
            'background-position': 'right center'
          }
        }
      }
    },
  },
  plugins: [],
}



=== vite.config.ts ===
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  build: {
    rollupOptions: {
      external: ['html2canvas'],
    },
  },
  optimizeDeps: {
    include: ['html2canvas'],
  },
});

